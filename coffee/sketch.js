// Generated by CoffeeScript 2.7.0
var FILES, R, RADIUS, RANKS, SIZE, VERSION, assert, bearingBetween, deltaXYBetweenPoints, destinationPoint, distanceBetween, dump, echo, gpsCount, grid, initSounds, makePoint, matrix, messages, range, sounds, startTracking, target, targets, watchID, wp, wperr;

VERSION = 27;

SIZE = 100; // meter. En schackrutas storlek

RADIUS = 3; // meter. Maxavstånd mellan spelaren och target

FILES = 'efgh'; // De 16 rutor man har hand om

RANKS = '4321';

R = 6371e3; // Jordens radie i meter

targets = [];

target = "";

messages = [];

sounds = {};

matrix = {}; // WGS84

grid = {}; // meter

grid.s = [
  0,
  0 // origo, samlingspunkt
];

echo = console.log;

range = _.range;

dump = function(msg) {
  messages.unshift(msg); // nyaste överst
  if (messages.length > 20) {
    return messages.pop(); // äldsta droppas
  }
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

watchID = null;

gpsCount = 0;

wp = (p) => {
  gpsCount += 1;
  matrix.p.lat = p.coords.latitude;
  matrix.p.lon = p.coords.longitude;
  grid.p = makePoint(matrix.s, matrix.p);
  // grid.p[1] = -grid.p[1]
  dump(`${gpsCount} ${round(bearingBetween(matrix.p, matrix[target]))}° ${target} ${round(distanceBetween(matrix.p, matrix[target]), 1)}m ${round(p.coords.latitude, 6)} ${round(p.coords.longitude, 6)}`);
  
  // om man är inom RADIUS meter från målet, byt mål
  if (target === '') {
    return;
  }
  if (RADIUS < distanceBetween(matrix.p, matrix[target])) {
    return;
  }
  if (targets.length === 0) {
    target = '';
    return;
  }
  sounds.soundDown.play();
  return target = targets.pop();
};

wperr = function(err) {
  return dump(`Fel: ${err.message}`);
};

window.touchStarted = function() {
  return startTracking();
};

startTracking = function() {
  if (!navigator.geolocation) {
    dump("Geolocation stöds inte i din webbläsare.");
    return;
  }
  dump("Begär platsdata...");
  return watchID = navigator.geolocation.watchPosition(wp, wperr, {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 1000
  });
};

// document.querySelector('#startBtn').addEventListener 'click', startTracking
distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return (θ * 180 / Math.PI + 360) % 360; // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

initSounds = function() {
  var k, len, name, ref, results, sound;
  sounds = {};
  ref = "soundDown soundUp".split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    sound = loadSound(`sounds/${name}.wav`);
    sound.setVolume(1.0);
    sound.pan(0);
    results.push(sounds[name] = sound);
  }
  return results;
};

window.preload = function() {
  return initSounds();
};

window.setup = function() {
  var arr, i, j, k, key, l, lat, lon;
  createCanvas(windowWidth - 10, windowHeight - 10, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  textSize(40);
  noStroke();
  frameRate(2);
  matrix.s = {
    lat: 59.271667,
    lon: 18.151778 // knixen på kraftledningen NO Brotorp
  };
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 4; i = ++k) {
      results.push(destinationPoint(matrix.s.lat, matrix.s.lon, (i + 0.5) * SIZE, 90));
    }
    return results;
  })();
// echo arr
  for (i = k = 0; k < 4; i = ++k) {
    for (j = l = 0; l < 4; j = ++l) {
      key = `${FILES[i]}${RANKS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, (j + 0.5) * SIZE, 180);
      grid[key] = [50 + 100 * i, 50 + 100 * j];
    }
  }
  targets = _.keys(matrix);
  targets = 's p h1 h2 g1 f1 g2 h3 h4 g3 f2 e1 e2 f3 g4 f4 e3 e4'.split(' ');
  // targets = _.shuffle targets
  echo(targets);
  target = 's';
  // kvadrantens mittpunkt
  lat = (matrix.f3.lat + matrix.g2.lat) / 2;
  lon = (matrix.f3.lon + matrix.g2.lon) / 2;
  matrix.p = {lat, lon};
  grid.p = [200, -200];
  echo('matrix', matrix);
  return echo('grid', grid);
};

// assert 224, round distanceBetween matrix.c1, matrix.d3
// assert  27, round bearingBetween matrix.c1, matrix.d3
// assert  90, round bearingBetween matrix.c3, matrix.d3
// assert 108, round bearingBetween matrix.a4, matrix.d3
// assert 214, round bearingBetween matrix.c4, matrix.a1
// assert 297, round bearingBetween matrix.d2, matrix.b3
window.draw = function() {
  var i, k, key, l, len, px, py, ref, tx, ty, x, y;
  background(0);
  fill(255);
  //scale 1.8
  stroke(255);
  [px, py] = grid.p;
  [tx, ty] = grid[target];
  line(50 + px, 50 - py, 50 + tx, 50 + ty);
  noStroke();
  for (key in grid) {
    [x, y] = grid[key];
    fill('white');
    if (key === target) {
      fill('red');
    }
    if (key === 'p') {
      fill('yellow');
      circle(50 + x, 50 - y, 10);
    } else {
      // text key, 50+x, 50+y
      circle(50 + x, 50 + y, 10);
    }
  }
  fill('green');
  for (i = k = 0; k < 4; i = ++k) {
    text(FILES[i], 100 + i * 100, 450);
    text(RANKS[i], 50, 100 + i * 100);
  }
  text('Ver: ' + VERSION, 250, 50);
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 100, 500);
  text(target, 250, 500);
  text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 400, 500);
  push();
  textAlign("left");
  textSize(20);
  ref = range(messages.length);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    text(messages[i], 10, 550 + i * 20);
  }
  return pop();
};

// class Player
// 	constructor : (@name, @tx=4*SIZE, @ty=4*SIZE) ->
// 		@speed = SPEED
// 		@pos = createVector 4*SIZE,4*SIZE
// 		@target = new Square createVector @tx, @ty
// 		@home = @target
// 		@squares = [] # lista med Square som ej påbörjats
// 		@trail = []
// 		@n = 0
// 		@distance = 0
// 		@assists = 0

// 	closest : ->
// 		if @squares.length == 0 then return null
// 		bestDist = 99999
// 		bestSq = @squares[0]
// 		for square in @squares
// 			d = p5.Vector.dist square.pos, @pos
// 			if d < bestDist
// 				bestDist = d
// 				bestSq = square
// 		bestSq

// 	add : (sq) ->
// 		@squares.push sq
// 		@target = @closest()

// 	drawTail : ->
// 		if @n % (10/SPEED) == 0 then @trail.push createVector @pos.x, @pos.y
// 		@n += 1
// 		if @trail.length > MAXTRAIL then @trail.shift()
// 		stroke 'black'
// 		for i in [0...@trail.length]
// 			size = map i, 0, @trail.length - 1, 5,15
// 			noFill()
// 			ellipse @trail[i].x, @trail[i].y, size, size

// 	draw : () ->
// 		target = @target.pos
// 		dx = target.x - @pos.x
// 		dy = target.y - @pos.y
// 		d = sqrt dx*dx+dy*dy

// 		stroke 'black'

// 		# if @name in 'ABCD'
// 		line target.x, target.y, @pos.x, @pos.y

// 		step = p5.Vector.sub(target, @pos).setMag min @speed, d
// 		if d < @speed # target nådd
// 			if not @target.done
// 				@target.done = true
// 				@target.carrier = @name

// 				# Skicka draget om både start.done och slut.done
// 				for key of games
// 					g = games[key]
// 					if g.move and g.move.start.done and g.move.stopp.done						
// 						duration = (15/SPEED * (performance.now() - g.move.start.time)/1000)

// 						if g.index % 2 == 0 then g.duration += duration
// 						if g.move.start.carrier == g.move.stopp.carrier
// 							carriers = g.move.start.carrier
// 						else 
// 							carriers = g.move.start.carrier + g.move.stopp.carrier

// 						if g.move.start.carrier in 'ABCD'
// 							# echo 'assists: ',g.move.start.carrier,g.move.stopp.carrier
// 							players[g.move.start.carrier].assists += 1
// 							players[g.move.stopp.carrier].assists += 1
// 							# echo g.name, g.move.uci, @name, g.move.start.carrier + g.move.stopp.carrier

// 						g.chess.move { from: g.move.uci.slice(0, 2), to: g.move.uci.slice(2, 4) }

// 						td = document.getElementById("SEL#{g.name}")
// 						td.innerHTML += "#{g.san_moves[g.chess.history().length-1]} by #{carriers} (#{duration.toFixed()} s)<br>"

// 						document.getElementById("board#{g.name}").innerHTML = shrink g.chess.ascii()
// 						updateInfo g.name, @

// 						g.queue.push g.move
// 						g.move = null
// 						if g.initMove() == false
// 							stoppTime = Date.now()
// 							# echo 'done', (stoppTime-startTime)/1000

// 			@squares = _.filter @squares, (sq) -> sq.done == false

// 			# hämta närmaste uppdrag om sådant finns
// 			if @squares.length > 0
// 				@target = @closest()
// 				d = p5.Vector.dist @pos,@target.pos
// 				@distance += d

// 		@pos.add step

// 		for square in @squares
// 			if @name in 'ABCD'
// 				fill 'red'
// 			else
// 				fill 'black'
// 			circle square.pos.x, square.pos.y, 10

// 		# if @name in 'ABCD'
// 		@drawTail()
// 		if @name in 'ABCD' then fill 'yellow' else fill 'black'
// 		strokeWeight 1
// 		circle @pos.x,@pos.y,0.4*SIZE
// 		if @name in 'ABCD' then fill 'black' else fill 'yellow'
// 		noStroke()
// 		# fill 'black'
// 		text @name, @pos.x, @pos.y

// uci2pos = (uci) -> # t ex e2e4 => [[225,75],[225,175]]
// 	startx = uci[0]
// 	starty = uci[1]
// 	stoppx = uci[2]
// 	stoppy = uci[3]
// 	result = []
// 	x = FILES.indexOf startx
// 	y = 7 - RANKS.indexOf starty
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	x = FILES.indexOf stoppx
// 	y = 7 - RANKS.indexOf stoppy
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	result

// class Game
// 	constructor : (@name, pgn, @link) ->
// 		@chess = new Chess()
// 		@chess.load_pgn pgn
// 		@san_moves = @chess.history() # [Nf3, ...]
// 		@uci_moves = (move.from + move.to for move in @chess.history({ verbose: true })) # [g1f3, ...]
// 		@move = null
// 		@queue = []
// 		@duration = 0
// 		@chess.reset()
// 		@index = -1
// 		document.getElementById("link#{@name}").innerHTML = "<a href=\"#{@link}\" target=\"_blank\">Link</a>"

// 	initMove : ->
// 		if @index >= @uci_moves.length - 1 then return false
// 		@index += 1
// 		if @move != null 
// 			#echo 'too quick!'
// 			return false
// 		@move = new Move @uci_moves[@index], @name

// 		start = @move.uci.slice 0,2
// 		stopp = @move.uci.slice 2,4

// 		antal = 'ABCD'.indexOf @name
// 		for i in [0...antal] 
// 			start = rotate start
// 			stopp = rotate stopp

// 		if @index % 2 == 0
// 			a = "1234"
// 			b = "5678"
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.A.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.B.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.C.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.D.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.A.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.B.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.C.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.D.add @move.stopp

// 		else
// 			a = "1234"
// 			b = "5678"
// 			# Hantera motståndaren
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.G.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.E.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.H.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.F.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.G.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.E.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.H.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.F.add @move.stopp
// 		true

// class Square 
// 	constructor : (@pos, @uci="", @carrier="") -> # Vector
// 		@done = false
// 		@time = performance.now()

// # rotate = (sq) -> FILES[8-sq[1]] + String 1 + FILES.indexOf sq[0]
// # echo "g3" == rotate "c2"
// # echo "h1" == rotate "a1"
// # echo "h8" == rotate rotate "a1"
// # echo "a8" == rotate rotate rotate "a1"
// # echo "a1" == rotate rotate rotate rotate "a1"

// # coordinates = (sq) ->
// # 	x = FILES.indexOf sq[0]
// # 	y = RANKS.indexOf sq[1]
// # 	[x, 7-y]
// # echo _.isEqual [4,4], coordinates "e4"
// # echo _.isEqual [0,7], coordinates "a1"

// # toVector = ([x,y]) ->
// # 	createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// # echo toVector [3,4]

// class Move
// 	constructor : (@uci, @name) -> # e2e4, B
// 		antal = "ABCD".indexOf @name
// 		start = @uci.slice 0,2
// 		stopp = @uci.slice 2,4
// 		for i in [0...antal]
// 			start = rotate start
// 			stopp = rotate stopp
// 		start = toVector coordinates start
// 		stopp = toVector coordinates stopp
// 		@pos = [start, stopp]
// 		@start = new Square start, @uci
// 		@stopp = new Square stopp, @uci

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsY0FBQSxFQUFBLG9CQUFBLEVBQUEsZ0JBQUEsRUFBQSxlQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUE7O0FBQUEsT0FBQSxHQUFVOztBQUNWLElBQUEsR0FBTyxJQURQOztBQUVBLE1BQUEsR0FBUyxFQUZUOztBQUlBLEtBQUEsR0FBUSxPQUpSOztBQUtBLEtBQUEsR0FBUTs7QUFFUixDQUFBLEdBQUksT0FQSjs7QUFTQSxPQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTOztBQUVULFFBQUEsR0FBVzs7QUFDWCxNQUFBLEdBQVMsQ0FBQTs7QUFFVCxNQUFBLEdBQVMsQ0FBQSxFQWZUOztBQWdCQSxJQUFBLEdBQU8sQ0FBQSxFQWhCUDs7QUFpQkEsSUFBSSxDQUFDLENBQUwsR0FBUztFQUFDLENBQUQ7RUFBRyxDQUFIOzs7QUFFVCxJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUNmLEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBRVYsSUFBQSxHQUFPLFFBQUEsQ0FBQyxHQUFELENBQUE7RUFDTixRQUFRLENBQUMsT0FBVCxDQUFpQixHQUFqQixFQUFEO0VBQ0MsSUFBRyxRQUFRLENBQUMsTUFBVCxHQUFrQixFQUFyQjtXQUE2QixRQUFRLENBQUMsR0FBVCxDQUFBLEVBQTdCOztBQUZNOztBQUlQLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FB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O01BS0MsTUFBQSxDQUFPLEVBQUEsR0FBRyxDQUFWLEVBQWEsRUFBQSxHQUFHLENBQWhCLEVBQW1CLEVBQW5CLEVBTEQ7O0VBSkQ7RUFXQSxJQUFBLENBQUssT0FBTDtFQUNBLEtBQVMseUJBQVQ7SUFDQyxJQUFBLENBQUssS0FBSyxDQUFDLENBQUQsQ0FBVixFQUFlLEdBQUEsR0FBSSxDQUFBLEdBQUUsR0FBckIsRUFBeUIsR0FBekI7SUFDQSxJQUFBLENBQUssS0FBSyxDQUFDLENBQUQsQ0FBVixFQUFlLEVBQWYsRUFBbUIsR0FBQSxHQUFJLENBQUEsR0FBRSxHQUF6QjtFQUZEO0VBSUEsSUFBQSxDQUFLLE9BQUEsR0FBVSxPQUFmLEVBQXVCLEdBQXZCLEVBQTJCLEVBQTNCO0VBQ0EsSUFBQSxDQUFLLEtBQUEsQ0FBTSxjQUFBLENBQWUsTUFBTSxDQUFDLENBQXRCLEVBQXlCLE1BQU0sQ0FBQyxNQUFELENBQS9CLENBQU4sQ0FBQSxHQUFrRCxHQUF2RCxFQUEyRCxHQUEzRCxFQUErRCxHQUEvRDtFQUNBLElBQUEsQ0FBSyxNQUFMLEVBQWEsR0FBYixFQUFpQixHQUFqQjtFQUNBLElBQUEsQ0FBSyxLQUFBLENBQU0sZUFBQSxDQUFnQixNQUFNLENBQUMsQ0FBdkIsRUFBMEIsTUFBTSxDQUFDLE1BQUQsQ0FBaEMsQ0FBTixDQUFBLEdBQW1ELEdBQXhELEVBQTRELEdBQTVELEVBQWdFLEdBQWhFO0VBRUEsSUFBQSxDQUFBO0VBQ0EsU0FBQSxDQUFVLE1BQVY7RUFDQSxRQUFBLENBQVMsRUFBVDtBQUNBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFBLENBQUssUUFBUSxDQUFDLENBQUQsQ0FBYixFQUFrQixFQUFsQixFQUFzQixHQUFBLEdBQU0sQ0FBQSxHQUFFLEVBQTlCO0VBREQ7U0FFQSxHQUFBLENBQUE7QUFyQ2E7O0FBektkIiwic291cmNlc0NvbnRlbnQiOlsiVkVSU0lPTiA9IDI3XHJcblNJWkUgPSAxMDAgIyBtZXRlci4gRW4gc2NoYWNrcnV0YXMgc3Rvcmxla1xyXG5SQURJVVMgPSAzICMgbWV0ZXIuIE1heGF2c3TDpW5kIG1lbGxhbiBzcGVsYXJlbiBvY2ggdGFyZ2V0XHJcblxyXG5GSUxFUyA9ICdlZmdoJyAjIERlIDE2IHJ1dG9yIG1hbiBoYXIgaGFuZCBvbVxyXG5SQU5LUyA9ICc0MzIxJ1xyXG5cclxuUiA9IDYzNzFlMyAgIyBKb3JkZW5zIHJhZGllIGkgbWV0ZXJcclxuXHJcbnRhcmdldHMgPSBbXVxyXG50YXJnZXQgPSBcIlwiXHJcblxyXG5tZXNzYWdlcyA9IFtdXHJcbnNvdW5kcyA9IHt9XHJcblxyXG5tYXRyaXggPSB7fSAjIFdHUzg0XHJcbmdyaWQgPSB7fSAjIG1ldGVyXHJcbmdyaWQucyA9IFswLDBdICMgb3JpZ28sIHNhbWxpbmdzcHVua3RcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbmR1bXAgPSAobXNnKSAtPlxyXG5cdG1lc3NhZ2VzLnVuc2hpZnQgbXNnICMgbnlhc3RlIMO2dmVyc3RcclxuXHRpZiBtZXNzYWdlcy5sZW5ndGggPiAyMCB0aGVuIG1lc3NhZ2VzLnBvcCgpICMgw6RsZHN0YSBkcm9wcGFzXHJcblxyXG5hc3NlcnQgPSAoYSxiKSAtPiBpZiBhICE9IGIgdGhlbiBlY2hvICdhc3NlcnQnLGEsYlxyXG5cclxud2F0Y2hJRCA9IG51bGxcclxuZ3BzQ291bnQgPSAwXHJcblxyXG53cCA9IChwKSA9PlxyXG5cdGdwc0NvdW50ICs9IDFcclxuXHRtYXRyaXgucC5sYXQgPSBwLmNvb3Jkcy5sYXRpdHVkZVxyXG5cdG1hdHJpeC5wLmxvbiA9IHAuY29vcmRzLmxvbmdpdHVkZVxyXG5cdGdyaWQucCA9IG1ha2VQb2ludCBtYXRyaXgucywgbWF0cml4LnBcclxuXHQjIGdyaWQucFsxXSA9IC1ncmlkLnBbMV1cclxuXHRkdW1wIFwiI3tncHNDb3VudH0gI3tyb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXgucCwgbWF0cml4W3RhcmdldF19wrAgI3t0YXJnZXR9ICN7cm91bmQgZGlzdGFuY2VCZXR3ZWVuKG1hdHJpeC5wLCBtYXRyaXhbdGFyZ2V0XSksMX1tICN7cm91bmQgcC5jb29yZHMubGF0aXR1ZGUsNn0gI3tyb3VuZCBwLmNvb3Jkcy5sb25naXR1ZGUsNn1cIiAjIGR4PSN7cm91bmQgZ3JpZC5wWzBdfSBkeT0je3JvdW5kIGdyaWQucFsxXX1cIlxyXG5cclxuXHQjIG9tIG1hbiDDpHIgaW5vbSBSQURJVVMgbWV0ZXIgZnLDpW4gbcOlbGV0LCBieXQgbcOlbFxyXG5cdGlmIHRhcmdldCA9PSAnJyB0aGVuIHJldHVyblxyXG5cdGlmIFJBRElVUyA8IGRpc3RhbmNlQmV0d2VlbiBtYXRyaXgucCwgbWF0cml4W3RhcmdldF0gdGhlbiByZXR1cm5cclxuXHRpZiB0YXJnZXRzLmxlbmd0aCA9PSAwXHJcblx0XHR0YXJnZXQgPSAnJ1xyXG5cdFx0cmV0dXJuXHJcblx0c291bmRzLnNvdW5kRG93bi5wbGF5KClcclxuXHR0YXJnZXQgPSB0YXJnZXRzLnBvcCgpXHJcblxyXG53cGVyciA9IChlcnIpIC0+IGR1bXAgXCJGZWw6ICN7ZXJyLm1lc3NhZ2V9XCJcclxuXHJcbndpbmRvdy50b3VjaFN0YXJ0ZWQgPSAtPiBzdGFydFRyYWNraW5nKClcclxuXHJcbnN0YXJ0VHJhY2tpbmcgPSAtPlxyXG5cdGlmIG5vdCBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cclxuXHRcdGR1bXAgXCJHZW9sb2NhdGlvbiBzdMO2ZHMgaW50ZSBpIGRpbiB3ZWJibMOkc2FyZS5cIlxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGR1bXAgXCJCZWfDpHIgcGxhdHNkYXRhLi4uXCJcclxuXHJcblx0d2F0Y2hJRCA9IG5hdmlnYXRvci5nZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uIHdwLCB3cGVycixcclxuXHRcdGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSBcclxuXHRcdHRpbWVvdXQ6IDUwMDAgXHJcblx0XHRtYXhpbXVtQWdlOiAxMDAwXHJcblxyXG4jIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydEJ0bicpLmFkZEV2ZW50TGlzdGVuZXIgJ2NsaWNrJywgc3RhcnRUcmFja2luZ1xyXG5cclxuZGlzdGFuY2VCZXR3ZWVuID0gKHAscSkgLT5cclxuXHRsYXQxID0gcC5sYXRcclxuXHRsb24xID0gcC5sb25cclxuXHRsYXQyID0gcS5sYXRcclxuXHRsb24yID0gcS5sb25cclxuXHTPhjEgPSBsYXQxICogTWF0aC5QSSAvIDE4MFxyXG5cdM+GMiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTPhiA9IChsYXQyIC0gbGF0MSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTOuyA9IChsb24yIC0gbG9uMSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0YSA9IE1hdGguc2luKM6Uz4YgLyAyKSAqKiAyICsgTWF0aC5jb3Moz4YxKSAqIE1hdGguY29zKM+GMikgKiBNYXRoLnNpbijOlM67IC8gMikgKiogMlxyXG5cdGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxIC0gYSkpXHJcblx0UiAqIGMgICMgYXZzdMOlbmQgaSBtZXRlclxyXG5cclxuYmVhcmluZ0JldHdlZW4gPSAocCxxKSAtPlxyXG5cdGxhdDEgPSBwLmxhdFxyXG5cdGxvbjEgPSBwLmxvblxyXG5cdGxhdDIgPSBxLmxhdFxyXG5cdGxvbjIgPSBxLmxvblxyXG5cdM+GMSA9IGxhdDEgKiBNYXRoLlBJIC8gMTgwXHJcblx0z4YyID0gbGF0MiAqIE1hdGguUEkgLyAxODBcclxuXHTOlM67ID0gKGxvbjIgLSBsb24xKSAqIE1hdGguUEkgLyAxODBcclxuXHR5ID0gTWF0aC5zaW4ozpTOuykgKiBNYXRoLmNvcyjPhjIpXHJcblx0eCA9IE1hdGguY29zKM+GMSkgKiBNYXRoLnNpbijPhjIpIC0gTWF0aC5zaW4oz4YxKSAqIE1hdGguY29zKM+GMikgKiBNYXRoLmNvcyjOlM67KVxyXG5cdM64ID0gTWF0aC5hdGFuMih5LCB4KVxyXG5cdCjOuCAqIDE4MCAvIE1hdGguUEkgKyAzNjApICUgMzYwICAjIGLDpHJpbmcgaSBncmFkZXJcclxuXHJcbmRlbHRhWFlCZXR3ZWVuUG9pbnRzID0gKHAscSkgLT5cclxuXHRsYXQxID0gcC5sYXRcclxuXHRsb24xID0gcC5sb25cclxuXHRsYXQyID0gcS5sYXRcclxuXHRsb24yID0gcS5sb25cclxuXHTPhjEgPSBsYXQxICogTWF0aC5QSSAvIDE4MFxyXG5cdM+GMiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTPhiA9IChsYXQyIC0gbGF0MSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTOuyA9IChsb24yIC0gbG9uMSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0ZHggPSBSICogzpTOuyAqIE1hdGguY29zKCjPhjEgKyDPhjIpIC8gMikgICMgw7ZzdGxpZyBza2lsbG5hZFxyXG5cdGR5ID0gUiAqIM6Uz4YgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBub3JkbGlnIHNraWxsbmFkXHJcblx0W2R4LGR5XSAjIGkgbWV0ZXJcclxuXHJcbm1ha2VQb2ludCA9IChwLHEpIC0+IGRlbHRhWFlCZXR3ZWVuUG9pbnRzIHAsIHFcclxuXHJcbmRlc3RpbmF0aW9uUG9pbnQgPSAobGF0LCBsb24sIGRpc3RhbmNlLCBiZWFyaW5nKSAtPiBcclxuXHTPhjEgPSBsYXQgKiBNYXRoLlBJIC8gMTgwXHJcblx0zrsxID0gbG9uICogTWF0aC5QSSAvIDE4MFxyXG5cdM64ID0gYmVhcmluZyAqIE1hdGguUEkgLyAxODBcclxuXHTOtCA9IGRpc3RhbmNlIC8gUlxyXG5cclxuXHTPhjIgPSBNYXRoLmFzaW4oTWF0aC5zaW4oz4YxKSAqIE1hdGguY29zKM60KSArIE1hdGguY29zKM+GMSkgKiBNYXRoLnNpbijOtCkgKiBNYXRoLmNvcyjOuCkpXHJcblx0zrsyID0gzrsxICsgTWF0aC5hdGFuMihNYXRoLnNpbijOuCkgKiBNYXRoLnNpbijOtCkgKiBNYXRoLmNvcyjPhjEpLCBNYXRoLmNvcyjOtCkgLSBNYXRoLnNpbijPhjEpICogTWF0aC5zaW4oz4YyKSlcclxuXHJcblx0bGF0OiDPhjIgKiAxODAgLyBNYXRoLlBJXHJcblx0bG9uOiDOuzIgKiAxODAgLyBNYXRoLlBJXHJcblxyXG5pbml0U291bmRzID0gLT5cclxuXHRzb3VuZHMgPSB7fVxyXG5cdGZvciBuYW1lIGluIFwic291bmREb3duIHNvdW5kVXBcIi5zcGxpdCAnICdcclxuXHRcdHNvdW5kID0gbG9hZFNvdW5kIFwic291bmRzLyN7bmFtZX0ud2F2XCJcclxuXHRcdHNvdW5kLnNldFZvbHVtZSAxLjBcclxuXHRcdHNvdW5kLnBhbiAwXHJcblx0XHRzb3VuZHNbbmFtZV0gPSBzb3VuZFxyXG5cclxud2luZG93LnByZWxvYWQgPSAtPlxyXG5cdGluaXRTb3VuZHMoKVxyXG5cclxud2luZG93LnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgtMTAsIHdpbmRvd0hlaWdodC0xMCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJjYW52YXNcIlxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dGV4dFNpemUgNDBcclxuXHRub1N0cm9rZSgpXHJcblx0ZnJhbWVSYXRlIDJcclxuXHJcblx0bWF0cml4LnMgPSBsYXQ6IDU5LjI3MTY2NywgbG9uOiAxOC4xNTE3NzggIyBrbml4ZW4gcMOlIGtyYWZ0bGVkbmluZ2VuIE5PIEJyb3RvcnBcclxuXHRhcnIgPSAoZGVzdGluYXRpb25Qb2ludCBtYXRyaXgucy5sYXQsIG1hdHJpeC5zLmxvbiwgKGkrMC41KSpTSVpFLCA5MCBmb3IgaSBpbiBbMC4uLjRdKVxyXG5cdCMgZWNobyBhcnJcclxuXHJcblx0Zm9yIGkgaW4gWzAuLi40XVxyXG5cdFx0Zm9yIGogaW4gWzAuLi40XVxyXG5cdFx0XHRrZXkgPSBcIiN7RklMRVNbaV19I3tSQU5LU1tqXX1cIlxyXG5cdFx0XHRtYXRyaXhba2V5XSA9IGRlc3RpbmF0aW9uUG9pbnQgYXJyW2ldLmxhdCwgYXJyW2ldLmxvbiwgKGorMC41KSpTSVpFLCAxODBcclxuXHRcdFx0Z3JpZFtrZXldID0gWzUwICsgMTAwKmksIDUwICsgMTAwKmpdXHJcblxyXG5cdHRhcmdldHMgPSBfLmtleXMgbWF0cml4XHJcblx0dGFyZ2V0cyA9ICdzIHAgaDEgaDIgZzEgZjEgZzIgaDMgaDQgZzMgZjIgZTEgZTIgZjMgZzQgZjQgZTMgZTQnLnNwbGl0ICcgJ1xyXG5cdCMgdGFyZ2V0cyA9IF8uc2h1ZmZsZSB0YXJnZXRzXHJcblx0ZWNobyB0YXJnZXRzXHJcblx0dGFyZ2V0ID0gJ3MnXHJcblxyXG5cdCMga3ZhZHJhbnRlbnMgbWl0dHB1bmt0XHJcblx0bGF0ID0gKG1hdHJpeC5mMy5sYXQgKyBtYXRyaXguZzIubGF0KSAvIDJcclxuXHRsb24gPSAobWF0cml4LmYzLmxvbiArIG1hdHJpeC5nMi5sb24pIC8gMlxyXG5cdG1hdHJpeC5wID0ge2xhdCwgbG9ufVxyXG5cdGdyaWQucCA9IFsyMDAsLTIwMF1cclxuXHJcblx0ZWNobyAnbWF0cml4JyxtYXRyaXhcclxuXHRlY2hvICdncmlkJyxncmlkXHJcblxyXG5cdCMgYXNzZXJ0IDIyNCwgcm91bmQgZGlzdGFuY2VCZXR3ZWVuIG1hdHJpeC5jMSwgbWF0cml4LmQzXHJcblx0IyBhc3NlcnQgIDI3LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYzEsIG1hdHJpeC5kM1xyXG5cdCMgYXNzZXJ0ICA5MCwgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmMzLCBtYXRyaXguZDNcclxuXHQjIGFzc2VydCAxMDgsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5hNCwgbWF0cml4LmQzXHJcblx0IyBhc3NlcnQgMjE0LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYzQsIG1hdHJpeC5hMVxyXG5cdCMgYXNzZXJ0IDI5Nywgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmQyLCBtYXRyaXguYjNcclxuXHJcbndpbmRvdy5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kIDBcclxuXHRmaWxsIDI1NVxyXG5cdCNzY2FsZSAxLjhcclxuXHJcblx0c3Ryb2tlIDI1NVxyXG5cdFtweCxweV0gPSBncmlkLnBcclxuXHRbdHgsdHldID0gZ3JpZFt0YXJnZXRdXHJcblx0bGluZSA1MCtweCwgNTAtcHksIDUwK3R4LCA1MCt0eVxyXG5cdG5vU3Ryb2tlKClcclxuXHJcblx0Zm9yIGtleSBvZiBncmlkXHJcblx0XHRbeCx5XSA9IGdyaWRba2V5XVxyXG5cdFx0ZmlsbCAnd2hpdGUnXHJcblx0XHRpZiBrZXkgPT0gdGFyZ2V0IHRoZW4gZmlsbCAncmVkJ1xyXG5cdFx0aWYga2V5ID09ICdwJ1xyXG5cdFx0XHRmaWxsICd5ZWxsb3cnXHJcblx0XHRcdGNpcmNsZSA1MCt4LCA1MC15LCAxMFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIHRleHQga2V5LCA1MCt4LCA1MCt5XHJcblx0XHRcdGNpcmNsZSA1MCt4LCA1MCt5LCAxMFxyXG5cclxuXHRmaWxsICdncmVlbidcclxuXHRmb3IgaSBpbiBbMC4uLjRdXHJcblx0XHR0ZXh0IEZJTEVTW2ldLCAxMDAraSoxMDAsNDUwXHJcblx0XHR0ZXh0IFJBTktTW2ldLCA1MCwgMTAwK2kqMTAwXHJcblxyXG5cdHRleHQgJ1ZlcjogJyArIFZFUlNJT04sMjUwLDUwXHJcblx0dGV4dCByb3VuZChiZWFyaW5nQmV0d2VlbihtYXRyaXgucCwgbWF0cml4W3RhcmdldF0pKSArICfCsCcsMTAwLDUwMFxyXG5cdHRleHQgdGFyZ2V0LCAyNTAsNTAwXHJcblx0dGV4dCByb3VuZChkaXN0YW5jZUJldHdlZW4obWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdKSkgKyAnbScsNDAwLDUwMFxyXG5cclxuXHRwdXNoKClcclxuXHR0ZXh0QWxpZ24gXCJsZWZ0XCJcclxuXHR0ZXh0U2l6ZSAyMFxyXG5cdGZvciBpIGluIHJhbmdlIG1lc3NhZ2VzLmxlbmd0aFxyXG5cdFx0dGV4dCBtZXNzYWdlc1tpXSwgMTAsIDU1MCArIGkqMjBcclxuXHRwb3AoKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiMgY2xhc3MgUGxheWVyXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSwgQHR4PTQqU0laRSwgQHR5PTQqU0laRSkgLT5cclxuIyBcdFx0QHNwZWVkID0gU1BFRURcclxuIyBcdFx0QHBvcyA9IGNyZWF0ZVZlY3RvciA0KlNJWkUsNCpTSVpFXHJcbiMgXHRcdEB0YXJnZXQgPSBuZXcgU3F1YXJlIGNyZWF0ZVZlY3RvciBAdHgsIEB0eVxyXG4jIFx0XHRAaG9tZSA9IEB0YXJnZXRcclxuIyBcdFx0QHNxdWFyZXMgPSBbXSAjIGxpc3RhIG1lZCBTcXVhcmUgc29tIGVqIHDDpWLDtnJqYXRzXHJcbiMgXHRcdEB0cmFpbCA9IFtdXHJcbiMgXHRcdEBuID0gMFxyXG4jIFx0XHRAZGlzdGFuY2UgPSAwXHJcbiMgXHRcdEBhc3Npc3RzID0gMFxyXG5cclxuIyBcdGNsb3Nlc3QgOiAtPlxyXG4jIFx0XHRpZiBAc3F1YXJlcy5sZW5ndGggPT0gMCB0aGVuIHJldHVybiBudWxsXHJcbiMgXHRcdGJlc3REaXN0ID0gOTk5OTlcclxuIyBcdFx0YmVzdFNxID0gQHNxdWFyZXNbMF1cclxuIyBcdFx0Zm9yIHNxdWFyZSBpbiBAc3F1YXJlc1xyXG4jIFx0XHRcdGQgPSBwNS5WZWN0b3IuZGlzdCBzcXVhcmUucG9zLCBAcG9zXHJcbiMgXHRcdFx0aWYgZCA8IGJlc3REaXN0XHJcbiMgXHRcdFx0XHRiZXN0RGlzdCA9IGRcclxuIyBcdFx0XHRcdGJlc3RTcSA9IHNxdWFyZVxyXG4jIFx0XHRiZXN0U3FcclxuXHJcbiMgXHRhZGQgOiAoc3EpIC0+XHJcbiMgXHRcdEBzcXVhcmVzLnB1c2ggc3FcclxuIyBcdFx0QHRhcmdldCA9IEBjbG9zZXN0KClcclxuXHJcbiMgXHRkcmF3VGFpbCA6IC0+XHJcbiMgXHRcdGlmIEBuICUgKDEwL1NQRUVEKSA9PSAwIHRoZW4gQHRyYWlsLnB1c2ggY3JlYXRlVmVjdG9yIEBwb3MueCwgQHBvcy55XHJcbiMgXHRcdEBuICs9IDFcclxuIyBcdFx0aWYgQHRyYWlsLmxlbmd0aCA+IE1BWFRSQUlMIHRoZW4gQHRyYWlsLnNoaWZ0KClcclxuIyBcdFx0c3Ryb2tlICdibGFjaydcclxuIyBcdFx0Zm9yIGkgaW4gWzAuLi5AdHJhaWwubGVuZ3RoXVxyXG4jIFx0XHRcdHNpemUgPSBtYXAgaSwgMCwgQHRyYWlsLmxlbmd0aCAtIDEsIDUsMTVcclxuIyBcdFx0XHRub0ZpbGwoKVxyXG4jIFx0XHRcdGVsbGlwc2UgQHRyYWlsW2ldLngsIEB0cmFpbFtpXS55LCBzaXplLCBzaXplXHJcblxyXG4jIFx0ZHJhdyA6ICgpIC0+XHJcbiMgXHRcdHRhcmdldCA9IEB0YXJnZXQucG9zXHJcbiMgXHRcdGR4ID0gdGFyZ2V0LnggLSBAcG9zLnhcclxuIyBcdFx0ZHkgPSB0YXJnZXQueSAtIEBwb3MueVxyXG4jIFx0XHRkID0gc3FydCBkeCpkeCtkeSpkeVxyXG5cclxuIyBcdFx0c3Ryb2tlICdibGFjaydcclxuXHJcbiMgXHRcdCMgaWYgQG5hbWUgaW4gJ0FCQ0QnXHJcbiMgXHRcdGxpbmUgdGFyZ2V0LngsIHRhcmdldC55LCBAcG9zLngsIEBwb3MueVxyXG5cclxuIyBcdFx0c3RlcCA9IHA1LlZlY3Rvci5zdWIodGFyZ2V0LCBAcG9zKS5zZXRNYWcgbWluIEBzcGVlZCwgZFxyXG4jIFx0XHRpZiBkIDwgQHNwZWVkICMgdGFyZ2V0IG7DpWRkXHJcbiMgXHRcdFx0aWYgbm90IEB0YXJnZXQuZG9uZVxyXG4jIFx0XHRcdFx0QHRhcmdldC5kb25lID0gdHJ1ZVxyXG4jIFx0XHRcdFx0QHRhcmdldC5jYXJyaWVyID0gQG5hbWVcclxuXHJcbiMgXHRcdFx0XHQjIFNraWNrYSBkcmFnZXQgb20gYsOlZGUgc3RhcnQuZG9uZSBvY2ggc2x1dC5kb25lXHJcbiMgXHRcdFx0XHRmb3Iga2V5IG9mIGdhbWVzXHJcbiMgXHRcdFx0XHRcdGcgPSBnYW1lc1trZXldXHJcbiMgXHRcdFx0XHRcdGlmIGcubW92ZSBhbmQgZy5tb3ZlLnN0YXJ0LmRvbmUgYW5kIGcubW92ZS5zdG9wcC5kb25lXHRcdFx0XHRcdFx0XHJcbiMgXHRcdFx0XHRcdFx0ZHVyYXRpb24gPSAoMTUvU1BFRUQgKiAocGVyZm9ybWFuY2Uubm93KCkgLSBnLm1vdmUuc3RhcnQudGltZSkvMTAwMClcclxuXHJcbiMgXHRcdFx0XHRcdFx0aWYgZy5pbmRleCAlIDIgPT0gMCB0aGVuIGcuZHVyYXRpb24gKz0gZHVyYXRpb25cclxuIyBcdFx0XHRcdFx0XHRpZiBnLm1vdmUuc3RhcnQuY2FycmllciA9PSBnLm1vdmUuc3RvcHAuY2FycmllclxyXG4jIFx0XHRcdFx0XHRcdFx0Y2FycmllcnMgPSBnLm1vdmUuc3RhcnQuY2FycmllclxyXG4jIFx0XHRcdFx0XHRcdGVsc2UgXHJcbiMgXHRcdFx0XHRcdFx0XHRjYXJyaWVycyA9IGcubW92ZS5zdGFydC5jYXJyaWVyICsgZy5tb3ZlLnN0b3BwLmNhcnJpZXJcclxuXHJcbiMgXHRcdFx0XHRcdFx0aWYgZy5tb3ZlLnN0YXJ0LmNhcnJpZXIgaW4gJ0FCQ0QnXHJcbiMgXHRcdFx0XHRcdFx0XHQjIGVjaG8gJ2Fzc2lzdHM6ICcsZy5tb3ZlLnN0YXJ0LmNhcnJpZXIsZy5tb3ZlLnN0b3BwLmNhcnJpZXJcclxuIyBcdFx0XHRcdFx0XHRcdHBsYXllcnNbZy5tb3ZlLnN0YXJ0LmNhcnJpZXJdLmFzc2lzdHMgKz0gMVxyXG4jIFx0XHRcdFx0XHRcdFx0cGxheWVyc1tnLm1vdmUuc3RvcHAuY2Fycmllcl0uYXNzaXN0cyArPSAxXHJcbiMgXHRcdFx0XHRcdFx0XHQjIGVjaG8gZy5uYW1lLCBnLm1vdmUudWNpLCBAbmFtZSwgZy5tb3ZlLnN0YXJ0LmNhcnJpZXIgKyBnLm1vdmUuc3RvcHAuY2FycmllclxyXG5cclxuIyBcdFx0XHRcdFx0XHRnLmNoZXNzLm1vdmUgeyBmcm9tOiBnLm1vdmUudWNpLnNsaWNlKDAsIDIpLCB0bzogZy5tb3ZlLnVjaS5zbGljZSgyLCA0KSB9XHJcblxyXG4jIFx0XHRcdFx0XHRcdHRkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTRUwje2cubmFtZX1cIilcclxuIyBcdFx0XHRcdFx0XHR0ZC5pbm5lckhUTUwgKz0gXCIje2cuc2FuX21vdmVzW2cuY2hlc3MuaGlzdG9yeSgpLmxlbmd0aC0xXX0gYnkgI3tjYXJyaWVyc30gKCN7ZHVyYXRpb24udG9GaXhlZCgpfSBzKTxicj5cIlxyXG5cclxuIyBcdFx0XHRcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvYXJkI3tnLm5hbWV9XCIpLmlubmVySFRNTCA9IHNocmluayBnLmNoZXNzLmFzY2lpKClcclxuIyBcdFx0XHRcdFx0XHR1cGRhdGVJbmZvIGcubmFtZSwgQFxyXG5cclxuIyBcdFx0XHRcdFx0XHRnLnF1ZXVlLnB1c2ggZy5tb3ZlXHJcbiMgXHRcdFx0XHRcdFx0Zy5tb3ZlID0gbnVsbFxyXG4jIFx0XHRcdFx0XHRcdGlmIGcuaW5pdE1vdmUoKSA9PSBmYWxzZVxyXG4jIFx0XHRcdFx0XHRcdFx0c3RvcHBUaW1lID0gRGF0ZS5ub3coKVxyXG4jIFx0XHRcdFx0XHRcdFx0IyBlY2hvICdkb25lJywgKHN0b3BwVGltZS1zdGFydFRpbWUpLzEwMDBcclxuXHJcbiMgXHRcdFx0QHNxdWFyZXMgPSBfLmZpbHRlciBAc3F1YXJlcywgKHNxKSAtPiBzcS5kb25lID09IGZhbHNlXHJcblxyXG4jIFx0XHRcdCMgaMOkbXRhIG7DpHJtYXN0ZSB1cHBkcmFnIG9tIHPDpWRhbnQgZmlubnNcclxuIyBcdFx0XHRpZiBAc3F1YXJlcy5sZW5ndGggPiAwXHJcbiMgXHRcdFx0XHRAdGFyZ2V0ID0gQGNsb3Nlc3QoKVxyXG4jIFx0XHRcdFx0ZCA9IHA1LlZlY3Rvci5kaXN0IEBwb3MsQHRhcmdldC5wb3NcclxuIyBcdFx0XHRcdEBkaXN0YW5jZSArPSBkXHJcblxyXG4jIFx0XHRAcG9zLmFkZCBzdGVwXHJcblxyXG4jIFx0XHRmb3Igc3F1YXJlIGluIEBzcXVhcmVzXHJcbiMgXHRcdFx0aWYgQG5hbWUgaW4gJ0FCQ0QnXHJcbiMgXHRcdFx0XHRmaWxsICdyZWQnXHJcbiMgXHRcdFx0ZWxzZVxyXG4jIFx0XHRcdFx0ZmlsbCAnYmxhY2snXHJcbiMgXHRcdFx0Y2lyY2xlIHNxdWFyZS5wb3MueCwgc3F1YXJlLnBvcy55LCAxMFxyXG5cclxuIyBcdFx0IyBpZiBAbmFtZSBpbiAnQUJDRCdcclxuIyBcdFx0QGRyYXdUYWlsKClcclxuIyBcdFx0aWYgQG5hbWUgaW4gJ0FCQ0QnIHRoZW4gZmlsbCAneWVsbG93JyBlbHNlIGZpbGwgJ2JsYWNrJ1xyXG4jIFx0XHRzdHJva2VXZWlnaHQgMVxyXG4jIFx0XHRjaXJjbGUgQHBvcy54LEBwb3MueSwwLjQqU0laRVxyXG4jIFx0XHRpZiBAbmFtZSBpbiAnQUJDRCcgdGhlbiBmaWxsICdibGFjaycgZWxzZSBmaWxsICd5ZWxsb3cnXHJcbiMgXHRcdG5vU3Ryb2tlKClcclxuIyBcdFx0IyBmaWxsICdibGFjaydcclxuIyBcdFx0dGV4dCBAbmFtZSwgQHBvcy54LCBAcG9zLnlcclxuXHJcbiMgdWNpMnBvcyA9ICh1Y2kpIC0+ICMgdCBleCBlMmU0ID0+IFtbMjI1LDc1XSxbMjI1LDE3NV1dXHJcbiMgXHRzdGFydHggPSB1Y2lbMF1cclxuIyBcdHN0YXJ0eSA9IHVjaVsxXVxyXG4jIFx0c3RvcHB4ID0gdWNpWzJdXHJcbiMgXHRzdG9wcHkgPSB1Y2lbM11cclxuIyBcdHJlc3VsdCA9IFtdXHJcbiMgXHR4ID0gRklMRVMuaW5kZXhPZiBzdGFydHhcclxuIyBcdHkgPSA3IC0gUkFOS1MuaW5kZXhPZiBzdGFydHlcclxuIyBcdHJlc3VsdC5wdXNoIGNyZWF0ZVZlY3RvciBTSVpFLzIgKyBTSVpFKngsIFNJWkUvMiArIFNJWkUqeVxyXG4jIFx0eCA9IEZJTEVTLmluZGV4T2Ygc3RvcHB4XHJcbiMgXHR5ID0gNyAtIFJBTktTLmluZGV4T2Ygc3RvcHB5XHJcbiMgXHRyZXN1bHQucHVzaCBjcmVhdGVWZWN0b3IgU0laRS8yICsgU0laRSp4LCBTSVpFLzIgKyBTSVpFKnlcclxuIyBcdHJlc3VsdFxyXG5cclxuIyBjbGFzcyBHYW1lXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSwgcGduLCBAbGluaykgLT5cclxuIyBcdFx0QGNoZXNzID0gbmV3IENoZXNzKClcclxuIyBcdFx0QGNoZXNzLmxvYWRfcGduIHBnblxyXG4jIFx0XHRAc2FuX21vdmVzID0gQGNoZXNzLmhpc3RvcnkoKSAjIFtOZjMsIC4uLl1cclxuIyBcdFx0QHVjaV9tb3ZlcyA9IChtb3ZlLmZyb20gKyBtb3ZlLnRvIGZvciBtb3ZlIGluIEBjaGVzcy5oaXN0b3J5KHsgdmVyYm9zZTogdHJ1ZSB9KSkgIyBbZzFmMywgLi4uXVxyXG4jIFx0XHRAbW92ZSA9IG51bGxcclxuIyBcdFx0QHF1ZXVlID0gW11cclxuIyBcdFx0QGR1cmF0aW9uID0gMFxyXG4jIFx0XHRAY2hlc3MucmVzZXQoKVxyXG4jIFx0XHRAaW5kZXggPSAtMVxyXG4jIFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmsje0BuYW1lfVwiKS5pbm5lckhUTUwgPSBcIjxhIGhyZWY9XFxcIiN7QGxpbmt9XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TGluazwvYT5cIlxyXG5cclxuIyBcdGluaXRNb3ZlIDogLT5cclxuIyBcdFx0aWYgQGluZGV4ID49IEB1Y2lfbW92ZXMubGVuZ3RoIC0gMSB0aGVuIHJldHVybiBmYWxzZVxyXG4jIFx0XHRAaW5kZXggKz0gMVxyXG4jIFx0XHRpZiBAbW92ZSAhPSBudWxsIFxyXG4jIFx0XHRcdCNlY2hvICd0b28gcXVpY2shJ1xyXG4jIFx0XHRcdHJldHVybiBmYWxzZVxyXG4jIFx0XHRAbW92ZSA9IG5ldyBNb3ZlIEB1Y2lfbW92ZXNbQGluZGV4XSwgQG5hbWVcclxuXHJcbiMgXHRcdHN0YXJ0ID0gQG1vdmUudWNpLnNsaWNlIDAsMlxyXG4jIFx0XHRzdG9wcCA9IEBtb3ZlLnVjaS5zbGljZSAyLDRcclxuXHJcbiMgXHRcdGFudGFsID0gJ0FCQ0QnLmluZGV4T2YgQG5hbWVcclxuIyBcdFx0Zm9yIGkgaW4gWzAuLi5hbnRhbF0gXHJcbiMgXHRcdFx0c3RhcnQgPSByb3RhdGUgc3RhcnRcclxuIyBcdFx0XHRzdG9wcCA9IHJvdGF0ZSBzdG9wcFxyXG5cclxuIyBcdFx0aWYgQGluZGV4ICUgMiA9PSAwXHJcbiMgXHRcdFx0YSA9IFwiMTIzNFwiXHJcbiMgXHRcdFx0YiA9IFwiNTY3OFwiXHJcbiMgXHRcdFx0IyBEZWxhIHV0IHN0YXJ0IG9jaCBzdG9wcCB0aWxsIHLDpHR0IHNwZWxhcmUgYmVyb2VuZGUgcMOlIGt2YWRyYW50XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJhYmNkXCIgYW5kIHN0YXJ0WzFdIGluIGEgdGhlbiBwbGF5ZXJzLkEuYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJlZmdoXCIgYW5kIHN0YXJ0WzFdIGluIGEgdGhlbiBwbGF5ZXJzLkIuYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJhYmNkXCIgYW5kIHN0YXJ0WzFdIGluIGIgdGhlbiBwbGF5ZXJzLkMuYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJlZmdoXCIgYW5kIHN0YXJ0WzFdIGluIGIgdGhlbiBwbGF5ZXJzLkQuYWRkIEBtb3ZlLnN0YXJ0XHJcblxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiYWJjZFwiIGFuZCBzdG9wcFsxXSBpbiBhIHRoZW4gcGxheWVycy5BLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiZWZnaFwiIGFuZCBzdG9wcFsxXSBpbiBhIHRoZW4gcGxheWVycy5CLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiYWJjZFwiIGFuZCBzdG9wcFsxXSBpbiBiIHRoZW4gcGxheWVycy5DLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiZWZnaFwiIGFuZCBzdG9wcFsxXSBpbiBiIHRoZW4gcGxheWVycy5ELmFkZCBAbW92ZS5zdG9wcFxyXG5cclxuIyBcdFx0ZWxzZVxyXG4jIFx0XHRcdGEgPSBcIjEyMzRcIlxyXG4jIFx0XHRcdGIgPSBcIjU2NzhcIlxyXG4jIFx0XHRcdCMgSGFudGVyYSBtb3RzdMOlbmRhcmVuXHJcbiMgXHRcdFx0IyBEZWxhIHV0IHN0YXJ0IG9jaCBzdG9wcCB0aWxsIHLDpHR0IHNwZWxhcmUgYmVyb2VuZGUgcMOlIGt2YWRyYW50XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJhYmNkXCIgYW5kIHN0YXJ0WzFdIGluIGEgdGhlbiBwbGF5ZXJzLkcuYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJhYmNkXCIgYW5kIHN0YXJ0WzFdIGluIGIgdGhlbiBwbGF5ZXJzLkUuYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJlZmdoXCIgYW5kIHN0YXJ0WzFdIGluIGEgdGhlbiBwbGF5ZXJzLkguYWRkIEBtb3ZlLnN0YXJ0XHJcbiMgXHRcdFx0aWYgc3RhcnRbMF0gaW4gXCJlZmdoXCIgYW5kIHN0YXJ0WzFdIGluIGIgdGhlbiBwbGF5ZXJzLkYuYWRkIEBtb3ZlLnN0YXJ0XHJcblxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiYWJjZFwiIGFuZCBzdG9wcFsxXSBpbiBhIHRoZW4gcGxheWVycy5HLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiYWJjZFwiIGFuZCBzdG9wcFsxXSBpbiBiIHRoZW4gcGxheWVycy5FLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiZWZnaFwiIGFuZCBzdG9wcFsxXSBpbiBhIHRoZW4gcGxheWVycy5ILmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHRcdGlmIHN0b3BwWzBdIGluIFwiZWZnaFwiIGFuZCBzdG9wcFsxXSBpbiBiIHRoZW4gcGxheWVycy5GLmFkZCBAbW92ZS5zdG9wcFxyXG4jIFx0XHR0cnVlXHJcblxyXG4jIGNsYXNzIFNxdWFyZSBcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBwb3MsIEB1Y2k9XCJcIiwgQGNhcnJpZXI9XCJcIikgLT4gIyBWZWN0b3JcclxuIyBcdFx0QGRvbmUgPSBmYWxzZVxyXG4jIFx0XHRAdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXHJcblx0XHJcbiMgIyByb3RhdGUgPSAoc3EpIC0+IEZJTEVTWzgtc3FbMV1dICsgU3RyaW5nIDEgKyBGSUxFUy5pbmRleE9mIHNxWzBdXHJcbiMgIyBlY2hvIFwiZzNcIiA9PSByb3RhdGUgXCJjMlwiXHJcbiMgIyBlY2hvIFwiaDFcIiA9PSByb3RhdGUgXCJhMVwiXHJcbiMgIyBlY2hvIFwiaDhcIiA9PSByb3RhdGUgcm90YXRlIFwiYTFcIlxyXG4jICMgZWNobyBcImE4XCIgPT0gcm90YXRlIHJvdGF0ZSByb3RhdGUgXCJhMVwiXHJcbiMgIyBlY2hvIFwiYTFcIiA9PSByb3RhdGUgcm90YXRlIHJvdGF0ZSByb3RhdGUgXCJhMVwiXHJcblxyXG4jICMgY29vcmRpbmF0ZXMgPSAoc3EpIC0+XHJcbiMgIyBcdHggPSBGSUxFUy5pbmRleE9mIHNxWzBdXHJcbiMgIyBcdHkgPSBSQU5LUy5pbmRleE9mIHNxWzFdXHJcbiMgIyBcdFt4LCA3LXldXHJcbiMgIyBlY2hvIF8uaXNFcXVhbCBbNCw0XSwgY29vcmRpbmF0ZXMgXCJlNFwiXHJcbiMgIyBlY2hvIF8uaXNFcXVhbCBbMCw3XSwgY29vcmRpbmF0ZXMgXCJhMVwiXHJcblxyXG4jICMgdG9WZWN0b3IgPSAoW3gseV0pIC0+XHJcbiMgIyBcdGNyZWF0ZVZlY3RvciBTSVpFLzIgKyBTSVpFKngsIFNJWkUvMiArIFNJWkUqeVxyXG4jICMgZWNobyB0b1ZlY3RvciBbMyw0XVxyXG5cclxuIyBjbGFzcyBNb3ZlXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAdWNpLCBAbmFtZSkgLT4gIyBlMmU0LCBCXHJcbiMgXHRcdGFudGFsID0gXCJBQkNEXCIuaW5kZXhPZiBAbmFtZVxyXG4jIFx0XHRzdGFydCA9IEB1Y2kuc2xpY2UgMCwyXHJcbiMgXHRcdHN0b3BwID0gQHVjaS5zbGljZSAyLDRcclxuIyBcdFx0Zm9yIGkgaW4gWzAuLi5hbnRhbF1cclxuIyBcdFx0XHRzdGFydCA9IHJvdGF0ZSBzdGFydFxyXG4jIFx0XHRcdHN0b3BwID0gcm90YXRlIHN0b3BwXHJcbiMgXHRcdHN0YXJ0ID0gdG9WZWN0b3IgY29vcmRpbmF0ZXMgc3RhcnRcclxuIyBcdFx0c3RvcHAgPSB0b1ZlY3RvciBjb29yZGluYXRlcyBzdG9wcFxyXG4jIFx0XHRAcG9zID0gW3N0YXJ0LCBzdG9wcF1cclxuIyBcdFx0QHN0YXJ0ID0gbmV3IFNxdWFyZSBzdGFydCwgQHVjaVxyXG4jIFx0XHRAc3RvcHAgPSBuZXcgU3F1YXJlIHN0b3BwLCBAdWNpXHJcbiJdfQ==
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee