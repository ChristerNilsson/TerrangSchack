// Generated by CoffeeScript 2.7.0
var FACTOR, FILES, R, RADIUS, RANKS, SIZE_METER, SIZE_PIXEL, START_POINT, VERSION, assert, bearingBetween, deltaXYBetweenPoints, destinationPoint, distanceBetween, dump, echo, gpsCount, grid_meter, grid_pixel, initSounds, makePoint, matrix, messages, range, sounds, startTracking, started, target, targets, watchID, wp, wperr;

VERSION = 37;

START_POINT = {
  lat: 59.271667,
  lon: 18.151778 // knixen på kraftledningen NO Brotorp
};

SIZE_PIXEL = 200; // En schackrutas storlek i pixlar

SIZE_METER = 50; // En schackrutas storlek i meter

FACTOR = SIZE_PIXEL / SIZE_METER;

RADIUS = 2; // meter. Maxavstånd mellan spelaren och target

FILES = 'efgh'; // De 16 rutor man har hand om

RANKS = '4321';

R = 6371e3; // Jordens radie i meter

targets = [];

target = "";

messages = [];

sounds = {};

started = false;

matrix = {}; // WGS84

grid_meter = {}; // meter

grid_pixel = {}; // pixel

grid_meter.s = [
  0,
  0 // origo, samlingspunkt
];

grid_pixel.s = [
  0,
  0 // origo, samlingspunkt
];

echo = console.log;

range = _.range;

dump = function(msg) {
  messages.unshift(msg); // nyaste överst
  if (messages.length > 20) {
    return messages.pop(); // äldsta droppas
  }
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

watchID = null;

gpsCount = 0;

wp = (p) => {
  //sounds.soundDown.play()
  gpsCount += 1;
  matrix.p.lat = p.coords.latitude;
  matrix.p.lon = p.coords.longitude;
  grid_meter.p = makePoint(matrix.s, matrix.p);
  grid_pixel.p = [grid_meter.p[0] * FACTOR, grid_meter.p[1] * FACTOR];
  dump(`${gpsCount} ${round(bearingBetween(matrix.p, matrix[target]))}° ${target} ${round(distanceBetween(matrix.p, matrix[target]), 1)}m ${round(p.coords.latitude, 6)} ${round(p.coords.longitude, 6)}`);
  
  // om man är inom RADIUS meter från målet, byt mål
  if (target === '') {
    return;
  }
  if (RADIUS < distanceBetween(matrix.p, matrix[target])) {
    return;
  }
  if (targets.length === 0) {
    target = '';
    return;
  }
  sounds.soundDown.play();
  return target = targets.shift();
};

wperr = function(err) {
  return dump(`Fel: ${err.message}`);
};

window.touchStarted = function() {
  if (!started) {
    userStartAudio();
    startTracking();
    started = true;
  }
  sounds.soundDown.play();
  return false;
};

startTracking = function() {
  if (!navigator.geolocation) {
    dump("Geolocation stöds inte i din webbläsare.");
    return;
  }
  dump("Begär platsdata...");
  return watchID = navigator.geolocation.watchPosition(wp, wperr, {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 1000
  });
};

// document.querySelector('#startBtn').addEventListener 'click', startTracking
distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return (θ * 180 / Math.PI + 360) % 360; // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

initSounds = function() {
  var k, len, name, ref, results, sound;
  sounds = {};
  ref = "soundDown soundUp".split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    sound = loadSound(`sounds/${name}.wav`);
    sound.setVolume(1.0);
    sound.pan(0);
    results.push(sounds[name] = sound);
  }
  return results;
};

window.preload = function() {
  return initSounds();
};

window.setup = function() {
  var arr, i, j, k, key, l, lat, lon;
  createCanvas(windowWidth - 5, windowHeight - 5, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  textSize(0.3 * SIZE_PIXEL);
  noStroke();
  frameRate(2);
  // sounds.soundUp.play()
  matrix.s = START_POINT;
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 4; i = ++k) {
      results.push(destinationPoint(matrix.s.lat, matrix.s.lon, (i + 0.5) * SIZE_METER, 90));
    }
    return results;
  })();
// echo arr
  for (i = k = 0; k < 4; i = ++k) {
    for (j = l = 0; l < 4; j = ++l) {
      key = `${FILES[i]}${RANKS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, (j + 0.5) * SIZE_METER, 180);
      grid_pixel[key] = [(i + 0.5) * SIZE_PIXEL, (j + 0.5) * SIZE_PIXEL];
      grid_meter[key] = [(i + 0.5) * SIZE_METER, (j + 0.5) * SIZE_METER];
    }
  }
  targets = _.keys(matrix);
  targets = 'h1 g1 f1 e1 e2 f2 g2 h2 h3 g3 f3 e3 e4 f4 g4 h4 s p'.split(' ');
  // targets = _.shuffle targets
  echo(targets);
  target = targets.shift();
  // kvadrantens mittpunkt
  lat = (matrix.f3.lat + matrix.g2.lat) / 2;
  lon = (matrix.f3.lon + matrix.g2.lon) / 2;
  matrix.p = {lat, lon};
  grid_pixel.p = [2 * SIZE_PIXEL, -2 * SIZE_PIXEL];
  grid_meter.p = [grid_pixel.p[0] / FACTOR, grid_pixel.p[1] / FACTOR];
  dump('Version: ' + VERSION);
  echo('matrix', matrix);
  echo('grid_meter', grid_meter);
  return echo('grid_pixel', grid_pixel);
};

// assert 224, round distanceBetween matrix.c1, matrix.d3
// assert  27, round bearingBetween matrix.c1, matrix.d3
// assert  90, round bearingBetween matrix.c3, matrix.d3
// assert 108, round bearingBetween matrix.a4, matrix.d3
// assert 214, round bearingBetween matrix.c4, matrix.a1
// assert 297, round bearingBetween matrix.d2, matrix.b3
window.draw = function() {
  var SP2, i, k, key, l, len, px, py, ref, tx, ty, x, y;
  background(0);
  fill(255);
  // scale 2
  SP2 = SIZE_PIXEL / 2;
  stroke(255);
  [px, py] = grid_pixel.p;
  [tx, ty] = grid_pixel[target];
  line(10 + px, 10 - py, 10 + tx, 10 + ty);
  noStroke();
  for (key in grid_pixel) {
    [x, y] = grid_pixel[key];
    fill('white');
    if (key === target) {
      fill('red');
    }
    if (key === 'p') {
      fill('yellow');
      circle(10 + x, 10 - y, 0.1 * SP2);
    } else {
      // text key, 50+x, 50+y
      circle(10 + x, 10 + y, 0.1 * SP2);
    }
  }
  fill('green');
  for (i = k = 0; k < 4; i = ++k) {
    text(FILES[i], 10 + SP2 + i * SIZE_PIXEL, 10 + 0.25 * SIZE_PIXEL);
    text(RANKS[i], 10 + SP2 / 2, 10 + SP2 + i * SIZE_PIXEL);
  }
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 10 + 0.5 * SIZE_PIXEL, 3.9 * SIZE_PIXEL);
  text(target, 10 + 2 * SIZE_PIXEL, 3.9 * SIZE_PIXEL);
  text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 10 + 3.5 * SIZE_PIXEL, 3.9 * SIZE_PIXEL);
  push();
  textAlign("left");
  textSize(0.2 * SIZE_PIXEL);
  ref = range(messages.length);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    text(messages[i], 0.1 * SIZE_PIXEL, 4.2 * SIZE_PIXEL + i * 0.2 * SIZE_PIXEL);
  }
  return pop();
};

// class Player
// 	constructor : (@name, @tx=4*SIZE, @ty=4*SIZE) ->
// 		@speed = SPEED
// 		@pos = createVector 4*SIZE,4*SIZE
// 		@target = new Square createVector @tx, @ty
// 		@home = @target
// 		@squares = [] # lista med Square som ej påbörjats
// 		@trail = []
// 		@n = 0
// 		@distance = 0
// 		@assists = 0

// 	closest : ->
// 		if @squares.length == 0 then return null
// 		bestDist = 99999
// 		bestSq = @squares[0]
// 		for square in @squares
// 			d = p5.Vector.dist square.pos, @pos
// 			if d < bestDist
// 				bestDist = d
// 				bestSq = square
// 		bestSq

// 	add : (sq) ->
// 		@squares.push sq
// 		@target = @closest()

// 	drawTail : ->
// 		if @n % (10/SPEED) == 0 then @trail.push createVector @pos.x, @pos.y
// 		@n += 1
// 		if @trail.length > MAXTRAIL then @trail.shift()
// 		stroke 'black'
// 		for i in [0...@trail.length]
// 			size = map i, 0, @trail.length - 1, 5,15
// 			noFill()
// 			ellipse @trail[i].x, @trail[i].y, size, size

// 	draw : () ->
// 		target = @target.pos
// 		dx = target.x - @pos.x
// 		dy = target.y - @pos.y
// 		d = sqrt dx*dx+dy*dy

// 		stroke 'black'

// 		# if @name in 'ABCD'
// 		line target.x, target.y, @pos.x, @pos.y

// 		step = p5.Vector.sub(target, @pos).setMag min @speed, d
// 		if d < @speed # target nådd
// 			if not @target.done
// 				@target.done = true
// 				@target.carrier = @name

// 				# Skicka draget om både start.done och slut.done
// 				for key of games
// 					g = games[key]
// 					if g.move and g.move.start.done and g.move.stopp.done						
// 						duration = (15/SPEED * (performance.now() - g.move.start.time)/1000)

// 						if g.index % 2 == 0 then g.duration += duration
// 						if g.move.start.carrier == g.move.stopp.carrier
// 							carriers = g.move.start.carrier
// 						else 
// 							carriers = g.move.start.carrier + g.move.stopp.carrier

// 						if g.move.start.carrier in 'ABCD'
// 							# echo 'assists: ',g.move.start.carrier,g.move.stopp.carrier
// 							players[g.move.start.carrier].assists += 1
// 							players[g.move.stopp.carrier].assists += 1
// 							# echo g.name, g.move.uci, @name, g.move.start.carrier + g.move.stopp.carrier

// 						g.chess.move { from: g.move.uci.slice(0, 2), to: g.move.uci.slice(2, 4) }

// 						td = document.getElementById("SEL#{g.name}")
// 						td.innerHTML += "#{g.san_moves[g.chess.history().length-1]} by #{carriers} (#{duration.toFixed()} s)<br>"

// 						document.getElementById("board#{g.name}").innerHTML = shrink g.chess.ascii()
// 						updateInfo g.name, @

// 						g.queue.push g.move
// 						g.move = null
// 						if g.initMove() == false
// 							stoppTime = Date.now()
// 							# echo 'done', (stoppTime-startTime)/1000

// 			@squares = _.filter @squares, (sq) -> sq.done == false

// 			# hämta närmaste uppdrag om sådant finns
// 			if @squares.length > 0
// 				@target = @closest()
// 				d = p5.Vector.dist @pos,@target.pos
// 				@distance += d

// 		@pos.add step

// 		for square in @squares
// 			if @name in 'ABCD'
// 				fill 'red'
// 			else
// 				fill 'black'
// 			circle square.pos.x, square.pos.y, 10

// 		# if @name in 'ABCD'
// 		@drawTail()
// 		if @name in 'ABCD' then fill 'yellow' else fill 'black'
// 		strokeWeight 1
// 		circle @pos.x,@pos.y,0.4*SIZE
// 		if @name in 'ABCD' then fill 'black' else fill 'yellow'
// 		noStroke()
// 		# fill 'black'
// 		text @name, @pos.x, @pos.y

// uci2pos = (uci) -> # t ex e2e4 => [[225,75],[225,175]]
// 	startx = uci[0]
// 	starty = uci[1]
// 	stoppx = uci[2]
// 	stoppy = uci[3]
// 	result = []
// 	x = FILES.indexOf startx
// 	y = 7 - RANKS.indexOf starty
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	x = FILES.indexOf stoppx
// 	y = 7 - RANKS.indexOf stoppy
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	result

// class Game
// 	constructor : (@name, pgn, @link) ->
// 		@chess = new Chess()
// 		@chess.load_pgn pgn
// 		@san_moves = @chess.history() # [Nf3, ...]
// 		@uci_moves = (move.from + move.to for move in @chess.history({ verbose: true })) # [g1f3, ...]
// 		@move = null
// 		@queue = []
// 		@duration = 0
// 		@chess.reset()
// 		@index = -1
// 		document.getElementById("link#{@name}").innerHTML = "<a href=\"#{@link}\" target=\"_blank\">Link</a>"

// 	initMove : ->
// 		if @index >= @uci_moves.length - 1 then return false
// 		@index += 1
// 		if @move != null 
// 			#echo 'too quick!'
// 			return false
// 		@move = new Move @uci_moves[@index], @name

// 		start = @move.uci.slice 0,2
// 		stopp = @move.uci.slice 2,4

// 		antal = 'ABCD'.indexOf @name
// 		for i in [0...antal] 
// 			start = rotate start
// 			stopp = rotate stopp

// 		if @index % 2 == 0
// 			a = "1234"
// 			b = "5678"
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.A.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.B.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.C.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.D.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.A.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.B.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.C.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.D.add @move.stopp

// 		else
// 			a = "1234"
// 			b = "5678"
// 			# Hantera motståndaren
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.G.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.E.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.H.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.F.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.G.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.E.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.H.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.F.add @move.stopp
// 		true

// class Square 
// 	constructor : (@pos, @uci="", @carrier="") -> # Vector
// 		@done = false
// 		@time = performance.now()

// # rotate = (sq) -> FILES[8-sq[1]] + String 1 + FILES.indexOf sq[0]
// # echo "g3" == rotate "c2"
// # echo "h1" == rotate "a1"
// # echo "h8" == rotate rotate "a1"
// # echo "a8" == rotate rotate rotate "a1"
// # echo "a1" == rotate rotate rotate rotate "a1"

// # coordinates = (sq) ->
// # 	x = FILES.indexOf sq[0]
// # 	y = RANKS.indexOf sq[1]
// # 	[x, 7-y]
// # echo _.isEqual [4,4], coordinates "e4"
// # echo _.isEqual [0,7], coordinates "a1"

// # toVector = ([x,y]) ->
// # 	createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// # echo toVector [3,4]

// class Move
// 	constructor : (@uci, @name) -> # e2e4, B
// 		antal = "ABCD".indexOf @name
// 		start = @uci.slice 0,2
// 		stopp = @uci.slice 2,4
// 		for i in [0...antal]
// 			start = rotate start
// 			stopp = rotate stopp
// 		start = toVector coordinates start
// 		stopp = toVector coordinates stopp
// 		@pos = [start, stopp]
// 		@start = new Square start, @uci
// 		@stopp = new Square stopp, @uci

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsY0FBQSxFQUFBLG9CQUFBLEVBQUEsZ0JBQUEsRUFBQSxlQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQTs7QUFBQSxPQUFBLEdBQVU7O0FBRVYsV0FBQSxHQUFjO0VBQUEsR0FBQSxFQUFLLFNBQUw7RUFBZ0IsR0FBQSxFQUFLLFNBQXJCO0FBQUE7O0FBQ2QsVUFBQSxHQUFhLElBSGI7O0FBSUEsVUFBQSxHQUFhLEdBSmI7O0FBS0EsTUFBQSxHQUFTLFVBQUEsR0FBYTs7QUFFdEIsTUFBQSxHQUFTLEVBUFQ7O0FBU0EsS0FBQSxHQUFRLE9BVFI7O0FBVUEsS0FBQSxHQUFROztBQUVSLENBQUEsR0FBSSxPQVpKOztBQWNBLE9BQUEsR0FBVTs7QUFDVixNQUFBLEdBQVM7O0FBRVQsUUFBQSxHQUFXOztBQUNYLE1BQUEsR0FBUyxDQUFBOztBQUNULE9BQUEsR0FBVTs7QUFFVixNQUFBLEdBQVMsQ0FBQSxFQXJCVDs7QUFzQkEsVUFBQSxHQUFhLENBQUEsRUF0QmI7O0FBdUJBLFVBQUEsR0FBYSxDQUFBLEVBdkJiOztBQXdCQSxVQUFVLENBQUMsQ0FBWCxHQUFlO0VBQUMsQ0FBRDtFQUFHLENBQUg7OztBQUNmLFVBQVUsQ0FBQyxDQUFYLEdBQWU7RUFBQyxDQUFEO0VBQUcsQ0FBSDs7O0FBRWYsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUVWLElBQUEsR0FBTyxRQUFBLENBQUMsR0FBRCxDQUFBO0VBQ04sUUFBUSxDQUFDLE9BQVQsQ0FBaUIsR0FBakIsRUFBRDtFQUNDLElBQUcsUUFBUSxDQUFDLE1BQVQsR0FBa0IsRUFBckI7V0FBNkIsUUFBUSxDQUFDLEdBQVQsQ0FBQSxFQUE3Qjs7QUFGTTs7QUFJUCxNQUFBLEdBQVMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7RUFBUyxJQUFHLENBQUEsS0FBSyxDQUFSO1dBQWUsSUFBQSxDQUFLLFFBQUwsRUFBYyxDQUFkLEVBQWdCLENBQWhCLEVBQWY7O0FBQVQ7O0FBRVQsT0FBQSxHQUFVOztBQUNWLFFBQUEsR0FBVzs7QUFFWCxFQUFBLEdBQUssQ0FBQyxDQUFELENBQUEsR0FBQSxFQUFBOztFQUVKLFFBQUEsSUFBWTtFQUNaLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBVCxHQUFlLENBQUMsQ0FBQyxNQUFNLENBQUM7RUFDeEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFULEdBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztFQUN4QixVQUFVLENBQUMsQ0FBWCxHQUFlLFNBQUEsQ0FBVSxNQUFNLENBQUMsQ0FBakIsRUFBb0IsTUFBTSxDQUFDLENBQTNCO0VBQ2YsVUFBVSxDQUFDLENBQVgsR0FBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFaLEdBQWtCLE1BQW5CLEVBQTJCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFaLEdBQWtCLE1BQTdDO0VBQ2YsSUFBQSxDQUFLLENBQUEsQ0FBQSxDQUFHLFFBQUgsRUFBQSxDQUFBLENBQWUsS0FBQSxDQUFNLGNBQUEsQ0FBZSxNQUFNLENBQUMsQ0FBdEIsRUFBeUIsTUFBTSxDQUFDLE1BQUQsQ0FBL0IsQ0FBTixDQUFmLENBQUEsRUFBQSxDQUFBLENBQWlFLE1BQWpFLEVBQUEsQ0FBQSxDQUEyRSxLQUFBLENBQU0sZUFBQSxDQUFnQixNQUFNLENBQUMsQ0FBdkIsRUFBMEIsTUFBTSxDQUFDLE1BQUQsQ0FBaEMsQ0FBTixFQUFnRCxDQUFoRCxDQUEzRSxDQUFBLEVBQUEsQ0FBQSxDQUFpSSxLQUFBLENBQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFmLEVBQXdCLENBQXhCLENBQWpJLEVBQUEsQ0FBQSxDQUE4SixLQUFBLENBQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFmLEVBQXlCLENBQXpCLENBQTlKLENBQUEsQ0FBTCxFQU5EOzs7RUFTQyxJQUFHLE1BQUEsS0FBVSxFQUFiO0FBQXFCLFdBQXJCOztFQUNBLElBQUcsTUFBQSxHQUFTLGVBQUEsQ0FBZ0IsTUFBTSxDQUFDLENBQXZCLEVBQTBCLE1BQU0sQ0FBQyxNQUFELENBQWhDLENBQVo7QUFBMEQsV0FBMUQ7O0VBQ0EsSUFBRyxPQUFPLENBQUMsTUFBUixLQUFrQixDQUFyQjtJQUNDLE1BQUEsR0FBUztBQUNULFdBRkQ7O0VBR0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFqQixDQUFBO1NBQ0EsTUFBQSxHQUFTLE9BQU8sQ0FBQyxLQUFSLENBQUE7QUFoQkw7O0FBa0JMLEtBQUEsR0FBUSxRQUFBLENBQUMsR0FBRCxDQUFBO1NBQVMsSUFBQSxDQUFLLENBQUEsS0FBQSxDQUFBLENBQVEsR0FBRyxDQUFDLE9BQVosQ0FBQSxDQUFMO0FBQVQ7O0FBRVIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsUUFBQSxDQUFBLENBQUE7RUFDckIsSUFBRyxDQUFJLE9BQVA7SUFDQyxjQUFBLENBQUE7SUFDQSxhQUFBLENBQUE7SUFDQSxPQUFBLEdBQVUsS0FIWDs7RUFJQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQWpCLENBQUE7QUFDQSxTQUFPO0FBTmM7O0FBUXRCLGFBQUEsR0FBZ0IsUUFBQSxDQUFBLENBQUE7RUFFZixJQUFHLENBQUksU0FBUyxDQUFDLFdBQWpCO0lBQ0MsSUFBQSxDQUFLLDBDQUFMO0FBQ0EsV0FGRDs7RUFJQSxJQUFBLENBQUssb0JBQUw7U0FFQSxPQUFBLEdBQVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUF0QixDQUFvQyxFQUFwQyxFQUF3QyxLQUF4QyxFQUNUO0lBQUEsa0JBQUEsRUFBb0IsSUFBcEI7SUFDQSxPQUFBLEVBQVMsSUFEVDtJQUVBLFVBQUEsRUFBWTtFQUZaLENBRFM7QUFSSyxFQW5FaEI7OztBQWtGQSxlQUFBLEdBQWtCLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO0FBQ2xCLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxJQUFBLEdBQU8sQ0FBQyxDQUFDO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQztFQUNULElBQUEsR0FBTyxDQUFDLENBQUM7RUFDVCxJQUFBLEdBQU8sQ0FBQyxDQUFDO0VBQ1QsRUFBQSxHQUFLLElBQUEsR0FBTyxJQUFJLENBQUMsRUFBWixHQUFpQjtFQUN0QixFQUFBLEdBQUssSUFBQSxHQUFPLElBQUksQ0FBQyxFQUFaLEdBQWlCO0VBQ3RCLEVBQUEsR0FBSyxDQUFDLElBQUEsR0FBTyxJQUFSLENBQUEsR0FBZ0IsSUFBSSxDQUFDLEVBQXJCLEdBQTBCO0VBQy9CLEVBQUEsR0FBSyxDQUFDLElBQUEsR0FBTyxJQUFSLENBQUEsR0FBZ0IsSUFBSSxDQUFDLEVBQXJCLEdBQTBCO0VBQy9CLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQUEsR0FBSyxDQUFkLENBQUEsSUFBb0IsQ0FBcEIsR0FBd0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFULENBQUEsR0FBZSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBZixHQUE4QixJQUFJLENBQUMsR0FBTCxDQUFTLEVBQUEsR0FBSyxDQUFkLENBQUEsSUFBb0I7RUFDOUUsQ0FBQSxHQUFJLENBQUEsR0FBSSxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBVixDQUFYLEVBQXlCLElBQUksQ0FBQyxJQUFMLENBQVUsQ0FBQSxHQUFJLENBQWQsQ0FBekI7U0FDUixDQUFBLEdBQUksRUFYYTtBQUFBOztBQWFsQixjQUFBLEdBQWlCLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO0FBQ2pCLE1BQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxJQUFBLEdBQU8sQ0FBQyxDQUFDO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQztFQUNULElBQUEsR0FBTyxDQUFDLENBQUM7RUFDVCxJQUFBLEdBQU8sQ0FBQyxDQUFDO0VBQ1QsRUFBQSxHQUFLLElBQUEsR0FBTyxJQUFJLENBQUMsRUFBWixHQUFpQjtFQUN0QixFQUFBLEdBQUssSUFBQSxHQUFPLElBQUksQ0FBQyxFQUFaLEdBQWlCO0VBQ3RCLEVBQUEsR0FBSyxDQUFDLElBQUEsR0FBTyxJQUFSLENBQUEsR0FBZ0IsSUFBSSxDQUFDLEVBQXJCLEdBQTBCO0VBQy9CLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBQSxHQUFlLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVDtFQUNuQixDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFULENBQUEsR0FBZSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBZixHQUE4QixJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBQSxHQUFlLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxDQUFmLEdBQThCLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVDtFQUNoRSxDQUFBLEdBQUksSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZDtTQUNKLENBQUMsQ0FBQSxHQUFJLEdBQUosR0FBVSxJQUFJLENBQUMsRUFBZixHQUFvQixHQUFyQixDQUFBLEdBQTRCLElBWFo7QUFBQTs7QUFhakIsb0JBQUEsR0FBdUIsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7QUFDdkIsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtFQUFDLElBQUEsR0FBTyxDQUFDLENBQUM7RUFDVCxJQUFBLEdBQU8sQ0FBQyxDQUFDO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQztFQUNULElBQUEsR0FBTyxDQUFDLENBQUM7RUFDVCxFQUFBLEdBQUssSUFBQSxHQUFPLElBQUksQ0FBQyxFQUFaLEdBQWlCO0VBQ3RCLEVBQUEsR0FBSyxJQUFBLEdBQU8sSUFBSSxDQUFDLEVBQVosR0FBaUI7RUFDdEIsRUFBQSxHQUFLLENBQUMsSUFBQSxHQUFPLElBQVIsQ0FBQSxHQUFnQixJQUFJLENBQUMsRUFBckIsR0FBMEI7RUFDL0IsRUFBQSxHQUFLLENBQUMsSUFBQSxHQUFPLElBQVIsQ0FBQSxHQUFnQixJQUFJLENBQUMsRUFBckIsR0FBMEI7RUFDL0IsRUFBQSxHQUFLLENBQUEsR0FBSSxFQUFKLEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLEVBQUEsR0FBSyxFQUFOLENBQUEsR0FBWSxDQUFyQixFQVJmO0VBU0MsRUFBQSxHQUFLLENBQUEsR0FBSSxHQVRWO1NBVUM7SUFBQyxFQUFEO0lBQUksRUFBSjs7QUFYc0I7O0FBYXZCLFNBQUEsR0FBWSxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtTQUFTLG9CQUFBLENBQXFCLENBQXJCLEVBQXdCLENBQXhCO0FBQVQ7O0FBRVosZ0JBQUEsR0FBbUIsUUFBQSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsUUFBWCxFQUFxQixPQUFyQixDQUFBO0FBQ25CLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtFQUFDLEVBQUEsR0FBSyxHQUFBLEdBQU0sSUFBSSxDQUFDLEVBQVgsR0FBZ0I7RUFDckIsRUFBQSxHQUFLLEdBQUEsR0FBTSxJQUFJLENBQUMsRUFBWCxHQUFnQjtFQUNyQixDQUFBLEdBQUksT0FBQSxHQUFVLElBQUksQ0FBQyxFQUFmLEdBQW9CO0VBQ3hCLENBQUEsR0FBSSxRQUFBLEdBQVc7RUFFZixFQUFBLEdBQUssSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBQSxHQUFlLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxDQUFmLEdBQTZCLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxDQUFBLEdBQWUsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQWYsR0FBNkIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQXBFO0VBQ0wsRUFBQSxHQUFLLEVBQUEsR0FBSyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxDQUFBLEdBQWMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQWQsR0FBNEIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFULENBQXZDLEVBQXFELElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxDQUFBLEdBQWMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxFQUFULENBQUEsR0FBZSxJQUFJLENBQUMsR0FBTCxDQUFTLEVBQVQsQ0FBbEY7U0FFVjtJQUFBLEdBQUEsRUFBSyxFQUFBLEdBQUssR0FBTCxHQUFXLElBQUksQ0FBQyxFQUFyQjtJQUNBLEdBQUEsRUFBSyxFQUFBLEdBQUssR0FBTCxHQUFXLElBQUksQ0FBQztFQURyQjtBQVRrQjs7QUFZbkIsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBO0FBQ2IsTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO0VBQUMsTUFBQSxHQUFTLENBQUE7QUFDVDtBQUFBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxLQUFBLEdBQVEsU0FBQSxDQUFVLENBQUEsT0FBQSxDQUFBLENBQVUsSUFBVixDQUFBLElBQUEsQ0FBVjtJQUNSLEtBQUssQ0FBQyxTQUFOLENBQWdCLEdBQWhCO0lBQ0EsS0FBSyxDQUFDLEdBQU4sQ0FBVSxDQUFWO2lCQUNBLE1BQU0sQ0FBQyxJQUFELENBQU4sR0FBZTtFQUpoQixDQUFBOztBQUZZOztBQVFiLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFFBQUEsQ0FBQSxDQUFBO1NBQ2hCLFVBQUEsQ0FBQTtBQURnQjs7QUFHakIsTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNmLE1BQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUMsWUFBQSxDQUFhLFdBQUEsR0FBWSxDQUF6QixFQUE0QixZQUFBLEdBQWEsQ0FBekMsRUFBNEMsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBNUM7RUFDQSxTQUFBLENBQVUsTUFBVixFQUFpQixNQUFqQjtFQUNBLFFBQUEsQ0FBUyxHQUFBLEdBQU0sVUFBZjtFQUNBLFFBQUEsQ0FBQTtFQUNBLFNBQUEsQ0FBVSxDQUFWLEVBSkQ7O0VBUUMsTUFBTSxDQUFDLENBQVAsR0FBVztFQUNYLEdBQUE7O0FBQU87SUFBQSxLQUErRSx5QkFBL0U7bUJBQUEsZ0JBQUEsQ0FBaUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUExQixFQUErQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQXhDLEVBQTZDLENBQUMsQ0FBQSxHQUFFLEdBQUgsQ0FBQSxHQUFVLFVBQXZELEVBQW1FLEVBQW5FO0lBQUEsQ0FBQTs7T0FUUjs7RUFZQyxLQUFTLHlCQUFUO0lBQ0MsS0FBUyx5QkFBVDtNQUNDLEdBQUEsR0FBTSxDQUFBLENBQUEsQ0FBRyxLQUFLLENBQUMsQ0FBRCxDQUFSLENBQUEsQ0FBQSxDQUFjLEtBQUssQ0FBQyxDQUFELENBQW5CLENBQUE7TUFDTixNQUFNLENBQUMsR0FBRCxDQUFOLEdBQWMsZ0JBQUEsQ0FBaUIsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLEdBQXhCLEVBQTZCLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQyxHQUFwQyxFQUF5QyxDQUFDLENBQUEsR0FBRSxHQUFILENBQUEsR0FBVSxVQUFuRCxFQUErRCxHQUEvRDtNQUNkLFVBQVUsQ0FBQyxHQUFELENBQVYsR0FBa0IsQ0FBQyxDQUFDLENBQUEsR0FBRSxHQUFILENBQUEsR0FBVSxVQUFYLEVBQXVCLENBQUMsQ0FBQSxHQUFFLEdBQUgsQ0FBQSxHQUFVLFVBQWpDO01BQ2xCLFVBQVUsQ0FBQyxHQUFELENBQVYsR0FBa0IsQ0FBQyxDQUFDLENBQUEsR0FBRSxHQUFILENBQUEsR0FBVSxVQUFYLEVBQXVCLENBQUMsQ0FBQSxHQUFFLEdBQUgsQ0FBQSxHQUFVLFVBQWpDO0lBSm5CO0VBREQ7RUFPQSxPQUFBLEdBQVUsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQO0VBQ1YsT0FBQSxHQUFVLHFEQUFxRCxDQUFDLEtBQXRELENBQTRELEdBQTVELEVBcEJYOztFQXNCQyxJQUFBLENBQUssT0FBTDtFQUNBLE1BQUEsR0FBUyxPQUFPLENBQUMsS0FBUixDQUFBLEVBdkJWOztFQTBCQyxHQUFBLEdBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQVYsR0FBZ0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUEzQixDQUFBLEdBQWtDO0VBQ3hDLEdBQUEsR0FBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBVixHQUFnQixNQUFNLENBQUMsRUFBRSxDQUFDLEdBQTNCLENBQUEsR0FBa0M7RUFDeEMsTUFBTSxDQUFDLENBQVAsR0FBVyxDQUFDLEdBQUQsRUFBTSxHQUFOO0VBQ1gsVUFBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQUEsR0FBRSxVQUFILEVBQWMsQ0FBQyxDQUFELEdBQUcsVUFBakI7RUFDZixVQUFVLENBQUMsQ0FBWCxHQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFELENBQVosR0FBa0IsTUFBbkIsRUFBMkIsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFELENBQVosR0FBa0IsTUFBN0M7RUFFZixJQUFBLENBQUssV0FBQSxHQUFjLE9BQW5CO0VBRUEsSUFBQSxDQUFLLFFBQUwsRUFBYyxNQUFkO0VBQ0EsSUFBQSxDQUFLLFlBQUwsRUFBa0IsVUFBbEI7U0FDQSxJQUFBLENBQUssWUFBTCxFQUFrQixVQUFsQjtBQXJDYyxFQWxKZjs7Ozs7Ozs7QUFnTUEsTUFBTSxDQUFDLElBQVAsR0FBYyxRQUFBLENBQUEsQ0FBQTtBQUNkLE1BQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQyxVQUFBLENBQVcsQ0FBWDtFQUNBLElBQUEsQ0FBSyxHQUFMLEVBREQ7O0VBR0MsR0FBQSxHQUFNLFVBQUEsR0FBVztFQUNqQixNQUFBLENBQU8sR0FBUDtFQUNBLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBQSxHQUFVLFVBQVUsQ0FBQztFQUNyQixDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUEsR0FBVSxVQUFVLENBQUMsTUFBRDtFQUNwQixJQUFBLENBQUssRUFBQSxHQUFLLEVBQVYsRUFBYyxFQUFBLEdBQUssRUFBbkIsRUFBdUIsRUFBQSxHQUFLLEVBQTVCLEVBQWdDLEVBQUEsR0FBSyxFQUFyQztFQUNBLFFBQUEsQ0FBQTtFQUVBLEtBQUEsaUJBQUE7SUFDQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUEsR0FBUSxVQUFVLENBQUMsR0FBRDtJQUNsQixJQUFBLENBQUssT0FBTDtJQUNBLElBQUcsR0FBQSxLQUFPLE1BQVY7TUFBc0IsSUFBQSxDQUFLLEtBQUwsRUFBdEI7O0lBQ0EsSUFBRyxHQUFBLEtBQU8sR0FBVjtNQUNDLElBQUEsQ0FBSyxRQUFMO01BQ0EsTUFBQSxDQUFPLEVBQUEsR0FBSyxDQUFaLEVBQWUsRUFBQSxHQUFLLENBQXBCLEVBQXVCLEdBQUEsR0FBTSxHQUE3QixFQUZEO0tBQUEsTUFBQTs7TUFLQyxNQUFBLENBQU8sRUFBQSxHQUFLLENBQVosRUFBZSxFQUFBLEdBQUssQ0FBcEIsRUFBdUIsR0FBQSxHQUFNLEdBQTdCLEVBTEQ7O0VBSkQ7RUFXQSxJQUFBLENBQUssT0FBTDtFQUNBLEtBQVMseUJBQVQ7SUFDQyxJQUFBLENBQUssS0FBSyxDQUFDLENBQUQsQ0FBVixFQUFlLEVBQUEsR0FBSyxHQUFMLEdBQVcsQ0FBQSxHQUFFLFVBQTVCLEVBQXdDLEVBQUEsR0FBSyxJQUFBLEdBQUssVUFBbEQ7SUFDQSxJQUFBLENBQUssS0FBSyxDQUFDLENBQUQsQ0FBVixFQUFlLEVBQUEsR0FBSyxHQUFBLEdBQUksQ0FBeEIsRUFBMkIsRUFBQSxHQUFLLEdBQUwsR0FBVyxDQUFBLEdBQUUsVUFBeEM7RUFGRDtFQUlBLElBQUEsQ0FBSyxLQUFBLENBQU0sY0FBQSxDQUFlLE1BQU0sQ0FBQyxDQUF0QixFQUF5QixNQUFNLENBQUMsTUFBRCxDQUEvQixDQUFOLENBQUEsR0FBa0QsR0FBdkQsRUFBMkQsRUFBQSxHQUFHLEdBQUEsR0FBSSxVQUFsRSxFQUE2RSxHQUFBLEdBQUksVUFBakY7RUFDQSxJQUFBLENBQUssTUFBTCxFQUFhLEVBQUEsR0FBRyxDQUFBLEdBQUUsVUFBbEIsRUFBOEIsR0FBQSxHQUFJLFVBQWxDO0VBQ0EsSUFBQSxDQUFLLEtBQUEsQ0FBTSxlQUFBLENBQWdCLE1BQU0sQ0FBQyxDQUF2QixFQUEwQixNQUFNLENBQUMsTUFBRCxDQUFoQyxDQUFOLENBQUEsR0FBbUQsR0FBeEQsRUFBNEQsRUFBQSxHQUFHLEdBQUEsR0FBSSxVQUFuRSxFQUE4RSxHQUFBLEdBQUksVUFBbEY7RUFFQSxJQUFBLENBQUE7RUFDQSxTQUFBLENBQVUsTUFBVjtFQUNBLFFBQUEsQ0FBUyxHQUFBLEdBQU0sVUFBZjtBQUNBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFBLENBQUssUUFBUSxDQUFDLENBQUQsQ0FBYixFQUFrQixHQUFBLEdBQUksVUFBdEIsRUFBa0MsR0FBQSxHQUFJLFVBQUosR0FBaUIsQ0FBQSxHQUFFLEdBQUYsR0FBUSxVQUEzRDtFQUREO1NBRUEsR0FBQSxDQUFBO0FBcENhOztBQWhNZCIsInNvdXJjZXNDb250ZW50IjpbIlZFUlNJT04gPSAzN1xyXG5cclxuU1RBUlRfUE9JTlQgPSBsYXQ6IDU5LjI3MTY2NywgbG9uOiAxOC4xNTE3NzggIyBrbml4ZW4gcMOlIGtyYWZ0bGVkbmluZ2VuIE5PIEJyb3RvcnBcclxuU0laRV9QSVhFTCA9IDIwMCAjIEVuIHNjaGFja3J1dGFzIHN0b3JsZWsgaSBwaXhsYXJcclxuU0laRV9NRVRFUiA9IDUwICMgRW4gc2NoYWNrcnV0YXMgc3RvcmxlayBpIG1ldGVyXHJcbkZBQ1RPUiA9IFNJWkVfUElYRUwgLyBTSVpFX01FVEVSXHJcblxyXG5SQURJVVMgPSAyICMgbWV0ZXIuIE1heGF2c3TDpW5kIG1lbGxhbiBzcGVsYXJlbiBvY2ggdGFyZ2V0XHJcblxyXG5GSUxFUyA9ICdlZmdoJyAjIERlIDE2IHJ1dG9yIG1hbiBoYXIgaGFuZCBvbVxyXG5SQU5LUyA9ICc0MzIxJ1xyXG5cclxuUiA9IDYzNzFlMyAgIyBKb3JkZW5zIHJhZGllIGkgbWV0ZXJcclxuXHJcbnRhcmdldHMgPSBbXVxyXG50YXJnZXQgPSBcIlwiXHJcblxyXG5tZXNzYWdlcyA9IFtdXHJcbnNvdW5kcyA9IHt9XHJcbnN0YXJ0ZWQgPSBmYWxzZVxyXG5cclxubWF0cml4ID0ge30gIyBXR1M4NFxyXG5ncmlkX21ldGVyID0ge30gIyBtZXRlclxyXG5ncmlkX3BpeGVsID0ge30gIyBwaXhlbFxyXG5ncmlkX21ldGVyLnMgPSBbMCwwXSAjIG9yaWdvLCBzYW1saW5nc3B1bmt0XHJcbmdyaWRfcGl4ZWwucyA9IFswLDBdICMgb3JpZ28sIHNhbWxpbmdzcHVua3RcclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbmR1bXAgPSAobXNnKSAtPlxyXG5cdG1lc3NhZ2VzLnVuc2hpZnQgbXNnICMgbnlhc3RlIMO2dmVyc3RcclxuXHRpZiBtZXNzYWdlcy5sZW5ndGggPiAyMCB0aGVuIG1lc3NhZ2VzLnBvcCgpICMgw6RsZHN0YSBkcm9wcGFzXHJcblxyXG5hc3NlcnQgPSAoYSxiKSAtPiBpZiBhICE9IGIgdGhlbiBlY2hvICdhc3NlcnQnLGEsYlxyXG5cclxud2F0Y2hJRCA9IG51bGxcclxuZ3BzQ291bnQgPSAwXHJcblxyXG53cCA9IChwKSA9PlxyXG5cdCNzb3VuZHMuc291bmREb3duLnBsYXkoKVxyXG5cdGdwc0NvdW50ICs9IDFcclxuXHRtYXRyaXgucC5sYXQgPSBwLmNvb3Jkcy5sYXRpdHVkZVxyXG5cdG1hdHJpeC5wLmxvbiA9IHAuY29vcmRzLmxvbmdpdHVkZVxyXG5cdGdyaWRfbWV0ZXIucCA9IG1ha2VQb2ludCBtYXRyaXgucywgbWF0cml4LnBcclxuXHRncmlkX3BpeGVsLnAgPSBbZ3JpZF9tZXRlci5wWzBdICogRkFDVE9SLCBncmlkX21ldGVyLnBbMV0gKiBGQUNUT1JdXHJcblx0ZHVtcCBcIiN7Z3BzQ291bnR9ICN7cm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdfcKwICN7dGFyZ2V0fSAje3JvdW5kIGRpc3RhbmNlQmV0d2VlbihtYXRyaXgucCwgbWF0cml4W3RhcmdldF0pLDF9bSAje3JvdW5kIHAuY29vcmRzLmxhdGl0dWRlLDZ9ICN7cm91bmQgcC5jb29yZHMubG9uZ2l0dWRlLDZ9XCIgXHJcblxyXG5cdCMgb20gbWFuIMOkciBpbm9tIFJBRElVUyBtZXRlciBmcsOlbiBtw6VsZXQsIGJ5dCBtw6VsXHJcblx0aWYgdGFyZ2V0ID09ICcnIHRoZW4gcmV0dXJuXHJcblx0aWYgUkFESVVTIDwgZGlzdGFuY2VCZXR3ZWVuIG1hdHJpeC5wLCBtYXRyaXhbdGFyZ2V0XSB0aGVuIHJldHVyblxyXG5cdGlmIHRhcmdldHMubGVuZ3RoID09IDBcclxuXHRcdHRhcmdldCA9ICcnXHJcblx0XHRyZXR1cm5cclxuXHRzb3VuZHMuc291bmREb3duLnBsYXkoKVxyXG5cdHRhcmdldCA9IHRhcmdldHMuc2hpZnQoKVxyXG5cclxud3BlcnIgPSAoZXJyKSAtPiBkdW1wIFwiRmVsOiAje2Vyci5tZXNzYWdlfVwiXHJcblxyXG53aW5kb3cudG91Y2hTdGFydGVkID0gLT5cclxuXHRpZiBub3Qgc3RhcnRlZFxyXG5cdFx0dXNlclN0YXJ0QXVkaW8oKVxyXG5cdFx0c3RhcnRUcmFja2luZygpXHJcblx0XHRzdGFydGVkID0gdHJ1ZVxyXG5cdHNvdW5kcy5zb3VuZERvd24ucGxheSgpXHJcblx0cmV0dXJuIGZhbHNlXHJcblxyXG5zdGFydFRyYWNraW5nID0gLT5cclxuXHJcblx0aWYgbm90IG5hdmlnYXRvci5nZW9sb2NhdGlvblxyXG5cdFx0ZHVtcCBcIkdlb2xvY2F0aW9uIHN0w7ZkcyBpbnRlIGkgZGluIHdlYmJsw6RzYXJlLlwiXHJcblx0XHRyZXR1cm5cclxuXHJcblx0ZHVtcCBcIkJlZ8OkciBwbGF0c2RhdGEuLi5cIlxyXG5cclxuXHR3YXRjaElEID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gd3AsIHdwZXJyLFxyXG5cdFx0ZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlIFxyXG5cdFx0dGltZW91dDogNTAwMCBcclxuXHRcdG1heGltdW1BZ2U6IDEwMDBcclxuXHJcbiMgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXJ0QnRuJykuYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCBzdGFydFRyYWNraW5nXHJcblxyXG5kaXN0YW5jZUJldHdlZW4gPSAocCxxKSAtPlxyXG5cdGxhdDEgPSBwLmxhdFxyXG5cdGxvbjEgPSBwLmxvblxyXG5cdGxhdDIgPSBxLmxhdFxyXG5cdGxvbjIgPSBxLmxvblxyXG5cdM+GMSA9IGxhdDEgKiBNYXRoLlBJIC8gMTgwXHJcblx0z4YyID0gbGF0MiAqIE1hdGguUEkgLyAxODBcclxuXHTOlM+GID0gKGxhdDIgLSBsYXQxKSAqIE1hdGguUEkgLyAxODBcclxuXHTOlM67ID0gKGxvbjIgLSBsb24xKSAqIE1hdGguUEkgLyAxODBcclxuXHRhID0gTWF0aC5zaW4ozpTPhiAvIDIpICoqIDIgKyBNYXRoLmNvcyjPhjEpICogTWF0aC5jb3Moz4YyKSAqIE1hdGguc2luKM6UzrsgLyAyKSAqKiAyXHJcblx0YyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSlcclxuXHRSICogYyAgIyBhdnN0w6VuZCBpIG1ldGVyXHJcblxyXG5iZWFyaW5nQmV0d2VlbiA9IChwLHEpIC0+XHJcblx0bGF0MSA9IHAubGF0XHJcblx0bG9uMSA9IHAubG9uXHJcblx0bGF0MiA9IHEubGF0XHJcblx0bG9uMiA9IHEubG9uXHJcblx0z4YxID0gbGF0MSAqIE1hdGguUEkgLyAxODBcclxuXHTPhjIgPSBsYXQyICogTWF0aC5QSSAvIDE4MFxyXG5cdM6UzrsgPSAobG9uMiAtIGxvbjEpICogTWF0aC5QSSAvIDE4MFxyXG5cdHkgPSBNYXRoLnNpbijOlM67KSAqIE1hdGguY29zKM+GMilcclxuXHR4ID0gTWF0aC5jb3Moz4YxKSAqIE1hdGguc2luKM+GMikgLSBNYXRoLnNpbijPhjEpICogTWF0aC5jb3Moz4YyKSAqIE1hdGguY29zKM6UzrspXHJcblx0zrggPSBNYXRoLmF0YW4yKHksIHgpXHJcblx0KM64ICogMTgwIC8gTWF0aC5QSSArIDM2MCkgJSAzNjAgICMgYsOkcmluZyBpIGdyYWRlclxyXG5cclxuZGVsdGFYWUJldHdlZW5Qb2ludHMgPSAocCxxKSAtPlxyXG5cdGxhdDEgPSBwLmxhdFxyXG5cdGxvbjEgPSBwLmxvblxyXG5cdGxhdDIgPSBxLmxhdFxyXG5cdGxvbjIgPSBxLmxvblxyXG5cdM+GMSA9IGxhdDEgKiBNYXRoLlBJIC8gMTgwXHJcblx0z4YyID0gbGF0MiAqIE1hdGguUEkgLyAxODBcclxuXHTOlM+GID0gKGxhdDIgLSBsYXQxKSAqIE1hdGguUEkgLyAxODBcclxuXHTOlM67ID0gKGxvbjIgLSBsb24xKSAqIE1hdGguUEkgLyAxODBcclxuXHRkeCA9IFIgKiDOlM67ICogTWF0aC5jb3MoKM+GMSArIM+GMikgLyAyKSAgIyDDtnN0bGlnIHNraWxsbmFkXHJcblx0ZHkgPSBSICogzpTPhiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIG5vcmRsaWcgc2tpbGxuYWRcclxuXHRbZHgsZHldICMgaSBtZXRlclxyXG5cclxubWFrZVBvaW50ID0gKHAscSkgLT4gZGVsdGFYWUJldHdlZW5Qb2ludHMgcCwgcVxyXG5cclxuZGVzdGluYXRpb25Qb2ludCA9IChsYXQsIGxvbiwgZGlzdGFuY2UsIGJlYXJpbmcpIC0+IFxyXG5cdM+GMSA9IGxhdCAqIE1hdGguUEkgLyAxODBcclxuXHTOuzEgPSBsb24gKiBNYXRoLlBJIC8gMTgwXHJcblx0zrggPSBiZWFyaW5nICogTWF0aC5QSSAvIDE4MFxyXG5cdM60ID0gZGlzdGFuY2UgLyBSXHJcblxyXG5cdM+GMiA9IE1hdGguYXNpbihNYXRoLnNpbijPhjEpICogTWF0aC5jb3MozrQpICsgTWF0aC5jb3Moz4YxKSAqIE1hdGguc2luKM60KSAqIE1hdGguY29zKM64KSlcclxuXHTOuzIgPSDOuzEgKyBNYXRoLmF0YW4yKE1hdGguc2luKM64KSAqIE1hdGguc2luKM60KSAqIE1hdGguY29zKM+GMSksIE1hdGguY29zKM60KSAtIE1hdGguc2luKM+GMSkgKiBNYXRoLnNpbijPhjIpKVxyXG5cclxuXHRsYXQ6IM+GMiAqIDE4MCAvIE1hdGguUElcclxuXHRsb246IM67MiAqIDE4MCAvIE1hdGguUElcclxuXHJcbmluaXRTb3VuZHMgPSAtPlxyXG5cdHNvdW5kcyA9IHt9XHJcblx0Zm9yIG5hbWUgaW4gXCJzb3VuZERvd24gc291bmRVcFwiLnNwbGl0ICcgJ1xyXG5cdFx0c291bmQgPSBsb2FkU291bmQgXCJzb3VuZHMvI3tuYW1lfS53YXZcIlxyXG5cdFx0c291bmQuc2V0Vm9sdW1lIDEuMFxyXG5cdFx0c291bmQucGFuIDBcclxuXHRcdHNvdW5kc1tuYW1lXSA9IHNvdW5kXHJcblxyXG53aW5kb3cucHJlbG9hZCA9IC0+XHJcblx0aW5pdFNvdW5kcygpXHJcblxyXG53aW5kb3cuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aC01LCB3aW5kb3dIZWlnaHQtNSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJjYW52YXNcIlxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dGV4dFNpemUgMC4zICogU0laRV9QSVhFTFxyXG5cdG5vU3Ryb2tlKClcclxuXHRmcmFtZVJhdGUgMlxyXG5cclxuXHQjIHNvdW5kcy5zb3VuZFVwLnBsYXkoKVxyXG5cclxuXHRtYXRyaXgucyA9IFNUQVJUX1BPSU5UIFxyXG5cdGFyciA9IChkZXN0aW5hdGlvblBvaW50IG1hdHJpeC5zLmxhdCwgbWF0cml4LnMubG9uLCAoaSswLjUpICogU0laRV9NRVRFUiwgOTAgZm9yIGkgaW4gWzAuLi40XSlcclxuXHQjIGVjaG8gYXJyXHJcblxyXG5cdGZvciBpIGluIFswLi4uNF1cclxuXHRcdGZvciBqIGluIFswLi4uNF1cclxuXHRcdFx0a2V5ID0gXCIje0ZJTEVTW2ldfSN7UkFOS1Nbal19XCJcclxuXHRcdFx0bWF0cml4W2tleV0gPSBkZXN0aW5hdGlvblBvaW50IGFycltpXS5sYXQsIGFycltpXS5sb24sIChqKzAuNSkgKiBTSVpFX01FVEVSLCAxODBcclxuXHRcdFx0Z3JpZF9waXhlbFtrZXldID0gWyhpKzAuNSkgKiBTSVpFX1BJWEVMLCAoaiswLjUpICogU0laRV9QSVhFTF1cclxuXHRcdFx0Z3JpZF9tZXRlcltrZXldID0gWyhpKzAuNSkgKiBTSVpFX01FVEVSLCAoaiswLjUpICogU0laRV9NRVRFUl1cclxuXHJcblx0dGFyZ2V0cyA9IF8ua2V5cyBtYXRyaXhcclxuXHR0YXJnZXRzID0gJ2gxIGcxIGYxIGUxIGUyIGYyIGcyIGgyIGgzIGczIGYzIGUzIGU0IGY0IGc0IGg0IHMgcCcuc3BsaXQgJyAnXHJcblx0IyB0YXJnZXRzID0gXy5zaHVmZmxlIHRhcmdldHNcclxuXHRlY2hvIHRhcmdldHNcclxuXHR0YXJnZXQgPSB0YXJnZXRzLnNoaWZ0KClcclxuXHJcblx0IyBrdmFkcmFudGVucyBtaXR0cHVua3RcclxuXHRsYXQgPSAobWF0cml4LmYzLmxhdCArIG1hdHJpeC5nMi5sYXQpIC8gMlxyXG5cdGxvbiA9IChtYXRyaXguZjMubG9uICsgbWF0cml4LmcyLmxvbikgLyAyXHJcblx0bWF0cml4LnAgPSB7bGF0LCBsb259XHJcblx0Z3JpZF9waXhlbC5wID0gWzIqU0laRV9QSVhFTCwtMipTSVpFX1BJWEVMXVxyXG5cdGdyaWRfbWV0ZXIucCA9IFtncmlkX3BpeGVsLnBbMF0gLyBGQUNUT1IsIGdyaWRfcGl4ZWwucFsxXSAvIEZBQ1RPUl1cclxuXHJcblx0ZHVtcCAnVmVyc2lvbjogJyArIFZFUlNJT05cclxuXHJcblx0ZWNobyAnbWF0cml4JyxtYXRyaXhcclxuXHRlY2hvICdncmlkX21ldGVyJyxncmlkX21ldGVyXHJcblx0ZWNobyAnZ3JpZF9waXhlbCcsZ3JpZF9waXhlbFxyXG5cclxuXHQjIGFzc2VydCAyMjQsIHJvdW5kIGRpc3RhbmNlQmV0d2VlbiBtYXRyaXguYzEsIG1hdHJpeC5kM1xyXG5cdCMgYXNzZXJ0ICAyNywgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmMxLCBtYXRyaXguZDNcclxuXHQjIGFzc2VydCAgOTAsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5jMywgbWF0cml4LmQzXHJcblx0IyBhc3NlcnQgMTA4LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYTQsIG1hdHJpeC5kM1xyXG5cdCMgYXNzZXJ0IDIxNCwgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmM0LCBtYXRyaXguYTFcclxuXHQjIGFzc2VydCAyOTcsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5kMiwgbWF0cml4LmIzXHJcblxyXG53aW5kb3cuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAwXHJcblx0ZmlsbCAyNTVcclxuXHQjIHNjYWxlIDJcclxuXHRTUDIgPSBTSVpFX1BJWEVMLzJcclxuXHRzdHJva2UgMjU1XHJcblx0W3B4LHB5XSA9IGdyaWRfcGl4ZWwucFxyXG5cdFt0eCx0eV0gPSBncmlkX3BpeGVsW3RhcmdldF1cclxuXHRsaW5lIDEwICsgcHgsIDEwIC0gcHksIDEwICsgdHgsIDEwICsgdHlcclxuXHRub1N0cm9rZSgpXHJcblxyXG5cdGZvciBrZXkgb2YgZ3JpZF9waXhlbFxyXG5cdFx0W3gseV0gPSBncmlkX3BpeGVsW2tleV1cclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0aWYga2V5ID09IHRhcmdldCB0aGVuIGZpbGwgJ3JlZCdcclxuXHRcdGlmIGtleSA9PSAncCdcclxuXHRcdFx0ZmlsbCAneWVsbG93J1xyXG5cdFx0XHRjaXJjbGUgMTAgKyB4LCAxMCAtIHksIDAuMSAqIFNQMlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIHRleHQga2V5LCA1MCt4LCA1MCt5XHJcblx0XHRcdGNpcmNsZSAxMCArIHgsIDEwICsgeSwgMC4xICogU1AyXHJcblxyXG5cdGZpbGwgJ2dyZWVuJ1xyXG5cdGZvciBpIGluIFswLi4uNF1cclxuXHRcdHRleHQgRklMRVNbaV0sIDEwICsgU1AyICsgaSpTSVpFX1BJWEVMLCAxMCArIDAuMjUqU0laRV9QSVhFTFxyXG5cdFx0dGV4dCBSQU5LU1tpXSwgMTAgKyBTUDIvMiwgMTAgKyBTUDIgKyBpKlNJWkVfUElYRUxcclxuXHJcblx0dGV4dCByb3VuZChiZWFyaW5nQmV0d2VlbihtYXRyaXgucCwgbWF0cml4W3RhcmdldF0pKSArICfCsCcsMTArMC41KlNJWkVfUElYRUwsMy45KlNJWkVfUElYRUxcclxuXHR0ZXh0IHRhcmdldCwgMTArMipTSVpFX1BJWEVMLCAzLjkqU0laRV9QSVhFTFxyXG5cdHRleHQgcm91bmQoZGlzdGFuY2VCZXR3ZWVuKG1hdHJpeC5wLCBtYXRyaXhbdGFyZ2V0XSkpICsgJ20nLDEwKzMuNSpTSVpFX1BJWEVMLDMuOSpTSVpFX1BJWEVMXHJcblxyXG5cdHB1c2goKVxyXG5cdHRleHRBbGlnbiBcImxlZnRcIlxyXG5cdHRleHRTaXplIDAuMiAqIFNJWkVfUElYRUxcclxuXHRmb3IgaSBpbiByYW5nZSBtZXNzYWdlcy5sZW5ndGhcclxuXHRcdHRleHQgbWVzc2FnZXNbaV0sIDAuMSpTSVpFX1BJWEVMLCA0LjIqU0laRV9QSVhFTCArIGkqMC4yICogU0laRV9QSVhFTFxyXG5cdHBvcCgpXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIyBjbGFzcyBQbGF5ZXJcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lLCBAdHg9NCpTSVpFLCBAdHk9NCpTSVpFKSAtPlxyXG4jIFx0XHRAc3BlZWQgPSBTUEVFRFxyXG4jIFx0XHRAcG9zID0gY3JlYXRlVmVjdG9yIDQqU0laRSw0KlNJWkVcclxuIyBcdFx0QHRhcmdldCA9IG5ldyBTcXVhcmUgY3JlYXRlVmVjdG9yIEB0eCwgQHR5XHJcbiMgXHRcdEBob21lID0gQHRhcmdldFxyXG4jIFx0XHRAc3F1YXJlcyA9IFtdICMgbGlzdGEgbWVkIFNxdWFyZSBzb20gZWogcMOlYsO2cmphdHNcclxuIyBcdFx0QHRyYWlsID0gW11cclxuIyBcdFx0QG4gPSAwXHJcbiMgXHRcdEBkaXN0YW5jZSA9IDBcclxuIyBcdFx0QGFzc2lzdHMgPSAwXHJcblxyXG4jIFx0Y2xvc2VzdCA6IC0+XHJcbiMgXHRcdGlmIEBzcXVhcmVzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuIG51bGxcclxuIyBcdFx0YmVzdERpc3QgPSA5OTk5OVxyXG4jIFx0XHRiZXN0U3EgPSBAc3F1YXJlc1swXVxyXG4jIFx0XHRmb3Igc3F1YXJlIGluIEBzcXVhcmVzXHJcbiMgXHRcdFx0ZCA9IHA1LlZlY3Rvci5kaXN0IHNxdWFyZS5wb3MsIEBwb3NcclxuIyBcdFx0XHRpZiBkIDwgYmVzdERpc3RcclxuIyBcdFx0XHRcdGJlc3REaXN0ID0gZFxyXG4jIFx0XHRcdFx0YmVzdFNxID0gc3F1YXJlXHJcbiMgXHRcdGJlc3RTcVxyXG5cclxuIyBcdGFkZCA6IChzcSkgLT5cclxuIyBcdFx0QHNxdWFyZXMucHVzaCBzcVxyXG4jIFx0XHRAdGFyZ2V0ID0gQGNsb3Nlc3QoKVxyXG5cclxuIyBcdGRyYXdUYWlsIDogLT5cclxuIyBcdFx0aWYgQG4gJSAoMTAvU1BFRUQpID09IDAgdGhlbiBAdHJhaWwucHVzaCBjcmVhdGVWZWN0b3IgQHBvcy54LCBAcG9zLnlcclxuIyBcdFx0QG4gKz0gMVxyXG4jIFx0XHRpZiBAdHJhaWwubGVuZ3RoID4gTUFYVFJBSUwgdGhlbiBAdHJhaWwuc2hpZnQoKVxyXG4jIFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLkB0cmFpbC5sZW5ndGhdXHJcbiMgXHRcdFx0c2l6ZSA9IG1hcCBpLCAwLCBAdHJhaWwubGVuZ3RoIC0gMSwgNSwxNVxyXG4jIFx0XHRcdG5vRmlsbCgpXHJcbiMgXHRcdFx0ZWxsaXBzZSBAdHJhaWxbaV0ueCwgQHRyYWlsW2ldLnksIHNpemUsIHNpemVcclxuXHJcbiMgXHRkcmF3IDogKCkgLT5cclxuIyBcdFx0dGFyZ2V0ID0gQHRhcmdldC5wb3NcclxuIyBcdFx0ZHggPSB0YXJnZXQueCAtIEBwb3MueFxyXG4jIFx0XHRkeSA9IHRhcmdldC55IC0gQHBvcy55XHJcbiMgXHRcdGQgPSBzcXJ0IGR4KmR4K2R5KmR5XHJcblxyXG4jIFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cclxuIyBcdFx0IyBpZiBAbmFtZSBpbiAnQUJDRCdcclxuIyBcdFx0bGluZSB0YXJnZXQueCwgdGFyZ2V0LnksIEBwb3MueCwgQHBvcy55XHJcblxyXG4jIFx0XHRzdGVwID0gcDUuVmVjdG9yLnN1Yih0YXJnZXQsIEBwb3MpLnNldE1hZyBtaW4gQHNwZWVkLCBkXHJcbiMgXHRcdGlmIGQgPCBAc3BlZWQgIyB0YXJnZXQgbsOlZGRcclxuIyBcdFx0XHRpZiBub3QgQHRhcmdldC5kb25lXHJcbiMgXHRcdFx0XHRAdGFyZ2V0LmRvbmUgPSB0cnVlXHJcbiMgXHRcdFx0XHRAdGFyZ2V0LmNhcnJpZXIgPSBAbmFtZVxyXG5cclxuIyBcdFx0XHRcdCMgU2tpY2thIGRyYWdldCBvbSBiw6VkZSBzdGFydC5kb25lIG9jaCBzbHV0LmRvbmVcclxuIyBcdFx0XHRcdGZvciBrZXkgb2YgZ2FtZXNcclxuIyBcdFx0XHRcdFx0ZyA9IGdhbWVzW2tleV1cclxuIyBcdFx0XHRcdFx0aWYgZy5tb3ZlIGFuZCBnLm1vdmUuc3RhcnQuZG9uZSBhbmQgZy5tb3ZlLnN0b3BwLmRvbmVcdFx0XHRcdFx0XHRcclxuIyBcdFx0XHRcdFx0XHRkdXJhdGlvbiA9ICgxNS9TUEVFRCAqIChwZXJmb3JtYW5jZS5ub3coKSAtIGcubW92ZS5zdGFydC50aW1lKS8xMDAwKVxyXG5cclxuIyBcdFx0XHRcdFx0XHRpZiBnLmluZGV4ICUgMiA9PSAwIHRoZW4gZy5kdXJhdGlvbiArPSBkdXJhdGlvblxyXG4jIFx0XHRcdFx0XHRcdGlmIGcubW92ZS5zdGFydC5jYXJyaWVyID09IGcubW92ZS5zdG9wcC5jYXJyaWVyXHJcbiMgXHRcdFx0XHRcdFx0XHRjYXJyaWVycyA9IGcubW92ZS5zdGFydC5jYXJyaWVyXHJcbiMgXHRcdFx0XHRcdFx0ZWxzZSBcclxuIyBcdFx0XHRcdFx0XHRcdGNhcnJpZXJzID0gZy5tb3ZlLnN0YXJ0LmNhcnJpZXIgKyBnLm1vdmUuc3RvcHAuY2FycmllclxyXG5cclxuIyBcdFx0XHRcdFx0XHRpZiBnLm1vdmUuc3RhcnQuY2FycmllciBpbiAnQUJDRCdcclxuIyBcdFx0XHRcdFx0XHRcdCMgZWNobyAnYXNzaXN0czogJyxnLm1vdmUuc3RhcnQuY2FycmllcixnLm1vdmUuc3RvcHAuY2FycmllclxyXG4jIFx0XHRcdFx0XHRcdFx0cGxheWVyc1tnLm1vdmUuc3RhcnQuY2Fycmllcl0uYXNzaXN0cyArPSAxXHJcbiMgXHRcdFx0XHRcdFx0XHRwbGF5ZXJzW2cubW92ZS5zdG9wcC5jYXJyaWVyXS5hc3Npc3RzICs9IDFcclxuIyBcdFx0XHRcdFx0XHRcdCMgZWNobyBnLm5hbWUsIGcubW92ZS51Y2ksIEBuYW1lLCBnLm1vdmUuc3RhcnQuY2FycmllciArIGcubW92ZS5zdG9wcC5jYXJyaWVyXHJcblxyXG4jIFx0XHRcdFx0XHRcdGcuY2hlc3MubW92ZSB7IGZyb206IGcubW92ZS51Y2kuc2xpY2UoMCwgMiksIHRvOiBnLm1vdmUudWNpLnNsaWNlKDIsIDQpIH1cclxuXHJcbiMgXHRcdFx0XHRcdFx0dGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlNFTCN7Zy5uYW1lfVwiKVxyXG4jIFx0XHRcdFx0XHRcdHRkLmlubmVySFRNTCArPSBcIiN7Zy5zYW5fbW92ZXNbZy5jaGVzcy5oaXN0b3J5KCkubGVuZ3RoLTFdfSBieSAje2NhcnJpZXJzfSAoI3tkdXJhdGlvbi50b0ZpeGVkKCl9IHMpPGJyPlwiXHJcblxyXG4jIFx0XHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9hcmQje2cubmFtZX1cIikuaW5uZXJIVE1MID0gc2hyaW5rIGcuY2hlc3MuYXNjaWkoKVxyXG4jIFx0XHRcdFx0XHRcdHVwZGF0ZUluZm8gZy5uYW1lLCBAXHJcblxyXG4jIFx0XHRcdFx0XHRcdGcucXVldWUucHVzaCBnLm1vdmVcclxuIyBcdFx0XHRcdFx0XHRnLm1vdmUgPSBudWxsXHJcbiMgXHRcdFx0XHRcdFx0aWYgZy5pbml0TW92ZSgpID09IGZhbHNlXHJcbiMgXHRcdFx0XHRcdFx0XHRzdG9wcFRpbWUgPSBEYXRlLm5vdygpXHJcbiMgXHRcdFx0XHRcdFx0XHQjIGVjaG8gJ2RvbmUnLCAoc3RvcHBUaW1lLXN0YXJ0VGltZSkvMTAwMFxyXG5cclxuIyBcdFx0XHRAc3F1YXJlcyA9IF8uZmlsdGVyIEBzcXVhcmVzLCAoc3EpIC0+IHNxLmRvbmUgPT0gZmFsc2VcclxuXHJcbiMgXHRcdFx0IyBow6RtdGEgbsOkcm1hc3RlIHVwcGRyYWcgb20gc8OlZGFudCBmaW5uc1xyXG4jIFx0XHRcdGlmIEBzcXVhcmVzLmxlbmd0aCA+IDBcclxuIyBcdFx0XHRcdEB0YXJnZXQgPSBAY2xvc2VzdCgpXHJcbiMgXHRcdFx0XHRkID0gcDUuVmVjdG9yLmRpc3QgQHBvcyxAdGFyZ2V0LnBvc1xyXG4jIFx0XHRcdFx0QGRpc3RhbmNlICs9IGRcclxuXHJcbiMgXHRcdEBwb3MuYWRkIHN0ZXBcclxuXHJcbiMgXHRcdGZvciBzcXVhcmUgaW4gQHNxdWFyZXNcclxuIyBcdFx0XHRpZiBAbmFtZSBpbiAnQUJDRCdcclxuIyBcdFx0XHRcdGZpbGwgJ3JlZCdcclxuIyBcdFx0XHRlbHNlXHJcbiMgXHRcdFx0XHRmaWxsICdibGFjaydcclxuIyBcdFx0XHRjaXJjbGUgc3F1YXJlLnBvcy54LCBzcXVhcmUucG9zLnksIDEwXHJcblxyXG4jIFx0XHQjIGlmIEBuYW1lIGluICdBQkNEJ1xyXG4jIFx0XHRAZHJhd1RhaWwoKVxyXG4jIFx0XHRpZiBAbmFtZSBpbiAnQUJDRCcgdGhlbiBmaWxsICd5ZWxsb3cnIGVsc2UgZmlsbCAnYmxhY2snXHJcbiMgXHRcdHN0cm9rZVdlaWdodCAxXHJcbiMgXHRcdGNpcmNsZSBAcG9zLngsQHBvcy55LDAuNCpTSVpFXHJcbiMgXHRcdGlmIEBuYW1lIGluICdBQkNEJyB0aGVuIGZpbGwgJ2JsYWNrJyBlbHNlIGZpbGwgJ3llbGxvdydcclxuIyBcdFx0bm9TdHJva2UoKVxyXG4jIFx0XHQjIGZpbGwgJ2JsYWNrJ1xyXG4jIFx0XHR0ZXh0IEBuYW1lLCBAcG9zLngsIEBwb3MueVxyXG5cclxuIyB1Y2kycG9zID0gKHVjaSkgLT4gIyB0IGV4IGUyZTQgPT4gW1syMjUsNzVdLFsyMjUsMTc1XV1cclxuIyBcdHN0YXJ0eCA9IHVjaVswXVxyXG4jIFx0c3RhcnR5ID0gdWNpWzFdXHJcbiMgXHRzdG9wcHggPSB1Y2lbMl1cclxuIyBcdHN0b3BweSA9IHVjaVszXVxyXG4jIFx0cmVzdWx0ID0gW11cclxuIyBcdHggPSBGSUxFUy5pbmRleE9mIHN0YXJ0eFxyXG4jIFx0eSA9IDcgLSBSQU5LUy5pbmRleE9mIHN0YXJ0eVxyXG4jIFx0cmVzdWx0LnB1c2ggY3JlYXRlVmVjdG9yIFNJWkUvMiArIFNJWkUqeCwgU0laRS8yICsgU0laRSp5XHJcbiMgXHR4ID0gRklMRVMuaW5kZXhPZiBzdG9wcHhcclxuIyBcdHkgPSA3IC0gUkFOS1MuaW5kZXhPZiBzdG9wcHlcclxuIyBcdHJlc3VsdC5wdXNoIGNyZWF0ZVZlY3RvciBTSVpFLzIgKyBTSVpFKngsIFNJWkUvMiArIFNJWkUqeVxyXG4jIFx0cmVzdWx0XHJcblxyXG4jIGNsYXNzIEdhbWVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lLCBwZ24sIEBsaW5rKSAtPlxyXG4jIFx0XHRAY2hlc3MgPSBuZXcgQ2hlc3MoKVxyXG4jIFx0XHRAY2hlc3MubG9hZF9wZ24gcGduXHJcbiMgXHRcdEBzYW5fbW92ZXMgPSBAY2hlc3MuaGlzdG9yeSgpICMgW05mMywgLi4uXVxyXG4jIFx0XHRAdWNpX21vdmVzID0gKG1vdmUuZnJvbSArIG1vdmUudG8gZm9yIG1vdmUgaW4gQGNoZXNzLmhpc3RvcnkoeyB2ZXJib3NlOiB0cnVlIH0pKSAjIFtnMWYzLCAuLi5dXHJcbiMgXHRcdEBtb3ZlID0gbnVsbFxyXG4jIFx0XHRAcXVldWUgPSBbXVxyXG4jIFx0XHRAZHVyYXRpb24gPSAwXHJcbiMgXHRcdEBjaGVzcy5yZXNldCgpXHJcbiMgXHRcdEBpbmRleCA9IC0xXHJcbiMgXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluayN7QG5hbWV9XCIpLmlubmVySFRNTCA9IFwiPGEgaHJlZj1cXFwiI3tAbGlua31cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5MaW5rPC9hPlwiXHJcblxyXG4jIFx0aW5pdE1vdmUgOiAtPlxyXG4jIFx0XHRpZiBAaW5kZXggPj0gQHVjaV9tb3Zlcy5sZW5ndGggLSAxIHRoZW4gcmV0dXJuIGZhbHNlXHJcbiMgXHRcdEBpbmRleCArPSAxXHJcbiMgXHRcdGlmIEBtb3ZlICE9IG51bGwgXHJcbiMgXHRcdFx0I2VjaG8gJ3RvbyBxdWljayEnXHJcbiMgXHRcdFx0cmV0dXJuIGZhbHNlXHJcbiMgXHRcdEBtb3ZlID0gbmV3IE1vdmUgQHVjaV9tb3Zlc1tAaW5kZXhdLCBAbmFtZVxyXG5cclxuIyBcdFx0c3RhcnQgPSBAbW92ZS51Y2kuc2xpY2UgMCwyXHJcbiMgXHRcdHN0b3BwID0gQG1vdmUudWNpLnNsaWNlIDIsNFxyXG5cclxuIyBcdFx0YW50YWwgPSAnQUJDRCcuaW5kZXhPZiBAbmFtZVxyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLmFudGFsXSBcclxuIyBcdFx0XHRzdGFydCA9IHJvdGF0ZSBzdGFydFxyXG4jIFx0XHRcdHN0b3BwID0gcm90YXRlIHN0b3BwXHJcblxyXG4jIFx0XHRpZiBAaW5kZXggJSAyID09IDBcclxuIyBcdFx0XHRhID0gXCIxMjM0XCJcclxuIyBcdFx0XHRiID0gXCI1Njc4XCJcclxuIyBcdFx0XHQjIERlbGEgdXQgc3RhcnQgb2NoIHN0b3BwIHRpbGwgcsOkdHQgc3BlbGFyZSBiZXJvZW5kZSBww6Uga3ZhZHJhbnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuQS5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuQi5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuQy5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRC5hZGQgQG1vdmUuc3RhcnRcclxuXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkEuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkIuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkMuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkQuYWRkIEBtb3ZlLnN0b3BwXHJcblxyXG4jIFx0XHRlbHNlXHJcbiMgXHRcdFx0YSA9IFwiMTIzNFwiXHJcbiMgXHRcdFx0YiA9IFwiNTY3OFwiXHJcbiMgXHRcdFx0IyBIYW50ZXJhIG1vdHN0w6VuZGFyZW5cclxuIyBcdFx0XHQjIERlbGEgdXQgc3RhcnQgb2NoIHN0b3BwIHRpbGwgcsOkdHQgc3BlbGFyZSBiZXJvZW5kZSBww6Uga3ZhZHJhbnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuRy5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRS5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuSC5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRi5hZGQgQG1vdmUuc3RhcnRcclxuXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkcuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkUuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkguYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkYuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdHRydWVcclxuXHJcbiMgY2xhc3MgU3F1YXJlIFxyXG4jIFx0Y29uc3RydWN0b3IgOiAoQHBvcywgQHVjaT1cIlwiLCBAY2Fycmllcj1cIlwiKSAtPiAjIFZlY3RvclxyXG4jIFx0XHRAZG9uZSA9IGZhbHNlXHJcbiMgXHRcdEB0aW1lID0gcGVyZm9ybWFuY2Uubm93KClcclxuXHRcclxuIyAjIHJvdGF0ZSA9IChzcSkgLT4gRklMRVNbOC1zcVsxXV0gKyBTdHJpbmcgMSArIEZJTEVTLmluZGV4T2Ygc3FbMF1cclxuIyAjIGVjaG8gXCJnM1wiID09IHJvdGF0ZSBcImMyXCJcclxuIyAjIGVjaG8gXCJoMVwiID09IHJvdGF0ZSBcImExXCJcclxuIyAjIGVjaG8gXCJoOFwiID09IHJvdGF0ZSByb3RhdGUgXCJhMVwiXHJcbiMgIyBlY2hvIFwiYThcIiA9PSByb3RhdGUgcm90YXRlIHJvdGF0ZSBcImExXCJcclxuIyAjIGVjaG8gXCJhMVwiID09IHJvdGF0ZSByb3RhdGUgcm90YXRlIHJvdGF0ZSBcImExXCJcclxuXHJcbiMgIyBjb29yZGluYXRlcyA9IChzcSkgLT5cclxuIyAjIFx0eCA9IEZJTEVTLmluZGV4T2Ygc3FbMF1cclxuIyAjIFx0eSA9IFJBTktTLmluZGV4T2Ygc3FbMV1cclxuIyAjIFx0W3gsIDcteV1cclxuIyAjIGVjaG8gXy5pc0VxdWFsIFs0LDRdLCBjb29yZGluYXRlcyBcImU0XCJcclxuIyAjIGVjaG8gXy5pc0VxdWFsIFswLDddLCBjb29yZGluYXRlcyBcImExXCJcclxuXHJcbiMgIyB0b1ZlY3RvciA9IChbeCx5XSkgLT5cclxuIyAjIFx0Y3JlYXRlVmVjdG9yIFNJWkUvMiArIFNJWkUqeCwgU0laRS8yICsgU0laRSp5XHJcbiMgIyBlY2hvIHRvVmVjdG9yIFszLDRdXHJcblxyXG4jIGNsYXNzIE1vdmVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEB1Y2ksIEBuYW1lKSAtPiAjIGUyZTQsIEJcclxuIyBcdFx0YW50YWwgPSBcIkFCQ0RcIi5pbmRleE9mIEBuYW1lXHJcbiMgXHRcdHN0YXJ0ID0gQHVjaS5zbGljZSAwLDJcclxuIyBcdFx0c3RvcHAgPSBAdWNpLnNsaWNlIDIsNFxyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLmFudGFsXVxyXG4jIFx0XHRcdHN0YXJ0ID0gcm90YXRlIHN0YXJ0XHJcbiMgXHRcdFx0c3RvcHAgPSByb3RhdGUgc3RvcHBcclxuIyBcdFx0c3RhcnQgPSB0b1ZlY3RvciBjb29yZGluYXRlcyBzdGFydFxyXG4jIFx0XHRzdG9wcCA9IHRvVmVjdG9yIGNvb3JkaW5hdGVzIHN0b3BwXHJcbiMgXHRcdEBwb3MgPSBbc3RhcnQsIHN0b3BwXVxyXG4jIFx0XHRAc3RhcnQgPSBuZXcgU3F1YXJlIHN0YXJ0LCBAdWNpXHJcbiMgXHRcdEBzdG9wcCA9IG5ldyBTcXVhcmUgc3RvcHAsIEB1Y2lcclxuIl19
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee