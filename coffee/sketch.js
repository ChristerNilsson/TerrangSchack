// Generated by CoffeeScript 2.7.0
var BEARINGLIST, ChessWrapper, DIGITS, DISTLIST, FACTOR, LETTERS, PIECES, R, RADIUS_METER, RADIUS_PIXEL, SIZE_METER, SIZE_PIXEL, START_POINT, TIME, VERSION, assert, bearingBetween, board2, chessWrapper, closestDistance, decreaseQueue, deltaXYBetweenPoints, destinationPoint, distanceBetween, dump, echo, gpsCount, grid_meter, grid_pixel, increaseQueue, initSounds, makePoint, matrix, messages, range, sayDist, sayDistance, sounds, startTracking, started, target, targets, watchID, wp, wperr,
  indexOf = [].indexOf;

VERSION = 71;

START_POINT = {
  lat: 59.2702,
  lon: 18.1303 // Kaninparken
};

SIZE_PIXEL = 0; // En schackrutas storlek i pixlar

SIZE_METER = 0; // En schackrutas storlek i meter

FACTOR = 1;

RADIUS_METER = 0; // meter. Maxavstånd mellan spelaren och target

RADIUS_PIXEL = 0;

TIME = [
  90,
  30 // base in minutes, increment in seconds
];

R = 6371e3; // Jordens radie i meter

BEARINGLIST = '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'.split(' ');

DISTLIST = '2 4 6 8 10 12 14 16 18 20 25 30 35 40 45 50 60 70 80 90 100 120 140 160 180 200 250 300 350 400 450 500 600 700 800 900 1000 1200 1400 1600 1800 2000 2500 3000 3500 4000 4500 5000 6000 7000 8000 9000'.split(' ');

//################
LETTERS = 'abcdefgh';

DIGITS = '87654321';

PIECES = {};

chessWrapper = null;

targets = [];

target = "";

messages = [];

sounds = {};

started = false;

matrix = {}; // WGS84

grid_meter = {};

grid_pixel = {};

echo = console.log;

range = _.range;

watchID = null;

gpsCount = 0;

dump = function(msg) {
  messages.unshift(msg); // nyaste överst
  if (messages.length > 20) {
    return messages.pop(); // äldsta droppas
  }
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

closestDistance = (m) => {
  var bestDist, bestValue, d, i, len;
  bestDist = 999999;
  bestValue = 0;
  for (i = 0, len = DISTLIST.length; i < len; i++) {
    d = DISTLIST[i];
    if (abs(m - d) < bestDist) {
      bestDist = abs(m - d);
      bestValue = d;
    }
  }
  return bestValue;
};

sayDist = function(m) { // m är en distans, eventuellt i DISTLIST
  dump.store("");
  dump.store(`sayDistance ${m} ${JSON.stringify(distanceQ)}`);
  m = closestDistance(m);
  console.log(m, 'started');
  return distanceSounds[m].play();
};

// distanceSounds[m].onended () => console.log m, "ended"
sayDistance = function(a, b) { // a is newer (meter)
  var d, i, len;
  // if a border is crossed, produce a distance
  dump.store(`D ${round(a, 1)} ${round(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (i = 0, len = DISTLIST.length; i < len; i++) {
    d = DISTLIST[i];
    d = parseInt(d);
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

decreaseQueue = function() {
  var distance, distanceSaid, msg;
  console.log('decreaseQueue', bearingQ, distanceQ);
  if (bearingQ.length === 0) {
    if (distanceQ.length === 0) {

    } else {
      console.log('distance', distanceQ);
      msg = _.last(distanceQ); // latest
      distanceQ.clear(); // ignore the rest
      //arr = msg.split ' '
      if (general.DISTANCE || msg < LIMIT) {
        distance = msg;
        //errors.push "distance #{msg}"
        if (distanceSaid !== distance) {
          sayDist(distance);
        }
        return distanceSaid = distance;
      }
    }
  } else {
    console.log('bearing', bearingQ);
    msg = _.last(bearingQ); // latest
    //errors.push "bearing #{msg}"
    bearingQ.clear(); // ignore the rest
    if (indexOf.call(BEARINGLIST, msg) >= 0) {
      return bearingSounds[msg].play();
    }
  }
};

increaseQueue = function(p) {
  var bearingac, gpsLat, gpsLon, sDistance;
  // if crossHair == null then return

  // [trgLon,trgLat] = b2w.convert crossHair[0],crossHair[1]

  // a = LatLon p.coords.latitude, p.coords.longitude # newest
  // b = LatLon gpsLat, gpsLon
  // c = LatLon trgLat, trgLon # target

  // distac = a.distanceTo c # meters
  // distbc = b.distanceTo c
  // distance = (distac - distbc)/DIST
  bearingac = a.bearingTo(c);
  //bearingbc = b.bearingTo c
  if (distac >= LIMIT) {
    bearing.update(bearingac); // sayBearing bearingac,bearingbc else ""
  }
  sDistance = sayDistance(distac, distbc);
  if (sDistance !== "") {
    distanceQ.push(sDistance); // Vi kan inte säga godtyckligt avstånd numera
  }
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = round(p.coords.latitude, 6);
    return gpsLon = round(p.coords.longitude, 6);
  }
};

wp = (p) => {
  //sounds.soundDown.play()
  gpsCount += 1;
  matrix.p.lat = p.coords.latitude;
  matrix.p.lon = p.coords.longitude;
  grid_meter.p = makePoint(matrix.s, matrix.p);
  grid_pixel.p = [grid_meter.p[0] * FACTOR, grid_meter.p[1] * FACTOR];
  dump(`${gpsCount} ${round(bearingBetween(matrix.p, matrix[target]))}° ${target} ${round(distanceBetween(matrix.p, matrix[target]))}m ${round(p.coords.latitude, 6)} ${round(p.coords.longitude, 6)}`);
  
  // om man är inom RADIUS meter från målet, byt mål
  if (target === '') {
    return;
  }
  if (RADIUS_METER < distanceBetween(matrix.p, matrix[target])) {
    return;
  }
  if (targets.length === 0) {
    target = '';
    return;
  }
  sounds.soundDown.play();
  return target = targets.shift();
};

wperr = function(err) {
  return dump(`Fel: ${err.message}`);
};

// window.touchStarted = () ->
// 	echo mouseX, mouseY
// 	if mouseY > 8 * SIZE_PIXEL
// 		if not started
// 			userStartAudio()
// 			startTracking()
// 			started = true
// 		sounds.soundDown.play()
// 	else
// 		letter = LETTERS[round mouseX / SIZE_PIXEL - 0.5]
// 		digit  =  DIGITS[round mouseY / SIZE_PIXEL - 0.5]
// 		echo letter + digit
// 		chessWrapper.clickSquare letter + digit

// 	return false
startTracking = function() {
  if (!navigator.geolocation) {
    dump("Geolocation stöds inte i din webbläsare.");
    return;
  }
  dump("Begär platsdata...");
  return watchID = navigator.geolocation.watchPosition(wp, wperr, {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 1000
  });
};

distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return (θ * 180 / Math.PI + 360) % 360; // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    -dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

initSounds = function() {
  var i, len, name, ref, results, sound;
  sounds = {};
  ref = "soundDown soundUp".split(' ');
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    sound = loadSound(`sounds/${name}.wav`);
    sound.setVolume(1.0);
    sound.pan(0);
    results.push(sounds[name] = sound);
  }
  return results;
};

// window.preload = ->
// 	initSounds()
// 	for piece in "KQRBNP"	
// 		PIECES["B#{piece}"] = loadImage "./pieces/B#{piece}.svg"
// 		PIECES["W#{piece}"] = loadImage "./pieces/W#{piece}.svg"

  // window.setup = ->
// 	createCanvas windowWidth-5, windowHeight-5, document.getElementById "canvas"

  // 	rectMode CENTER

  // 	SIZE_PIXEL = width/8 # En schackrutas storlek i pixlar
// 	SIZE_METER = 10 # En schackrutas storlek i meter
// 	FACTOR = SIZE_PIXEL / SIZE_METER
// 	RADIUS_METER = 0.25 * SIZE_METER # meter. Maxavstånd mellan spelaren och target
// 	RADIUS_PIXEL = 0.25 * SIZE_PIXEL

  // 	grid_meter.s = [3.5*SIZE_METER, 3.5*SIZE_METER] # origo, samlingspunkt
// 	grid_pixel.s = [3.5*SIZE_PIXEL, 3.5*SIZE_PIXEL] # origo, samlingspunkt

  // 	grid_meter.p = [0.5*SIZE_METER, 0.5*SIZE_METER] # origo, samlingspunkt
// 	grid_pixel.p = [0.5*SIZE_PIXEL, 0.5*SIZE_PIXEL] # origo, samlingspunkt

  // 	textAlign CENTER,CENTER
// 	textSize 0.04 * height
// 	noFill()
// 	frameRate 2

  // 	matrix.s = START_POINT 
// 	arr = (destinationPoint matrix.s.lat, matrix.s.lon, i * SIZE_METER, 90 for i in [0...8])

  // 	for i in range 8
// 		for j in range 8
// 			key = "#{LETTERS[i]}#{DIGITS[j]}"
// 			matrix[key] = destinationPoint arr[i].lat, arr[i].lon, j * SIZE_METER, 180
// 			grid_pixel[key] = [i * SIZE_PIXEL, j * SIZE_PIXEL]
// 			grid_meter[key] = [i * SIZE_METER, j * SIZE_METER]

  // 	targets = _.keys matrix
// 	targets = 's a1 a8 h1 h8 p'.split ' '
// 	# targets = _.shuffle targets
// 	echo targets
// 	target = targets.shift()

  // 	# NW hörnet
// 	lat = (matrix.a8.lat + matrix.b7.lat) / 2
// 	lon = (matrix.a8.lon + matrix.b7.lon) / 2
// 	matrix.p = {lat, lon}
// 	# grid_pixel.p = [0.5*SIZE_PIXEL, 0.5*SIZE_PIXEL]
// 	# grid_meter.p = [grid_pixel.p[0] / FACTOR, grid_pixel.p[1] / FACTOR]

  // 	dump "V:#{VERSION} S:#{SIZE_METER}m R:#{RADIUS_METER}m #{START_POINT.lat} #{START_POINT.lon}"  

  // 	echo 'matrix',matrix
// 	echo 'grid_meter',grid_meter
// 	echo 'grid_pixel',grid_pixel

  // 	# assert 224, round distanceBetween matrix.c1, matrix.d3
// 	# assert  27, round bearingBetween matrix.c1, matrix.d3
// 	# assert  90, round bearingBetween matrix.c3, matrix.d3
// 	# assert 108, round bearingBetween matrix.a4, matrix.d3
// 	# assert 214, round bearingBetween matrix.c4, matrix.a1
// 	# assert 297, round bearingBetween matrix.d2, matrix.b3

  // window.draw = ->
// 	background 0
// 	OX = (width - 7*SIZE_PIXEL) / 2 # offset x
// 	OY = 2*RADIUS_PIXEL # offset y

  // 	keys = Object.keys(grid_pixel).sort()
// 	for key in keys
// 		[x,y] = grid_pixel[key]
// 		stroke 'white'
// 		if key == target then stroke 'red'
// 		if key == 'p' then stroke 'yellow'
// 		if key in [target, 'p'] 
// 			noFill()
// 			strokeWeight 2
// 			circle OX + x, OY + y, 2*RADIUS_PIXEL
// 		else
// 			letter = LETTERS.indexOf key[0]
// 			digit = DIGITS.indexOf key[1]
// 			fill if (letter+digit) % 2 == 0 then 'gray' else 'lightgray'
// 			if chessWrapper.state.from == LETTERS[letter] + DIGITS[digit]
// 				fill 'green'
// 			noStroke()
// 			rect OX + x, OY + y, 4*RADIUS_PIXEL

  // 	stroke 'black'
// 	[px,py] = grid_pixel.p
// 	[tx,ty] = grid_pixel[target]
// 	line OX + px, OY + py, OX + tx, OY + ty

  // 	noStroke()
// 	push()
// 	fill '#444'
// 	textSize 0.02 * height
// 	for i in range 8
// 		text LETTERS[i], 10 + i*SIZE_PIXEL, 55 + 7 * SIZE_PIXEL # letters
// 		text DIGITS[i],  width-8,           10 + (i+0.043)*SIZE_PIXEL # digits
// 	pop()

  // 	push()
// 	fill 'yellow'
// 	textSize 2*0.03 * height
// 	textAlign LEFT
// 	text round(bearingBetween(matrix.p, matrix[target])) + '°', 0, 8.5 * SIZE_PIXEL
// 	textAlign CENTER
// 	text target, 0.5 * width, 8.5 * SIZE_PIXEL
// 	textAlign RIGHT
// 	text round(distanceBetween(matrix.p, matrix[target])) + 'm', width, 8.5 * SIZE_PIXEL
// 	pop()

  // 	push()
// 	fill '#777'
// 	textAlign LEFT
// 	textSize 0.034 * height
// 	for i in range messages.length
// 		text messages[i], 0, 9.3 * SIZE_PIXEL + i * 0.04 * height
// 	pop()

  // 	letters = "RNBQKBNR"
// 	for i in range 8
// 		image PIECES['B'+letters[i]], i*SIZE_PIXEL, 0*SIZE_PIXEL, SIZE_PIXEL, SIZE_PIXEL
// 		image PIECES['BP'],           i*SIZE_PIXEL, 1*SIZE_PIXEL, SIZE_PIXEL, SIZE_PIXEL
// 		image PIECES['WP'],           i*SIZE_PIXEL, 6*SIZE_PIXEL, SIZE_PIXEL, SIZE_PIXEL
// 		image PIECES['W'+letters[i]], i*SIZE_PIXEL, 7*SIZE_PIXEL, SIZE_PIXEL, SIZE_PIXEL
ChessWrapper = class ChessWrapper {
  constructor() {
    var moves;
    this.chess = new Chess();
    moves = this.chess.moves({
      verbose: true
    });
    echo(moves.map(function(m) {
      return `${m.from}${m.to}`;
    }));
    this.state = {
      from: null,
      to: null,
      fromReached: false,
      toReached: false,
      centerReached: false
    };
  }

  // highlightFrom : () ->
  // highlightTo : () ->
  clickSquare(square) {
    if (!this.state.from) {
      return this.state.from = square;
    // @highlightFrom square
    } else if (!this.state.to) {
      this.state.to = square;
      if (this.validateMove(this.state.from, this.state.to)) {
        // @highlightTo square
        return console.log("Drag godkänt, vänta på fysiska besök");
      } else {
        return console.log("Ogiltigt drag, börjar om");
      }
    }
  }

  // @resetState()
  validateMove(from, to) {
    var moves;
    moves = this.chess.moves({
      square: from,
      verbose: true
    });
    return moves.some(function(m) {
      return m.to === to;
    });
  }

  resetState() {
    this.state = {
      from: null,
      to: null,
      fromReached: false,
      toReached: false,
      centerReached: false
    };
    return this.clearHighlights();
  }

  gpsPositionReached(squareName) {
    if (squareName === this.state.from && !this.state.fromReached) {
      this.state.fromReached = true;
      return console.log("Från-ruta besökt");
    } else if (squareName === this.state.to && this.state.fromReached && !this.state.toReached) {
      this.state.toReached = true;
      return console.log("Till-ruta besökt");
    } else if (squareName === "center" && this.state.toReached && !this.state.centerReached) {
      this.state.centerReached = true;
      console.log("Centrumrutan besökt");
      return this.completeMove();
    }
  }

  completeMove() {
    this.chess.move({
      from: this.state.from,
      to: this.state.to
    });
    updateBoard();
    this.toggleClock();
    return this.resetState();
  }

  toggleClock() {
    return console.log("Schackklocka växlas!");
  }

};

// board = Chessboard 'myBoard','start'
// echo board
board2 = Chessboard('myBoard', 'start');

// draggable: true
// dropOffBoard: 'trash'
// sparePieces: true
$('#startBtn').on('click', board2.start);

$('#clearBtn').on('click', board2.clear);

// chessWrapper = new ChessWrapper
// echo chessWrapper

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee