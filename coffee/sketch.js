// Generated by CoffeeScript 2.7.0
var FILES, Game, Move, Player, R, RANKS, SIZE, Square, VERSION, assert, bearingBetween, deltaXYBetweenPoints, destinationPoint, distanceBetween, echo, grid, locationUpdate, makePoint, matrix, target, targets, uci2pos,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

VERSION = 1;

SIZE = 100; // meter

FILES = 'abcd';

RANKS = '1234';

R = 6371e3; // Jordens radie i meter

echo = console.log;

targets = [];

target = "";

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

locationUpdate = function(p) {
  var error;
  try {
    echo('locationUpdate', p);
    matrix.p.lat = p.coords.latitude;
    matrix.p.lon = p.coords.longitude;
    grid.p = makePoint(matrix.p, matrix.s);
    // om man är högst 5 meter från målet, byt mål
    if (target === '') {
      return;
    }
    if (5 < distanceBetween(matrix.p, matrix[target])) {
      return;
    }
    if (targets.length === 0) {
      target = '';
      return;
    }
    return target = targets.pop();
  } catch (error1) {
    error = error1;
    return echo(error);
  }
};

distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return modulo(180 - θ * 180 / Math.PI, 360); // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

matrix = {}; // WGS84

grid = {}; // meter

grid.s = [
  0,
  0 // origo, samlingspunkt
];

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

window.setup = function() {
  var arr, i, j, k, key, l, lat, lon;
  createCanvas(8 * SIZE, 8 * SIZE, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  textSize(40);
  noStroke();
  matrix.s = {
    lat: 59.273361,
    lon: 18.16675
  };
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 4; i = ++k) {
      results.push(destinationPoint(matrix.s.lat, matrix.s.lon, (i + 0.5) * SIZE, 90));
    }
    return results;
  })();
  echo(arr);
  for (i = k = 0; k < 4; i = ++k) {
    for (j = l = 0; l < 4; j = ++l) {
      key = `${FILES[i]}${RANKS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, (j + 0.5) * SIZE, 180);
      grid[key] = [100 * i - 350, 100 * j - 350];
    }
  }
  targets = _.keys(matrix);
  targets = _.shuffle(targets);
  echo(targets);
  target = 's';
  // kvadrantens mittpunkt
  lat = (matrix.b3.lat + matrix.c2.lat) / 2;
  lon = (matrix.b3.lon + matrix.c2.lon) / 2;
  matrix.p = {lat, lon};
  echo('matrix', matrix);
  echo('grid', grid);
  assert(224, round(distanceBetween(matrix.c1, matrix.d3)));
  assert(27, round(bearingBetween(matrix.c1, matrix.d3)));
  assert(90, round(bearingBetween(matrix.c3, matrix.d3)));
  assert(108, round(bearingBetween(matrix.a4, matrix.d3)));
  assert(214, round(bearingBetween(matrix.c4, matrix.a1)));
  assert(297, round(bearingBetween(matrix.d2, matrix.b3)));
  return grid.p = [-200, -200];
};

window.draw = function() {
  var i, k, key, x, y;
  background(0);
  fill(255);
  stroke(255);
  line(450 + grid.p[0], 50 - grid.p[1], 450 + grid[target][0], 50 - grid[target][1]);
  noStroke();
  for (key in grid) {
    [x, y] = grid[key];
    fill('white');
    if (key === target) {
      fill('red');
    }
    if (key === 'p') {
      fill('yellow');
    }
    circle(450 + x, 50 - y, 10);
  }
  fill('green');
  for (i = k = 0; k < 4; i = ++k) {
    text(FILES[i], 100 + i * 100, 450);
    text(RANKS[i], 50, 450 - (50 + i * 100));
  }
  text('Ver: ' + VERSION, 250, 50);
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 150, 500);
  text(target, 250, 500);
  return text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 350, 500);
};

Player = class Player {
  constructor(name, tx = 4 * SIZE, ty = 4 * SIZE) {
    this.name = name;
    this.tx = tx;
    this.ty = ty;
    this.speed = SPEED;
    this.pos = createVector(4 * SIZE, 4 * SIZE);
    this.target = new Square(createVector(this.tx, this.ty));
    this.home = this.target;
    this.squares = []; // lista med Square som ej påbörjats
    this.trail = [];
    this.n = 0;
    this.distance = 0;
    this.assists = 0;
  }

  closest() {
    var bestDist, bestSq, d, k, len, ref, square;
    if (this.squares.length === 0) {
      return null;
    }
    bestDist = 99999;
    bestSq = this.squares[0];
    ref = this.squares;
    for (k = 0, len = ref.length; k < len; k++) {
      square = ref[k];
      d = p5.Vector.dist(square.pos, this.pos);
      if (d < bestDist) {
        bestDist = d;
        bestSq = square;
      }
    }
    return bestSq;
  }

  add(sq) {
    this.squares.push(sq);
    return this.target = this.closest();
  }

  drawTail() {
    var i, k, ref, results, size;
    if (this.n % (10 / SPEED) === 0) {
      this.trail.push(createVector(this.pos.x, this.pos.y));
    }
    this.n += 1;
    if (this.trail.length > MAXTRAIL) {
      this.trail.shift();
    }
    stroke('black');
    results = [];
    for (i = k = 0, ref = this.trail.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      size = map(i, 0, this.trail.length - 1, 5, 15);
      noFill();
      results.push(ellipse(this.trail[i].x, this.trail[i].y, size, size));
    }
    return results;
  }

  draw() {
    var carriers, d, duration, dx, dy, g, k, key, len, ref, ref1, ref2, ref3, ref4, square, step, stoppTime, td;
    target = this.target.pos;
    dx = target.x - this.pos.x;
    dy = target.y - this.pos.y;
    d = sqrt(dx * dx + dy * dy);
    stroke('black');
    // if @name in 'ABCD'
    line(target.x, target.y, this.pos.x, this.pos.y);
    step = p5.Vector.sub(target, this.pos).setMag(min(this.speed, d));
    if (d < this.speed) { // target nådd
      if (!this.target.done) {
        this.target.done = true;
        this.target.carrier = this.name;
// Skicka draget om både start.done och slut.done
        for (key in games) {
          g = games[key];
          if (g.move && g.move.start.done && g.move.stopp.done) {
            duration = 15 / SPEED * (performance.now() - g.move.start.time) / 1000;
            if (g.index % 2 === 0) {
              g.duration += duration;
            }
            if (g.move.start.carrier === g.move.stopp.carrier) {
              carriers = g.move.start.carrier;
            } else {
              carriers = g.move.start.carrier + g.move.stopp.carrier;
            }
            if (ref = g.move.start.carrier, indexOf.call('ABCD', ref) >= 0) {
              echo('assists: ', g.move.start.carrier, g.move.stopp.carrier);
              players[g.move.start.carrier].assists += 1;
              players[g.move.stopp.carrier].assists += 1;
              echo(g.name, g.move.uci, this.name, g.move.start.carrier + g.move.stopp.carrier);
            }
            g.chess.move({
              from: g.move.uci.slice(0, 2),
              to: g.move.uci.slice(2, 4)
            });
            td = document.getElementById(`SEL${g.name}`);
            td.innerHTML += `${g.san_moves[g.chess.history().length - 1]} by ${carriers} (${duration.toFixed()} s)<br>`;
            document.getElementById(`board${g.name}`).innerHTML = shrink(g.chess.ascii());
            updateInfo(g.name, this);
            g.queue.push(g.move);
            g.move = null;
            if (g.initMove() === false) {
              stoppTime = Date.now();
              echo('done', (stoppTime - startTime) / 1000);
            }
          }
        }
      }
      this.squares = _.filter(this.squares, function(sq) {
        return sq.done === false;
      });
      // hämta närmaste uppdrag om sådant finns
      if (this.squares.length > 0) {
        this.target = this.closest();
        d = p5.Vector.dist(this.pos, this.target.pos);
        this.distance += d;
      }
    }
    this.pos.add(step);
    ref1 = this.squares;
    for (k = 0, len = ref1.length; k < len; k++) {
      square = ref1[k];
      if (ref2 = this.name, indexOf.call('ABCD', ref2) >= 0) {
        fill('red');
      } else {
        fill('black');
      }
      circle(square.pos.x, square.pos.y, 10);
    }
    // if @name in 'ABCD'
    this.drawTail();
    if (ref3 = this.name, indexOf.call('ABCD', ref3) >= 0) {
      fill('yellow');
    } else {
      fill('black');
    }
    strokeWeight(1);
    circle(this.pos.x, this.pos.y, 0.4 * SIZE);
    if (ref4 = this.name, indexOf.call('ABCD', ref4) >= 0) {
      fill('black');
    } else {
      fill('yellow');
    }
    noStroke();
    // fill 'black'
    return text(this.name, this.pos.x, this.pos.y);
  }

};

uci2pos = function(uci) { // t ex e2e4 => [[225,75],[225,175]]
  var result, startx, starty, stoppx, stoppy, x, y;
  startx = uci[0];
  starty = uci[1];
  stoppx = uci[2];
  stoppy = uci[3];
  result = [];
  x = FILES.indexOf(startx);
  y = 7 - RANKS.indexOf(starty);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  x = FILES.indexOf(stoppx);
  y = 7 - RANKS.indexOf(stoppy);
  result.push(createVector(SIZE / 2 + SIZE * x, SIZE / 2 + SIZE * y));
  return result;
};

Game = class Game {
  constructor(name, pgn, link) {
    var move;
    this.name = name;
    this.link = link;
    this.chess = new Chess();
    this.chess.load_pgn(pgn);
    this.san_moves = this.chess.history(); // [Nf3, ...]
    this.uci_moves = (function() {
      var k, len, ref, results;
      ref = this.chess.history({
        verbose: true
      });
      // [g1f3, ...]
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        move = ref[k];
        results.push(move.from + move.to);
      }
      return results;
    }).call(this);
    this.move = null;
    this.queue = [];
    this.duration = 0;
    this.chess.reset();
    this.index = -1;
    document.getElementById(`link${this.name}`).innerHTML = `<a href=\"${this.link}\" target=\"_blank\">Link</a>`;
  }

  initMove() {
    var a, antal, b, i, k, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref4, ref5, ref6, ref7, ref8, ref9, start, stopp;
    if (this.index >= this.uci_moves.length - 1) {
      return false;
    }
    this.index += 1;
    if (this.move !== null) {
      echo('too quick!');
      return false;
    }
    this.move = new Move(this.uci_moves[this.index], this.name);
    start = this.move.uci.slice(0, 2);
    stopp = this.move.uci.slice(2, 4);
    antal = 'ABCD'.indexOf(this.name);
    for (i = k = 0, ref = antal; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      start = rotate(start);
      stopp = rotate(stopp);
    }
    if (this.index % 2 === 0) {
      a = "1234";
      b = "5678";
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref1 = start[0], indexOf.call("abcd", ref1) >= 0) && (ref2 = start[1], indexOf.call(a, ref2) >= 0)) {
        players.A.add(this.move.start);
      }
      if ((ref3 = start[0], indexOf.call("efgh", ref3) >= 0) && (ref4 = start[1], indexOf.call(a, ref4) >= 0)) {
        players.B.add(this.move.start);
      }
      if ((ref5 = start[0], indexOf.call("abcd", ref5) >= 0) && (ref6 = start[1], indexOf.call(b, ref6) >= 0)) {
        players.C.add(this.move.start);
      }
      if ((ref7 = start[0], indexOf.call("efgh", ref7) >= 0) && (ref8 = start[1], indexOf.call(b, ref8) >= 0)) {
        players.D.add(this.move.start);
      }
      if ((ref9 = stopp[0], indexOf.call("abcd", ref9) >= 0) && (ref10 = stopp[1], indexOf.call(a, ref10) >= 0)) {
        players.A.add(this.move.stopp);
      }
      if ((ref11 = stopp[0], indexOf.call("efgh", ref11) >= 0) && (ref12 = stopp[1], indexOf.call(a, ref12) >= 0)) {
        players.B.add(this.move.stopp);
      }
      if ((ref13 = stopp[0], indexOf.call("abcd", ref13) >= 0) && (ref14 = stopp[1], indexOf.call(b, ref14) >= 0)) {
        players.C.add(this.move.stopp);
      }
      if ((ref15 = stopp[0], indexOf.call("efgh", ref15) >= 0) && (ref16 = stopp[1], indexOf.call(b, ref16) >= 0)) {
        players.D.add(this.move.stopp);
      }
    } else {
      a = "1234";
      b = "5678";
      // Hantera motståndaren
      // Dela ut start och stopp till rätt spelare beroende på kvadrant
      if ((ref17 = start[0], indexOf.call("abcd", ref17) >= 0) && (ref18 = start[1], indexOf.call(a, ref18) >= 0)) {
        players.G.add(this.move.start);
      }
      if ((ref19 = start[0], indexOf.call("abcd", ref19) >= 0) && (ref20 = start[1], indexOf.call(b, ref20) >= 0)) {
        players.E.add(this.move.start);
      }
      if ((ref21 = start[0], indexOf.call("efgh", ref21) >= 0) && (ref22 = start[1], indexOf.call(a, ref22) >= 0)) {
        players.H.add(this.move.start);
      }
      if ((ref23 = start[0], indexOf.call("efgh", ref23) >= 0) && (ref24 = start[1], indexOf.call(b, ref24) >= 0)) {
        players.F.add(this.move.start);
      }
      if ((ref25 = stopp[0], indexOf.call("abcd", ref25) >= 0) && (ref26 = stopp[1], indexOf.call(a, ref26) >= 0)) {
        players.G.add(this.move.stopp);
      }
      if ((ref27 = stopp[0], indexOf.call("abcd", ref27) >= 0) && (ref28 = stopp[1], indexOf.call(b, ref28) >= 0)) {
        players.E.add(this.move.stopp);
      }
      if ((ref29 = stopp[0], indexOf.call("efgh", ref29) >= 0) && (ref30 = stopp[1], indexOf.call(a, ref30) >= 0)) {
        players.H.add(this.move.stopp);
      }
      if ((ref31 = stopp[0], indexOf.call("efgh", ref31) >= 0) && (ref32 = stopp[1], indexOf.call(b, ref32) >= 0)) {
        players.F.add(this.move.stopp);
      }
    }
    return true;
  }

};

Square = class Square {
  constructor(pos, uci1 = "", carrier = "") { // Vector
    this.pos = pos;
    this.uci = uci1;
    this.carrier = carrier;
    this.done = false;
    this.time = performance.now();
  }

};


  // rotate = (sq) -> FILES[8-sq[1]] + String 1 + FILES.indexOf sq[0]
// echo "g3" == rotate "c2"
// echo "h1" == rotate "a1"
// echo "h8" == rotate rotate "a1"
// echo "a8" == rotate rotate rotate "a1"
// echo "a1" == rotate rotate rotate rotate "a1"

  // coordinates = (sq) ->
// 	x = FILES.indexOf sq[0]
// 	y = RANKS.indexOf sq[1]
// 	[x, 7-y]
// echo _.isEqual [4,4], coordinates "e4"
// echo _.isEqual [0,7], coordinates "a1"

  // toVector = ([x,y]) ->
// 	createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// echo toVector [3,4]
Move = class Move {
  constructor(uci1, name) { // e2e4, B
    var antal, i, k, ref, start, stopp;
    this.uci = uci1;
    this.name = name;
    antal = "ABCD".indexOf(this.name);
    start = this.uci.slice(0, 2);
    stopp = this.uci.slice(2, 4);
    for (i = k = 0, ref = antal; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      start = rotate(start);
      stopp = rotate(stopp);
    }
    start = toVector(coordinates(start));
    stopp = toVector(coordinates(stopp));
    this.pos = [start, stopp];
    this.start = new Square(start, this.uci);
    this.stopp = new Square(stopp, this.uci);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\TerrängSchack\coffee\sketch.coffee