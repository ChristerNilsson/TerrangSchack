// Generated by CoffeeScript 2.7.0
var $fen, $pgn, $status, BEARINGLIST, DIGITS, DISTLIST, FACTOR, FROM, LETTERS, R, RADIUS_METER, RADIUS_PIXEL, SIZE_METER, SIZE_PIXEL, START_POINT, TIME, TO, VERSION, assert, bearingBetween, board, boardDiv, clearHighlights, clearOverlay, closestDistance, config, decreaseQueue, deltaXYBetweenPoints, destinationPoint, distanceBetween, drawSvgCircle, drawSvgLine, dump, echo, game, getOverlaySize, gpsCount, grid_meter, grid_pixel, highlightSquare, increaseQueue, initSounds, makePoint, matrix, messages, onDrop, onSnapEnd, range, sayDist, sayDistance, showTarget, sounds, startTracking, started, target, targets, updateStatus, watchID, wp, wperr,
  indexOf = [].indexOf;

VERSION = 74;

START_POINT = {
  lat: 59.2702,
  lon: 18.1303 // Kaninparken
};

SIZE_METER = 10; // En schackrutas storlek i meter


// Dessa beräknas i setup.
SIZE_PIXEL = 0; // En schackrutas storlek i pixlar

FACTOR = 1;

RADIUS_METER = 0; // meter. Maxavstånd mellan spelaren och target

RADIUS_PIXEL = 0;

TIME = [
  90,
  30 // base in minutes, increment in seconds
];

R = 6371e3; // Jordens radie i meter

BEARINGLIST = '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'.split(' ');

DISTLIST = '2 4 6 8 10 12 14 16 18 20 25 30 35 40 45 50 60 70 80 90 100 120 140 160 180 200 250 300 350 400 450 500 600 700 800 900 1000 1200 1400 1600 1800 2000 2500 3000 3500 4000 4500 5000 6000 7000 8000 9000'.split(' ');

//################
LETTERS = 'abcdefgh';

DIGITS = '87654321';

targets = []; // t ex ["e2","e4","ss"] from to center square

target = "ss";

messages = [];

sounds = {};

started = false;

matrix = {}; // WGS84 {lat,lon}

grid_meter = {};

grid_pixel = {};

echo = console.log;

range = _.range;

watchID = null;

gpsCount = 0;

boardDiv = document.getElementById('board');

game = new Chess();

$status = $('#status'); // jquery används inuti chessBoard

$fen = $('#fen');

$pgn = $('#pgn');

// visar vilket drag som utförts.
FROM = '#baca44'; // '#f6f669'

TO = '#baca44';

dump = function(msg) {
  messages.unshift(msg); // nyaste överst
  if (messages.length > 20) {
    return messages.pop(); // äldsta droppas
  }
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

closestDistance = (m) => {
  var bestDist, bestValue, d, k, len;
  bestDist = 999999;
  bestValue = 0;
  for (k = 0, len = DISTLIST.length; k < len; k++) {
    d = DISTLIST[k];
    if (abs(m - d) < bestDist) {
      bestDist = abs(m - d);
      bestValue = d;
    }
  }
  return bestValue;
};

sayDist = function(m) { // m är en distans, eventuellt i DISTLIST
  dump.store("");
  dump.store(`sayDistance ${m} ${JSON.stringify(distanceQ)}`);
  m = closestDistance(m);
  console.log(m, 'started');
  return distanceSounds[m].play();
};

// distanceSounds[m].onended () => console.log m, "ended"
sayDistance = function(a, b) { // a is newer (meter)
  var d, k, len;
  // if a border is crossed, produce a distance
  dump.store(`D ${round(a, 1)} ${round(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (k = 0, len = DISTLIST.length; k < len; k++) {
    d = DISTLIST[k];
    d = parseInt(d);
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

decreaseQueue = function() {
  var distance, distanceSaid, msg;
  console.log('decreaseQueue', bearingQ, distanceQ);
  if (bearingQ.length === 0) {
    if (distanceQ.length === 0) {

    } else {
      console.log('distance', distanceQ);
      msg = _.last(distanceQ); // latest
      distanceQ.clear(); // ignore the rest
      //arr = msg.split ' '
      if (general.DISTANCE || msg < LIMIT) {
        distance = msg;
        //errors.push "distance #{msg}"
        if (distanceSaid !== distance) {
          sayDist(distance);
        }
        return distanceSaid = distance;
      }
    }
  } else {
    console.log('bearing', bearingQ);
    msg = _.last(bearingQ); // latest
    //errors.push "bearing #{msg}"
    bearingQ.clear(); // ignore the rest
    if (indexOf.call(BEARINGLIST, msg) >= 0) {
      return bearingSounds[msg].play();
    }
  }
};

increaseQueue = function(p) {
  var bearingac, gpsLat, gpsLon, sDistance;
  // if crossHair == null then return

  // [trgLon,trgLat] = b2w.convert crossHair[0],crossHair[1]

  // a = LatLon p.coords.latitude, p.coords.longitude # newest
  // b = LatLon gpsLat, gpsLon
  // c = LatLon trgLat, trgLon # target

  // distac = a.distanceTo c # meters
  // distbc = b.distanceTo c
  // distance = (distac - distbc)/DIST
  bearingac = a.bearingTo(c);
  //bearingbc = b.bearingTo c
  if (distac >= LIMIT) {
    bearing.update(bearingac); // sayBearing bearingac,bearingbc else ""
  }
  sDistance = sayDistance(distac, distbc);
  if (sDistance !== "") {
    distanceQ.push(sDistance); // Vi kan inte säga godtyckligt avstånd numera
  }
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = round(p.coords.latitude, 6);
    return gpsLon = round(p.coords.longitude, 6);
  }
};

wp = (p) => {
  sounds.soundDown.play();
  gpsCount += 1;
  if (!matrix.p) {
    matrix.p = {};
  }
  matrix.p.lat = p.coords.latitude;
  matrix.p.lon = p.coords.longitude;
  grid_meter.p = makePoint(matrix.ss, matrix.p);
  grid_pixel.p = [grid_meter.p[0] * FACTOR, grid_meter.p[1] * FACTOR];
  dump(`${gpsCount} ${round(bearingBetween(matrix.p, matrix[target]))}° ${target} ${round(distanceBetween(matrix.p, matrix[target]))}m ${round(p.coords.latitude, 6)} ${round(p.coords.longitude, 6)}`);
  
  // om man är inom RADIUS meter från målet, byt mål
  if (target === '') {
    return;
  }
  if (RADIUS_METER < distanceBetween(matrix.p, matrix[target])) {
    return;
  }
  if (targets.length === 0) {
    target = '';
    return;
  }
  sounds.soundDown.play();
  return target = targets.shift();
};

wperr = function(err) {
  return dump(`Fel: ${err.message}`);
};

window.touchStarted = function() {
  if (started) {
    return false;
  }
  messages = [];
  userStartAudio();
  startTracking();
  started = true;
  sounds.soundDown.play();
  return false;
};

startTracking = function() {
  if (!navigator.geolocation) {
    dump("Geolocation stöds inte i din webbläsare.");
    return;
  }
  // dump "GPS startad"
  return watchID = navigator.geolocation.watchPosition(wp, wperr, {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 1000
  });
};

distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return (θ * 180 / Math.PI + 360) % 360; // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    -dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

initSounds = function() {
  var k, len, name, ref, results, sound;
  sounds = {};
  ref = "soundDown soundUp".split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    sound = loadSound(`sounds/${name}.wav`);
    sound.setVolume(1.0);
    sound.pan(0);
    results.push(sounds[name] = sound);
  }
  return results;
};

window.preload = function() {
  return initSounds();
};

window.setup = function() {
  var arr, i, j, k, key, l, len, len1, ref, ref1;
  createCanvas(window.windowWidth - 2, 200, document.getElementById("canvas"));
  SIZE_PIXEL = window.windowWidth / 8; // En schackrutas storlek i pixlar
  FACTOR = SIZE_PIXEL / SIZE_METER;
  RADIUS_METER = 0.25 * SIZE_METER; // meter. Maxavstånd mellan spelaren och target
  RADIUS_PIXEL = 0.25 * SIZE_PIXEL;
  grid_meter.ss = [
    4 * SIZE_METER,
    4 * SIZE_METER // origo, samlingspunkt
  ];
  grid_pixel.ss = [
    4 * SIZE_PIXEL,
    4 * SIZE_PIXEL // origo, samlingspunkt
  ];
  frameRate(10);
  textSize(40);
  matrix.ss = START_POINT;
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 8; i = ++k) {
      results.push(destinationPoint(matrix.ss.lat, matrix.ss.lon, i * SIZE_METER, 90));
    }
    return results;
  })();
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      key = `${LETTERS[i]}${DIGITS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, j * SIZE_METER, 180);
      grid_pixel[key] = [(i + 0.5) * SIZE_PIXEL, (j + 0.5) * SIZE_PIXEL];
      grid_meter[key] = [(i + 0.5) * SIZE_METER, (j + 0.5) * SIZE_METER];
    }
  }
  targets = [];
  target = "ss";
  dump(`V:${VERSION} S:${SIZE_METER}m R:${RADIUS_METER}m ${START_POINT.lat} ${START_POINT.lon}`);
  dump(`${width} x ${height} ${SIZE_PIXEL}`);
  return dump('Klicka här för att starta GPS:en');
};

// assert 224, round distanceBetween matrix.c1, matrix.d3
// assert  27, round bearingBetween matrix.c1, matrix.d3
// assert  90, round bearingBetween matrix.c3, matrix.d3
// assert 108, round bearingBetween matrix.a4, matrix.d3
// assert 214, round bearingBetween matrix.c4, matrix.a1
// assert 297, round bearingBetween matrix.d2, matrix.b3
window.draw = function() {
  var i, k, len, ref;
  background('black');
  push();
  textAlign(LEFT, TOP);
  fill('white');
  ref = range(messages.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    text(messages[i], 0, (i + 1.5) * 40); // 0.2 * SIZE_PIXEL
  }
  pop();
  if (target === "" || !matrix.p || !matrix[target]) {
    return;
  }
  fill(255);
  push();
  fill('yellow');
  textAlign(LEFT, TOP);
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 0.01 * width, 0.1 * SIZE_PIXEL);
  textAlign(CENTER);
  text(target, 0.5 * width, 0.1 * SIZE_PIXEL);
  textAlign(RIGHT);
  text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 0.99 * width, 0.1 * SIZE_PIXEL);
  pop();
  return showTarget(target, "p");
};

updateStatus = function() {
  var moveColor, status;
  status = '';
  moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }
  if (game.in_checkmate()) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  } else if (game.in_draw()) {
    status = 'Game over, drawn position';
  } else {
    status = moveColor + ' to move';
    if (game.in_check()) {
      status += ', ' + moveColor + ' is in check';
    }
  }
  $status.html(status);
  $fen.html(game.fen());
  return $pgn.html(game.pgn());
};

showTarget = function(p, q) {
  var x1, x2, y1, y2;
  [x1, y1] = grid_pixel[target];
  [x2, y2] = grid_pixel.p;
  clearOverlay();
  drawSvgLine(x1, y1, x2, y2, 'black', 2);
  drawSvgCircle(x1, y1, RADIUS_PIXEL, 'yellow');
  return drawSvgCircle(x2, y2, RADIUS_PIXEL, 'red');
};

clearOverlay = function() {
  var results, svg;
  svg = document.getElementById('overlay');
  results = [];
  while (svg.firstChild) {
    results.push(svg.removeChild(svg.firstChild));
  }
  return results;
};

// Rita en cirkel i SVG på absolut koordinat (x, y)
drawSvgCircle = function(x, y, radius = 10, color = 'red') {
  var circle, svg;
  svg = document.getElementById('overlay');
  circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
  circle.setAttribute('cx', x);
  circle.setAttribute('cy', y);
  circle.setAttribute('r', radius);
  circle.setAttribute('fill', color);
  return svg.appendChild(circle);
};

// Rita en linje från (x1, y1) till (x2, y2)
drawSvgLine = function(x1, y1, x2, y2, color = 'blue', width = 4) {
  var line, svg;
  svg = document.getElementById('overlay');
  line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
  line.setAttribute('x1', x1);
  line.setAttribute('y1', y1);
  line.setAttribute('x2', x2);
  line.setAttribute('y2', y2);
  line.setAttribute('stroke', color);
  line.setAttribute('stroke-width', width);
  line.setAttribute('stroke-linecap', 'round');
  return svg.appendChild(line);
};

// onDragStart = (source, piece, position, orientation) ->
// 	# if game.game_over() then return false
// 	# if game.turn() == 'w' and piece.search(/^b/) != -1 then false
// 	# if game.turn() == 'b' and piece.search(/^w/) != -1 then false
// 	# true
onDrop = function(source, target) {
  var move;
  move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });
  
  // illegal move
  if (move === null) {
    return 'snapback';
  }
  return updateStatus();
};

// update the board position after the piece snap
// for castling, en passant, pawn promotion
// onSnapEnd = -> board.position game.fen()
onSnapEnd = function() {
  var fen, lastMove, moves;
  clearHighlights();
  fen = game.fen();
  board.position(fen);
  // Hämta senaste drag från Chess-historik
  moves = game.history({
    verbose: true
  });
  if (moves.length > 0) {
    lastMove = moves[moves.length - 1];
    highlightSquare(lastMove.from, FROM);
    highlightSquare(lastMove.to, TO);
  }
  dump(`${lastMove.from}-${lastMove.to}`);
  targets = [lastMove.from, lastMove.to, "ss"];
  target = targets.shift();
  return echo(target, targets);
};

clearHighlights = function() {
  var k, len, results, square, squares;
  squares = boardDiv.querySelectorAll('[data-square]');
  results = [];
  for (k = 0, len = squares.length; k < len; k++) {
    square = squares[k];
    results.push(square.style.background = '');
  }
  return results;
};

highlightSquare = function(square, color = '#a9a9a9') {
  var el;
  el = boardDiv.querySelector(`[data-square='${square}']`);
  if (el) {
    return el.style.background = color;
  }
};

config = {
  draggable: true,
  position: 'start',
  // onDragStart: onDragStart
  onDrop: onDrop,
  onSnapEnd: onSnapEnd
};

board = Chessboard('board', config);

getOverlaySize = function(element) {
  var elem;
  elem = document.getElementById(element);
  return elem.getBoundingClientRect();
};

$('#startBtn').on('click', board.start);

$('#clearBtn').on('click', function() {
  clearOverlay();
  return target = targets.shift();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsY0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsZUFBQSxFQUFBLFlBQUEsRUFBQSxlQUFBLEVBQUEsTUFBQSxFQUFBLGFBQUEsRUFBQSxvQkFBQSxFQUFBLGdCQUFBLEVBQUEsZUFBQSxFQUFBLGFBQUEsRUFBQSxXQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLGVBQUEsRUFBQSxhQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUEsS0FBQTtFQUFBOztBQUFBLE9BQUEsR0FBVTs7QUFFVixXQUFBLEdBQWM7RUFBQSxHQUFBLEVBQU0sT0FBTjtFQUFlLEdBQUEsRUFBTSxPQUFyQjtBQUFBOztBQUNkLFVBQUEsR0FBYSxHQUhiOzs7O0FBTUEsVUFBQSxHQUFhLEVBTmI7O0FBT0EsTUFBQSxHQUFTOztBQUNULFlBQUEsR0FBZSxFQVJmOztBQVNBLFlBQUEsR0FBZTs7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QSxTQUFBLEVBQVcsSUFBWDtFQUNBLFFBQUEsRUFBVSxPQURWOztFQUdBLE1BQUEsRUFBUSxNQUhSO0VBSUEsU0FBQSxFQUFXO0FBSlg7O0FBTUQsS0FBQSxHQUFRLFVBQUEsQ0FBVyxPQUFYLEVBQW9CLE1BQXBCOztBQUVSLGNBQUEsR0FBaUIsUUFBQSxDQUFDLE9BQUQsQ0FBQTtBQUNqQixNQUFBO0VBQUUsSUFBQSxHQUFPLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQXhCO1NBQ1AsSUFBSSxDQUFDLHFCQUFMLENBQUE7QUFGZTs7QUFJakIsQ0FBQSxDQUFFLFdBQUYsQ0FBYyxDQUFDLEVBQWYsQ0FBa0IsT0FBbEIsRUFBMkIsS0FBSyxDQUFDLEtBQWpDOztBQUNBLENBQUEsQ0FBRSxXQUFGLENBQWMsQ0FBQyxFQUFmLENBQWtCLE9BQWxCLEVBQTJCLFFBQUEsQ0FBQSxDQUFBO0VBQzFCLFlBQUEsQ0FBQTtTQUNBLE1BQUEsR0FBUyxPQUFPLENBQUMsS0FBUixDQUFBO0FBRmlCLENBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiVkVSU0lPTiA9IDc0XHJcblxyXG5TVEFSVF9QT0lOVCA9IGxhdCA6IDU5LjI3MDIsIGxvbiA6IDE4LjEzMDMgIyBLYW5pbnBhcmtlblxyXG5TSVpFX01FVEVSID0gMTAgIyBFbiBzY2hhY2tydXRhcyBzdG9ybGVrIGkgbWV0ZXJcclxuXHJcbiMgRGVzc2EgYmVyw6RrbmFzIGkgc2V0dXAuXHJcblNJWkVfUElYRUwgPSAwICMgRW4gc2NoYWNrcnV0YXMgc3RvcmxlayBpIHBpeGxhclxyXG5GQUNUT1IgPSAxXHJcblJBRElVU19NRVRFUiA9IDAgIyBtZXRlci4gTWF4YXZzdMOlbmQgbWVsbGFuIHNwZWxhcmVuIG9jaCB0YXJnZXRcclxuUkFESVVTX1BJWEVMID0gMFxyXG5cclxuVElNRSA9IFs5MCwzMF0gIyBiYXNlIGluIG1pbnV0ZXMsIGluY3JlbWVudCBpbiBzZWNvbmRzXHJcblIgPSA2MzcxZTMgICMgSm9yZGVucyByYWRpZSBpIG1ldGVyXHJcblxyXG5CRUFSSU5HTElTVCA9JzAxIDAyIDAzIDA0IDA1IDA2IDA3IDA4IDA5IDEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzIDM0IDM1IDM2Jy5zcGxpdCAnICdcclxuRElTVExJU1QgPSAnMiA0IDYgOCAxMCAxMiAxNCAxNiAxOCAyMCAyNSAzMCAzNSA0MCA0NSA1MCA2MCA3MCA4MCA5MCAxMDAgMTIwIDE0MCAxNjAgMTgwIDIwMCAyNTAgMzAwIDM1MCA0MDAgNDUwIDUwMCA2MDAgNzAwIDgwMCA5MDAgMTAwMCAxMjAwIDE0MDAgMTYwMCAxODAwIDIwMDAgMjUwMCAzMDAwIDM1MDAgNDAwMCA0NTAwIDUwMDAgNjAwMCA3MDAwIDgwMDAgOTAwMCcuc3BsaXQgJyAnXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuTEVUVEVSUyA9ICdhYmNkZWZnaCdcclxuRElHSVRTID0gJzg3NjU0MzIxJ1xyXG5cclxudGFyZ2V0cyA9IFtdICMgdCBleCBbXCJlMlwiLFwiZTRcIixcInNzXCJdIGZyb20gdG8gY2VudGVyIHNxdWFyZVxyXG50YXJnZXQgPSBcInNzXCJcclxuXHJcbm1lc3NhZ2VzID0gW11cclxuc291bmRzID0ge31cclxuc3RhcnRlZCA9IGZhbHNlXHJcblxyXG5tYXRyaXggPSB7fSAjIFdHUzg0IHtsYXQsbG9ufVxyXG5ncmlkX21ldGVyID0ge31cclxuZ3JpZF9waXhlbCA9IHt9XHJcblxyXG5lY2hvID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcblxyXG53YXRjaElEID0gbnVsbFxyXG5ncHNDb3VudCA9IDBcclxuXHJcbmJvYXJkRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkJylcclxuXHJcbmdhbWUgPSBuZXcgQ2hlc3MoKVxyXG5cclxuJHN0YXR1cyA9ICQgJyNzdGF0dXMnICMganF1ZXJ5IGFudsOkbmRzIGludXRpIGNoZXNzQm9hcmRcclxuJGZlbiA9ICQgJyNmZW4nXHJcbiRwZ24gPSAkICcjcGduJ1xyXG5cclxuIyB2aXNhciB2aWxrZXQgZHJhZyBzb20gdXRmw7ZydHMuXHJcbkZST00gPSAnI2JhY2E0NCcgIyAnI2Y2ZjY2OSdcclxuVE8gICA9ICcjYmFjYTQ0J1xyXG5cclxuZHVtcCA9IChtc2cpIC0+XHJcblx0bWVzc2FnZXMudW5zaGlmdCBtc2cgIyBueWFzdGUgw7Z2ZXJzdFxyXG5cdGlmIG1lc3NhZ2VzLmxlbmd0aCA+IDIwIHRoZW4gbWVzc2FnZXMucG9wKCkgIyDDpGxkc3RhIGRyb3BwYXNcclxuXHJcbmFzc2VydCA9IChhLGIpIC0+IGlmIGEgIT0gYiB0aGVuIGVjaG8gJ2Fzc2VydCcsYSxiXHJcblxyXG5jbG9zZXN0RGlzdGFuY2UgPSAobSkgPT5cclxuXHRiZXN0RGlzdCA9IDk5OTk5OVxyXG5cdGJlc3RWYWx1ZSA9IDBcclxuXHRmb3IgZCBpbiBESVNUTElTVFxyXG5cdFx0aWYgYWJzKG0tZCkgPCBiZXN0RGlzdFxyXG5cdFx0XHRiZXN0RGlzdCA9IGFicyBtLWRcclxuXHRcdFx0YmVzdFZhbHVlID0gZFxyXG5cdGJlc3RWYWx1ZVxyXG5cclxuc2F5RGlzdCA9IChtKSAtPiAjIG0gw6RyIGVuIGRpc3RhbnMsIGV2ZW50dWVsbHQgaSBESVNUTElTVFxyXG5cdGR1bXAuc3RvcmUgXCJcIlxyXG5cdGR1bXAuc3RvcmUgXCJzYXlEaXN0YW5jZSAje219ICN7SlNPTi5zdHJpbmdpZnkgZGlzdGFuY2VRfVwiXHJcblx0bSA9IGNsb3Nlc3REaXN0YW5jZSBtXHJcblx0Y29uc29sZS5sb2cgbSwnc3RhcnRlZCdcclxuXHRkaXN0YW5jZVNvdW5kc1ttXS5wbGF5KClcclxuXHQjIGRpc3RhbmNlU291bmRzW21dLm9uZW5kZWQgKCkgPT4gY29uc29sZS5sb2cgbSwgXCJlbmRlZFwiXHJcblxyXG5zYXlEaXN0YW5jZSA9IChhLGIpIC0+ICMgYSBpcyBuZXdlciAobWV0ZXIpXHJcblx0IyBpZiBhIGJvcmRlciBpcyBjcm9zc2VkLCBwcm9kdWNlIGEgZGlzdGFuY2VcclxuXHRkdW1wLnN0b3JlIFwiRCAje3JvdW5kIGEsMX0gI3tyb3VuZCBiLDF9XCJcclxuXHRhID0gcm91bmQgYVxyXG5cdGIgPSByb3VuZCBiXHJcblx0aWYgYiA9PSAtMSB0aGVuIHJldHVybiBhXHJcblx0Zm9yIGQgaW4gRElTVExJU1RcclxuXHRcdGQgPSBwYXJzZUludCBkXHJcblx0XHRpZiBhID09IGQgYW5kIGIgIT0gZCB0aGVuIHJldHVybiBkXHJcblx0XHRpZiAoYS1kKSAqIChiLWQpIDwgMCB0aGVuIHJldHVybiBkXHJcblx0XCJcIlxyXG5cclxuZGVjcmVhc2VRdWV1ZSA9IC0+XHJcblx0Y29uc29sZS5sb2cgJ2RlY3JlYXNlUXVldWUnLGJlYXJpbmdRLGRpc3RhbmNlUVxyXG5cdGlmIGJlYXJpbmdRLmxlbmd0aCA9PSAwXHJcblx0XHRpZiBkaXN0YW5jZVEubGVuZ3RoID09IDBcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRlbHNlXHJcblx0XHRcdGNvbnNvbGUubG9nICdkaXN0YW5jZScsZGlzdGFuY2VRXHJcblx0XHRcdG1zZyA9IF8ubGFzdCBkaXN0YW5jZVEgIyBsYXRlc3RcclxuXHRcdFx0ZGlzdGFuY2VRLmNsZWFyKCkgIyBpZ25vcmUgdGhlIHJlc3RcclxuXHRcdFx0I2FyciA9IG1zZy5zcGxpdCAnICdcclxuXHRcdFx0aWYgZ2VuZXJhbC5ESVNUQU5DRSBvciBtc2cgPCBMSU1JVFxyXG5cdFx0XHRcdGRpc3RhbmNlID0gbXNnXHJcblx0XHRcdFx0I2Vycm9ycy5wdXNoIFwiZGlzdGFuY2UgI3ttc2d9XCJcclxuXHRcdFx0XHRpZiBkaXN0YW5jZVNhaWQgIT0gZGlzdGFuY2UgdGhlbiBzYXlEaXN0IGRpc3RhbmNlXHJcblx0XHRcdFx0ZGlzdGFuY2VTYWlkID0gZGlzdGFuY2VcclxuXHRlbHNlXHJcblx0XHRjb25zb2xlLmxvZyAnYmVhcmluZycsYmVhcmluZ1FcclxuXHRcdG1zZyA9IF8ubGFzdCBiZWFyaW5nUSAjIGxhdGVzdFxyXG5cdFx0I2Vycm9ycy5wdXNoIFwiYmVhcmluZyAje21zZ31cIlxyXG5cdFx0YmVhcmluZ1EuY2xlYXIoKSAjIGlnbm9yZSB0aGUgcmVzdFxyXG5cdFx0aWYgbXNnIGluIEJFQVJJTkdMSVNUXHJcblx0XHRcdGJlYXJpbmdTb3VuZHNbbXNnXS5wbGF5KClcclxuXHJcblxyXG5pbmNyZWFzZVF1ZXVlID0gKHApIC0+XHJcblxyXG5cdCMgaWYgY3Jvc3NIYWlyID09IG51bGwgdGhlbiByZXR1cm5cclxuXHJcblx0IyBbdHJnTG9uLHRyZ0xhdF0gPSBiMncuY29udmVydCBjcm9zc0hhaXJbMF0sY3Jvc3NIYWlyWzFdXHJcblxyXG5cdCMgYSA9IExhdExvbiBwLmNvb3Jkcy5sYXRpdHVkZSwgcC5jb29yZHMubG9uZ2l0dWRlICMgbmV3ZXN0XHJcblx0IyBiID0gTGF0TG9uIGdwc0xhdCwgZ3BzTG9uXHJcblx0IyBjID0gTGF0TG9uIHRyZ0xhdCwgdHJnTG9uICMgdGFyZ2V0XHJcblx0XHJcblx0IyBkaXN0YWMgPSBhLmRpc3RhbmNlVG8gYyAjIG1ldGVyc1xyXG5cdCMgZGlzdGJjID0gYi5kaXN0YW5jZVRvIGNcclxuXHQjIGRpc3RhbmNlID0gKGRpc3RhYyAtIGRpc3RiYykvRElTVFxyXG5cclxuXHRiZWFyaW5nYWMgPSBhLmJlYXJpbmdUbyBjXHJcblx0I2JlYXJpbmdiYyA9IGIuYmVhcmluZ1RvIGNcclxuXHRpZiBkaXN0YWMgPj0gTElNSVQgdGhlbiBiZWFyaW5nLnVwZGF0ZSBiZWFyaW5nYWMgIyBzYXlCZWFyaW5nIGJlYXJpbmdhYyxiZWFyaW5nYmMgZWxzZSBcIlwiXHJcblxyXG5cdHNEaXN0YW5jZSA9IHNheURpc3RhbmNlIGRpc3RhYyxkaXN0YmNcclxuXHRpZiBzRGlzdGFuY2UgIT0gXCJcIiB0aGVuIGRpc3RhbmNlUS5wdXNoIHNEaXN0YW5jZSAjIFZpIGthbiBpbnRlIHPDpGdhIGdvZHR5Y2tsaWd0IGF2c3TDpW5kIG51bWVyYVxyXG5cclxuXHRpZiBhYnMoZGlzdGFuY2UpID49IDAuNSAjIHVwZGF0ZSBvbmx5IGlmIERJU1QgZGV0ZWN0ZWQuIE90aGVyd2lzZSBzb21lIGJlZXBzIHdpbGwgYmUgbG9zdC5cclxuXHRcdGdwc0xhdCA9IHJvdW5kIHAuY29vcmRzLmxhdGl0dWRlLDZcclxuXHRcdGdwc0xvbiA9IHJvdW5kIHAuY29vcmRzLmxvbmdpdHVkZSw2XHJcblxyXG53cCA9IChwKSA9PlxyXG5cdHNvdW5kcy5zb3VuZERvd24ucGxheSgpXHJcblx0Z3BzQ291bnQgKz0gMVxyXG5cdGlmIG5vdCBtYXRyaXgucCB0aGVuIG1hdHJpeC5wID0ge31cclxuXHRtYXRyaXgucC5sYXQgPSBwLmNvb3Jkcy5sYXRpdHVkZVxyXG5cdG1hdHJpeC5wLmxvbiA9IHAuY29vcmRzLmxvbmdpdHVkZVxyXG5cdGdyaWRfbWV0ZXIucCA9IG1ha2VQb2ludCBtYXRyaXguc3MsIG1hdHJpeC5wXHJcblx0Z3JpZF9waXhlbC5wID0gW2dyaWRfbWV0ZXIucFswXSAqIEZBQ1RPUiwgZ3JpZF9tZXRlci5wWzFdICogRkFDVE9SXVxyXG5cdGR1bXAgXCIje2dwc0NvdW50fSAje3JvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5wLCBtYXRyaXhbdGFyZ2V0XX3CsCAje3RhcmdldH0gI3tyb3VuZCBkaXN0YW5jZUJldHdlZW4obWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdKX1tICN7cm91bmQgcC5jb29yZHMubGF0aXR1ZGUsNn0gI3tyb3VuZCBwLmNvb3Jkcy5sb25naXR1ZGUsNn1cIiBcclxuXHJcblx0IyBvbSBtYW4gw6RyIGlub20gUkFESVVTIG1ldGVyIGZyw6VuIG3DpWxldCwgYnl0IG3DpWxcclxuXHRpZiB0YXJnZXQgPT0gJycgdGhlbiByZXR1cm5cclxuXHRpZiBSQURJVVNfTUVURVIgPCBkaXN0YW5jZUJldHdlZW4gbWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdIHRoZW4gcmV0dXJuXHJcblx0aWYgdGFyZ2V0cy5sZW5ndGggPT0gMFxyXG5cdFx0dGFyZ2V0ID0gJydcclxuXHRcdHJldHVyblxyXG5cdHNvdW5kcy5zb3VuZERvd24ucGxheSgpXHJcblx0dGFyZ2V0ID0gdGFyZ2V0cy5zaGlmdCgpXHJcblxyXG53cGVyciA9IChlcnIpIC0+IGR1bXAgXCJGZWw6ICN7ZXJyLm1lc3NhZ2V9XCJcclxuXHJcbndpbmRvdy50b3VjaFN0YXJ0ZWQgPSAoKSAtPlxyXG5cdGlmIHN0YXJ0ZWQgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRtZXNzYWdlcyA9IFtdXHJcblx0dXNlclN0YXJ0QXVkaW8oKVxyXG5cdHN0YXJ0VHJhY2tpbmcoKVxyXG5cdHN0YXJ0ZWQgPSB0cnVlXHJcblx0c291bmRzLnNvdW5kRG93bi5wbGF5KClcclxuXHRyZXR1cm4gZmFsc2UgXHJcblxyXG5zdGFydFRyYWNraW5nID0gLT5cclxuXHJcblx0aWYgbm90IG5hdmlnYXRvci5nZW9sb2NhdGlvblxyXG5cdFx0ZHVtcCBcIkdlb2xvY2F0aW9uIHN0w7ZkcyBpbnRlIGkgZGluIHdlYmJsw6RzYXJlLlwiXHJcblx0XHRyZXR1cm5cclxuXHJcblx0IyBkdW1wIFwiR1BTIHN0YXJ0YWRcIlxyXG5cclxuXHR3YXRjaElEID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gd3AsIHdwZXJyLFxyXG5cdFx0ZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlIFxyXG5cdFx0dGltZW91dDogNTAwMCBcclxuXHRcdG1heGltdW1BZ2U6IDEwMDBcclxuXHJcbmRpc3RhbmNlQmV0d2VlbiA9IChwLHEpIC0+XHJcblx0bGF0MSA9IHAubGF0XHJcblx0bG9uMSA9IHAubG9uXHJcblx0bGF0MiA9IHEubGF0XHJcblx0bG9uMiA9IHEubG9uXHJcblx0z4YxID0gbGF0MSAqIE1hdGguUEkgLyAxODBcclxuXHTPhjIgPSBsYXQyICogTWF0aC5QSSAvIDE4MFxyXG5cdM6Uz4YgPSAobGF0MiAtIGxhdDEpICogTWF0aC5QSSAvIDE4MFxyXG5cdM6UzrsgPSAobG9uMiAtIGxvbjEpICogTWF0aC5QSSAvIDE4MFxyXG5cdGEgPSBNYXRoLnNpbijOlM+GIC8gMikgKiogMiArIE1hdGguY29zKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5zaW4ozpTOuyAvIDIpICoqIDJcclxuXHRjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKVxyXG5cdFIgKiBjICAjIGF2c3TDpW5kIGkgbWV0ZXJcclxuXHJcbmJlYXJpbmdCZXR3ZWVuID0gKHAscSkgLT5cclxuXHRsYXQxID0gcC5sYXRcclxuXHRsb24xID0gcC5sb25cclxuXHRsYXQyID0gcS5sYXRcclxuXHRsb24yID0gcS5sb25cclxuXHTPhjEgPSBsYXQxICogTWF0aC5QSSAvIDE4MFxyXG5cdM+GMiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTOuyA9IChsb24yIC0gbG9uMSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0eSA9IE1hdGguc2luKM6UzrspICogTWF0aC5jb3Moz4YyKVxyXG5cdHggPSBNYXRoLmNvcyjPhjEpICogTWF0aC5zaW4oz4YyKSAtIE1hdGguc2luKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5jb3MozpTOuylcclxuXHTOuCA9IE1hdGguYXRhbjIoeSwgeClcclxuXHQozrggKiAxODAgLyBNYXRoLlBJICsgMzYwKSAlIDM2MCAgIyBiw6RyaW5nIGkgZ3JhZGVyXHJcblxyXG5kZWx0YVhZQmV0d2VlblBvaW50cyA9IChwLHEpIC0+XHJcblx0bGF0MSA9IHAubGF0XHJcblx0bG9uMSA9IHAubG9uXHJcblx0bGF0MiA9IHEubGF0XHJcblx0bG9uMiA9IHEubG9uXHJcblx0z4YxID0gbGF0MSAqIE1hdGguUEkgLyAxODBcclxuXHTPhjIgPSBsYXQyICogTWF0aC5QSSAvIDE4MFxyXG5cdM6Uz4YgPSAobGF0MiAtIGxhdDEpICogTWF0aC5QSSAvIDE4MFxyXG5cdM6UzrsgPSAobG9uMiAtIGxvbjEpICogTWF0aC5QSSAvIDE4MFxyXG5cdGR4ID0gUiAqIM6UzrsgKiBNYXRoLmNvcygoz4YxICsgz4YyKSAvIDIpICAjIMO2c3RsaWcgc2tpbGxuYWRcclxuXHRkeSA9IFIgKiDOlM+GICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbm9yZGxpZyBza2lsbG5hZFxyXG5cdFtkeCwtZHldICMgaSBtZXRlclxyXG5cclxubWFrZVBvaW50ID0gKHAscSkgLT4gZGVsdGFYWUJldHdlZW5Qb2ludHMgcCwgcVxyXG5cclxuZGVzdGluYXRpb25Qb2ludCA9IChsYXQsIGxvbiwgZGlzdGFuY2UsIGJlYXJpbmcpIC0+IFxyXG5cdM+GMSA9IGxhdCAqIE1hdGguUEkgLyAxODBcclxuXHTOuzEgPSBsb24gKiBNYXRoLlBJIC8gMTgwXHJcblx0zrggPSBiZWFyaW5nICogTWF0aC5QSSAvIDE4MFxyXG5cdM60ID0gZGlzdGFuY2UgLyBSXHJcblxyXG5cdM+GMiA9IE1hdGguYXNpbihNYXRoLnNpbijPhjEpICogTWF0aC5jb3MozrQpICsgTWF0aC5jb3Moz4YxKSAqIE1hdGguc2luKM60KSAqIE1hdGguY29zKM64KSlcclxuXHTOuzIgPSDOuzEgKyBNYXRoLmF0YW4yKE1hdGguc2luKM64KSAqIE1hdGguc2luKM60KSAqIE1hdGguY29zKM+GMSksIE1hdGguY29zKM60KSAtIE1hdGguc2luKM+GMSkgKiBNYXRoLnNpbijPhjIpKVxyXG5cclxuXHRsYXQ6IM+GMiAqIDE4MCAvIE1hdGguUElcclxuXHRsb246IM67MiAqIDE4MCAvIE1hdGguUElcclxuXHJcbmluaXRTb3VuZHMgPSAtPlxyXG5cdHNvdW5kcyA9IHt9XHJcblx0Zm9yIG5hbWUgaW4gXCJzb3VuZERvd24gc291bmRVcFwiLnNwbGl0ICcgJ1xyXG5cdFx0c291bmQgPSBsb2FkU291bmQgXCJzb3VuZHMvI3tuYW1lfS53YXZcIlxyXG5cdFx0c291bmQuc2V0Vm9sdW1lIDEuMFxyXG5cdFx0c291bmQucGFuIDBcclxuXHRcdHNvdW5kc1tuYW1lXSA9IHNvdW5kXHJcblxyXG53aW5kb3cucHJlbG9hZCA9IC0+XHJcblx0aW5pdFNvdW5kcygpXHJcblxyXG53aW5kb3cuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3cud2luZG93V2lkdGgtMiwgMjAwLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcImNhbnZhc1wiXHJcblxyXG5cdFNJWkVfUElYRUwgPSB3aW5kb3cud2luZG93V2lkdGgvOCAjIEVuIHNjaGFja3J1dGFzIHN0b3JsZWsgaSBwaXhsYXJcclxuXHRGQUNUT1IgPSBTSVpFX1BJWEVMIC8gU0laRV9NRVRFUlxyXG5cdFJBRElVU19NRVRFUiA9IDAuMjUgKiBTSVpFX01FVEVSICMgbWV0ZXIuIE1heGF2c3TDpW5kIG1lbGxhbiBzcGVsYXJlbiBvY2ggdGFyZ2V0XHJcblx0UkFESVVTX1BJWEVMID0gMC4yNSAqIFNJWkVfUElYRUxcclxuXHJcblx0Z3JpZF9tZXRlci5zcyA9IFs0KlNJWkVfTUVURVIsIDQqU0laRV9NRVRFUl0gIyBvcmlnbywgc2FtbGluZ3NwdW5rdFxyXG5cdGdyaWRfcGl4ZWwuc3MgPSBbNCpTSVpFX1BJWEVMLCA0KlNJWkVfUElYRUxdICMgb3JpZ28sIHNhbWxpbmdzcHVua3RcclxuXHJcblx0ZnJhbWVSYXRlIDEwXHJcblx0dGV4dFNpemUgNDBcclxuXHJcblx0bWF0cml4LnNzID0gU1RBUlRfUE9JTlQgXHJcblx0YXJyID0gKGRlc3RpbmF0aW9uUG9pbnQgbWF0cml4LnNzLmxhdCwgbWF0cml4LnNzLmxvbiwgaSAqIFNJWkVfTUVURVIsIDkwIGZvciBpIGluIFswLi4uOF0pXHJcblxyXG5cdGZvciBpIGluIHJhbmdlIDhcclxuXHRcdGZvciBqIGluIHJhbmdlIDhcclxuXHRcdFx0a2V5ID0gXCIje0xFVFRFUlNbaV19I3tESUdJVFNbal19XCJcclxuXHRcdFx0bWF0cml4W2tleV0gPSBkZXN0aW5hdGlvblBvaW50IGFycltpXS5sYXQsIGFycltpXS5sb24sIGogKiBTSVpFX01FVEVSLCAxODBcclxuXHRcdFx0Z3JpZF9waXhlbFtrZXldID0gWyhpKzAuNSkgKiBTSVpFX1BJWEVMLCAoaiswLjUpICogU0laRV9QSVhFTF1cclxuXHRcdFx0Z3JpZF9tZXRlcltrZXldID0gWyhpKzAuNSkgKiBTSVpFX01FVEVSLCAoaiswLjUpICogU0laRV9NRVRFUl1cclxuXHJcblx0dGFyZ2V0cyA9IFtdXHJcblx0dGFyZ2V0ID0gXCJzc1wiXHJcblxyXG5cdGR1bXAgXCJWOiN7VkVSU0lPTn0gUzoje1NJWkVfTUVURVJ9bSBSOiN7UkFESVVTX01FVEVSfW0gI3tTVEFSVF9QT0lOVC5sYXR9ICN7U1RBUlRfUE9JTlQubG9ufVwiICBcclxuXHRkdW1wIFwiI3t3aWR0aH0geCAje2hlaWdodH0gI3tTSVpFX1BJWEVMfVwiXHJcblx0ZHVtcCAnS2xpY2thIGjDpHIgZsO2ciBhdHQgc3RhcnRhIEdQUzplbidcclxuXHJcblxyXG5cdCMgYXNzZXJ0IDIyNCwgcm91bmQgZGlzdGFuY2VCZXR3ZWVuIG1hdHJpeC5jMSwgbWF0cml4LmQzXHJcblx0IyBhc3NlcnQgIDI3LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYzEsIG1hdHJpeC5kM1xyXG5cdCMgYXNzZXJ0ICA5MCwgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmMzLCBtYXRyaXguZDNcclxuXHQjIGFzc2VydCAxMDgsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5hNCwgbWF0cml4LmQzXHJcblx0IyBhc3NlcnQgMjE0LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYzQsIG1hdHJpeC5hMVxyXG5cdCMgYXNzZXJ0IDI5Nywgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmQyLCBtYXRyaXguYjNcclxuXHJcbndpbmRvdy5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kICdibGFjaydcclxuXHJcblx0cHVzaCgpXHJcblx0dGV4dEFsaWduIExFRlQsVE9QXHJcblx0ZmlsbCAnd2hpdGUnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgbWVzc2FnZXMubGVuZ3RoXHJcblx0XHR0ZXh0IG1lc3NhZ2VzW2ldLCAwLCAoaSsxLjUpICogNDAgIyAwLjIgKiBTSVpFX1BJWEVMXHJcblx0cG9wKClcclxuXHJcblx0aWYgdGFyZ2V0ID09IFwiXCIgb3Igbm90IG1hdHJpeC5wIG9yIG5vdCBtYXRyaXhbdGFyZ2V0XSB0aGVuIHJldHVyblxyXG5cclxuXHRmaWxsIDI1NVxyXG5cdHB1c2goKVxyXG5cdGZpbGwgJ3llbGxvdydcclxuXHR0ZXh0QWxpZ24gTEVGVCxUT1BcclxuXHR0ZXh0IHJvdW5kKGJlYXJpbmdCZXR3ZWVuKG1hdHJpeC5wLCBtYXRyaXhbdGFyZ2V0XSkpICsgJ8KwJywgMC4wMSp3aWR0aCwgMC4xICogU0laRV9QSVhFTFxyXG5cdHRleHRBbGlnbiBDRU5URVJcclxuXHR0ZXh0IHRhcmdldCwgMC41ICogd2lkdGgsIDAuMSAqIFNJWkVfUElYRUxcclxuXHR0ZXh0QWxpZ24gUklHSFRcclxuXHR0ZXh0IHJvdW5kKGRpc3RhbmNlQmV0d2VlbihtYXRyaXgucCwgbWF0cml4W3RhcmdldF0pKSArICdtJywgMC45OSp3aWR0aCwgMC4xICogU0laRV9QSVhFTFxyXG5cdHBvcCgpXHJcblxyXG5cdHNob3dUYXJnZXQgdGFyZ2V0LFwicFwiXHJcblxyXG51cGRhdGVTdGF0dXMgPSAtPlxyXG5cdHN0YXR1cyA9ICcnXHJcblx0bW92ZUNvbG9yID0gJ1doaXRlJ1xyXG5cdGlmIGdhbWUudHVybigpID09ICdiJyB0aGVuIG1vdmVDb2xvciA9ICdCbGFjaydcclxuXHRpZiBnYW1lLmluX2NoZWNrbWF0ZSgpIHRoZW4gc3RhdHVzID0gJ0dhbWUgb3ZlciwgJyArIG1vdmVDb2xvciArICcgaXMgaW4gY2hlY2ttYXRlLidcclxuXHRlbHNlIGlmIGdhbWUuaW5fZHJhdygpIHRoZW4gc3RhdHVzID0gJ0dhbWUgb3ZlciwgZHJhd24gcG9zaXRpb24nXHJcblx0ZWxzZSBcclxuXHRcdHN0YXR1cyA9IG1vdmVDb2xvciArICcgdG8gbW92ZSdcclxuXHRcdGlmIGdhbWUuaW5fY2hlY2soKSB0aGVuIHN0YXR1cyArPSAnLCAnICsgbW92ZUNvbG9yICsgJyBpcyBpbiBjaGVjaydcclxuXHJcblx0JHN0YXR1cy5odG1sIHN0YXR1c1xyXG5cdCRmZW4uaHRtbCBnYW1lLmZlbigpXHJcblx0JHBnbi5odG1sIGdhbWUucGduKClcclxuXHJcbnNob3dUYXJnZXQgPSAocCxxKSAtPlxyXG5cdFt4MSx5MV0gPSBncmlkX3BpeGVsW3RhcmdldF1cclxuXHRbeDIseTJdID0gZ3JpZF9waXhlbC5wXHJcblx0Y2xlYXJPdmVybGF5KClcclxuXHRkcmF3U3ZnTGluZSB4MSx5MSx4Mix5MiwnYmxhY2snLDJcclxuXHRkcmF3U3ZnQ2lyY2xlIHgxLHkxLCBSQURJVVNfUElYRUwsICd5ZWxsb3cnXHJcblx0ZHJhd1N2Z0NpcmNsZSB4Mix5MiwgUkFESVVTX1BJWEVMLCAncmVkJ1xyXG5cclxuY2xlYXJPdmVybGF5ID0gLT5cclxuICBzdmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpXHJcbiAgd2hpbGUgc3ZnLmZpcnN0Q2hpbGRcclxuICAgIHN2Zy5yZW1vdmVDaGlsZChzdmcuZmlyc3RDaGlsZClcclxuXHJcbiMgUml0YSBlbiBjaXJrZWwgaSBTVkcgcMOlIGFic29sdXQga29vcmRpbmF0ICh4LCB5KVxyXG5kcmF3U3ZnQ2lyY2xlID0gKHgsIHksIHJhZGl1cyA9IDEwLCBjb2xvciA9ICdyZWQnKSAtPlxyXG4gIHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5JylcclxuICBjaXJjbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2NpcmNsZScpXHJcbiAgY2lyY2xlLnNldEF0dHJpYnV0ZSgnY3gnLCB4KVxyXG4gIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ2N5JywgeSlcclxuICBjaXJjbGUuc2V0QXR0cmlidXRlKCdyJywgcmFkaXVzKVxyXG4gIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvcilcclxuICBzdmcuYXBwZW5kQ2hpbGQoY2lyY2xlKVxyXG5cclxuIyBSaXRhIGVuIGxpbmplIGZyw6VuICh4MSwgeTEpIHRpbGwgKHgyLCB5MilcclxuZHJhd1N2Z0xpbmUgPSAoeDEsIHkxLCB4MiwgeTIsIGNvbG9yID0gJ2JsdWUnLCB3aWR0aCA9IDQpIC0+XHJcbiAgc3ZnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKVxyXG4gIGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2xpbmUnKVxyXG4gIGxpbmUuc2V0QXR0cmlidXRlKCd4MScsIHgxKVxyXG4gIGxpbmUuc2V0QXR0cmlidXRlKCd5MScsIHkxKVxyXG4gIGxpbmUuc2V0QXR0cmlidXRlKCd4MicsIHgyKVxyXG4gIGxpbmUuc2V0QXR0cmlidXRlKCd5MicsIHkyKVxyXG4gIGxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCBjb2xvcilcclxuICBsaW5lLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgd2lkdGgpXHJcbiAgbGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgJ3JvdW5kJylcclxuICBzdmcuYXBwZW5kQ2hpbGQobGluZSlcclxuXHJcbiMgb25EcmFnU3RhcnQgPSAoc291cmNlLCBwaWVjZSwgcG9zaXRpb24sIG9yaWVudGF0aW9uKSAtPlxyXG4jIFx0IyBpZiBnYW1lLmdhbWVfb3ZlcigpIHRoZW4gcmV0dXJuIGZhbHNlXHJcbiMgXHQjIGlmIGdhbWUudHVybigpID09ICd3JyBhbmQgcGllY2Uuc2VhcmNoKC9eYi8pICE9IC0xIHRoZW4gZmFsc2VcclxuIyBcdCMgaWYgZ2FtZS50dXJuKCkgPT0gJ2InIGFuZCBwaWVjZS5zZWFyY2goL153LykgIT0gLTEgdGhlbiBmYWxzZVxyXG4jIFx0IyB0cnVlXHJcblx0XHJcbm9uRHJvcCA9IChzb3VyY2UsIHRhcmdldCkgLT5cclxuXHRtb3ZlID0gZ2FtZS5tb3ZlXHJcblx0XHRmcm9tOiBzb3VyY2VcclxuXHRcdHRvOiB0YXJnZXRcclxuXHRcdHByb21vdGlvbjogJ3EnICMgTk9URTogYWx3YXlzIHByb21vdGUgdG8gYSBxdWVlbiBmb3IgZXhhbXBsZSBzaW1wbGljaXR5XHJcblx0XHJcblx0IyBpbGxlZ2FsIG1vdmVcclxuXHRpZiBtb3ZlID09IG51bGwgdGhlbiByZXR1cm4gJ3NuYXBiYWNrJ1xyXG5cclxuXHR1cGRhdGVTdGF0dXMoKVxyXG5cclxuIyB1cGRhdGUgdGhlIGJvYXJkIHBvc2l0aW9uIGFmdGVyIHRoZSBwaWVjZSBzbmFwXHJcbiMgZm9yIGNhc3RsaW5nLCBlbiBwYXNzYW50LCBwYXduIHByb21vdGlvblxyXG4jIG9uU25hcEVuZCA9IC0+IGJvYXJkLnBvc2l0aW9uIGdhbWUuZmVuKClcclxuXHJcbm9uU25hcEVuZCA9IC0+XHJcbiAgY2xlYXJIaWdobGlnaHRzKClcclxuICBmZW4gPSBnYW1lLmZlbigpXHJcbiAgYm9hcmQucG9zaXRpb24oZmVuKVxyXG5cclxuICAjIEjDpG10YSBzZW5hc3RlIGRyYWcgZnLDpW4gQ2hlc3MtaGlzdG9yaWtcclxuICBtb3ZlcyA9IGdhbWUuaGlzdG9yeSh7IHZlcmJvc2U6IHRydWUgfSlcclxuICBpZiBtb3Zlcy5sZW5ndGggPiAwXHJcbiAgICBsYXN0TW92ZSA9IG1vdmVzW21vdmVzLmxlbmd0aCAtIDFdXHJcbiAgICBoaWdobGlnaHRTcXVhcmUobGFzdE1vdmUuZnJvbSwgRlJPTSApXHJcbiAgICBoaWdobGlnaHRTcXVhcmUobGFzdE1vdmUudG8sIFRPKVxyXG4gIGR1bXAgXCIje2xhc3RNb3ZlLmZyb219LSN7bGFzdE1vdmUudG99XCJcclxuXHJcbiAgdGFyZ2V0cyA9IFtsYXN0TW92ZS5mcm9tLCBsYXN0TW92ZS50bywgXCJzc1wiXVxyXG4gIHRhcmdldCA9IHRhcmdldHMuc2hpZnQoKVxyXG4gIGVjaG8gdGFyZ2V0LHRhcmdldHNcclxuXHJcbmNsZWFySGlnaGxpZ2h0cyA9IC0+XHJcbiAgc3F1YXJlcyA9IGJvYXJkRGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNxdWFyZV0nKVxyXG4gIGZvciBzcXVhcmUgaW4gc3F1YXJlc1xyXG4gICAgc3F1YXJlLnN0eWxlLmJhY2tncm91bmQgPSAnJ1xyXG5cclxuaGlnaGxpZ2h0U3F1YXJlID0gKHNxdWFyZSwgY29sb3IgPSAnI2E5YTlhOScpIC0+XHJcbiAgZWwgPSBib2FyZERpdi5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtc3F1YXJlPScje3NxdWFyZX0nXVwiKVxyXG4gIGlmIGVsXHJcbiAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3JcclxuXHJcbmNvbmZpZyA9IFxyXG5cdGRyYWdnYWJsZTogdHJ1ZVxyXG5cdHBvc2l0aW9uOiAnc3RhcnQnXHJcblx0IyBvbkRyYWdTdGFydDogb25EcmFnU3RhcnRcclxuXHRvbkRyb3A6IG9uRHJvcFxyXG5cdG9uU25hcEVuZDogb25TbmFwRW5kXHJcblxyXG5ib2FyZCA9IENoZXNzYm9hcmQgJ2JvYXJkJywgY29uZmlnXHJcblxyXG5nZXRPdmVybGF5U2l6ZSA9IChlbGVtZW50KSAtPlxyXG4gIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KVxyXG4gIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiQoJyNzdGFydEJ0bicpLm9uICdjbGljaycsIGJvYXJkLnN0YXJ0XHJcbiQoJyNjbGVhckJ0bicpLm9uICdjbGljaycsICgpIC0+XHJcblx0Y2xlYXJPdmVybGF5KClcclxuXHR0YXJnZXQgPSB0YXJnZXRzLnNoaWZ0KClcclxuIl19
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee