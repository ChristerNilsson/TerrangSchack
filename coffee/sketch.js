// Generated by CoffeeScript 2.7.0
var $fen, $pgn, $status, BEARINGLIST, DIGITS, DISTLIST, FACTOR, FROM, LETTERS, R, RADIUS_METER, RADIUS_PIXEL, SIZE_METER, SIZE_PIXEL, START_POINT, TIME, TO, VERSION, assert, bearingBetween, board, boardDiv, clearHighlights, clearOverlay, closestDistance, config, decreaseQueue, deltaXYBetweenPoints, destinationPoint, distanceBetween, drawSvgCircle, drawSvgLine, dump, echo, game, getOverlaySize, gpsCount, grid_meter, grid_pixel, highlightSquare, increaseQueue, initSounds, makePoint, matrix, messages, onDrop, onSnapEnd, range, sayDist, sayDistance, selectedSquare, showTarget, sounds, startTracking, started, target, targets, testPattern, updateStatus, watchID, wp, wperr,
  indexOf = [].indexOf;

VERSION = 90;

START_POINT = {
  lat: 59.2702,
  lon: 18.1303 // Kaninparken
};

SIZE_METER = 10; // En schackrutas storlek i meter


// Dessa beräknas i setup.
SIZE_PIXEL = 0; // En schackrutas storlek i pixlar

FACTOR = 1;

RADIUS_METER = 0; // meter. Maxavstånd mellan spelaren och target

RADIUS_PIXEL = 0;

TIME = [
  90,
  30 // base in minutes, increment in seconds
];

R = 6371e3; // Jordens radie i meter

BEARINGLIST = '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'.split(' ');

DISTLIST = '2 4 6 8 10 12 14 16 18 20 25 30 35 40 45 50 60 70 80 90 100 120 140 160 180 200 250 300 350 400 450 500 600 700 800 900 1000 1200 1400 1600 1800 2000 2500 3000 3500 4000 4500 5000 6000 7000 8000 9000'.split(' ');

//################
LETTERS = 'abcdefgh';

DIGITS = '87654321';

targets = []; // t ex ["e2","e4","ss"] from to center square

target = "ss";

messages = [];

sounds = {};

started = false;

matrix = {}; // WGS84 {lat,lon}

grid_meter = {};

grid_pixel = {};

echo = console.log;

range = _.range;

watchID = null;

gpsCount = 0;

boardDiv = document.getElementById('board');

game = new Chess();

$status = $('#status'); // jquery används inuti chessBoard

$fen = $('#fen');

$pgn = $('#pgn');

// visar vilket drag som utförts.
FROM = '#baca44'; // '#f6f669'

TO = '#baca44';

dump = function(msg) {
  messages.unshift(msg); // nyaste överst
  if (messages.length > 20) {
    return messages.pop(); // äldsta droppas
  }
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

closestDistance = (m) => {
  var bestDist, bestValue, d, k, len;
  bestDist = 999999;
  bestValue = 0;
  for (k = 0, len = DISTLIST.length; k < len; k++) {
    d = DISTLIST[k];
    if (abs(m - d) < bestDist) {
      bestDist = abs(m - d);
      bestValue = d;
    }
  }
  return bestValue;
};

sayDist = function(m) { // m är en distans, eventuellt i DISTLIST
  dump.store("");
  dump.store(`sayDistance ${m} ${JSON.stringify(distanceQ)}`);
  m = closestDistance(m);
  console.log(m, 'started');
  return distanceSounds[m].play();
};

// distanceSounds[m].onended () => console.log m, "ended"
sayDistance = function(a, b) { // a is newer (meter)
  var d, k, len;
  // if a border is crossed, produce a distance
  dump.store(`D ${round(a, 1)} ${round(b, 1)}`);
  a = round(a);
  b = round(b);
  if (b === -1) {
    return a;
  }
  for (k = 0, len = DISTLIST.length; k < len; k++) {
    d = DISTLIST[k];
    d = parseInt(d);
    if (a === d && b !== d) {
      return d;
    }
    if ((a - d) * (b - d) < 0) {
      return d;
    }
  }
  return "";
};

decreaseQueue = function() {
  var distance, distanceSaid, msg;
  console.log('decreaseQueue', bearingQ, distanceQ);
  if (bearingQ.length === 0) {
    if (distanceQ.length === 0) {

    } else {
      console.log('distance', distanceQ);
      msg = _.last(distanceQ); // latest
      distanceQ.clear(); // ignore the rest
      //arr = msg.split ' '
      if (general.DISTANCE || msg < LIMIT) {
        distance = msg;
        //errors.push "distance #{msg}"
        if (distanceSaid !== distance) {
          sayDist(distance);
        }
        return distanceSaid = distance;
      }
    }
  } else {
    console.log('bearing', bearingQ);
    msg = _.last(bearingQ); // latest
    //errors.push "bearing #{msg}"
    bearingQ.clear(); // ignore the rest
    if (indexOf.call(BEARINGLIST, msg) >= 0) {
      return bearingSounds[msg].play();
    }
  }
};

increaseQueue = function(p) {
  var bearingac, gpsLat, gpsLon, sDistance;
  // if crossHair == null then return

  // [trgLon,trgLat] = b2w.convert crossHair[0],crossHair[1]

  // a = LatLon p.coords.latitude, p.coords.longitude # newest
  // b = LatLon gpsLat, gpsLon
  // c = LatLon trgLat, trgLon # target

  // distac = a.distanceTo c # meters
  // distbc = b.distanceTo c
  // distance = (distac - distbc)/DIST
  bearingac = a.bearingTo(c);
  //bearingbc = b.bearingTo c
  if (distac >= LIMIT) {
    bearing.update(bearingac); // sayBearing bearingac,bearingbc else ""
  }
  sDistance = sayDistance(distac, distbc);
  if (sDistance !== "") {
    distanceQ.push(sDistance); // Vi kan inte säga godtyckligt avstånd numera
  }
  if (abs(distance) >= 0.5) { // update only if DIST detected. Otherwise some beeps will be lost.
    gpsLat = round(p.coords.latitude, 6);
    return gpsLon = round(p.coords.longitude, 6);
  }
};

wp = (p) => {
  // sounds.soundDown.play()
  gpsCount += 1;
  if (!matrix.p) {
    matrix.p = {};
  }
  matrix.p.lat = p.coords.latitude;
  matrix.p.lon = p.coords.longitude;
  grid_meter.p = makePoint(matrix.ss, matrix.p);
  grid_pixel.p = [grid_meter.p[0] * FACTOR, grid_meter.p[1] * FACTOR];
  dump(`${gpsCount} ${round(bearingBetween(matrix.p, matrix[target]))}° ${target} ${round(distanceBetween(matrix.p, matrix[target]))}m ${round(p.coords.latitude, 6)} ${round(p.coords.longitude, 6)}`);
  
  // om man är inom RADIUS meter från målet, byt mål
  if (target === '') {
    return;
  }
  if (RADIUS_METER < distanceBetween(matrix.p, matrix[target])) {
    return;
  }
  if (targets.length === 0) {
    target = '';
    clearOverlay();
    return;
  }
  sounds.soundDown.play();
  return target = targets.shift();
};

wperr = function(err) {
  return dump(`Fel: ${err.message}`);
};

window.touchStarted = function() {
  if (started) {
    return false;
  }
  messages = [];
  userStartAudio();
  startTracking();
  started = true;
  sounds.soundDown.play();
  return false;
};

startTracking = function() {
  if (!navigator.geolocation) {
    dump("Geolocation stöds inte i din webbläsare.");
    return;
  }
  // dump "GPS startad"
  return watchID = navigator.geolocation.watchPosition(wp, wperr, {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 1000
  });
};

distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return (θ * 180 / Math.PI + 360) % 360; // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    -dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

initSounds = function() {
  var k, len, name, ref, results, sound;
  sounds = {};
  ref = "soundDown soundUp".split(' ');
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    name = ref[k];
    sound = loadSound(`sounds/${name}.wav`);
    sound.setVolume(1.0);
    sound.pan(0);
    results.push(sounds[name] = sound);
  }
  return results;
};

window.preload = function() {
  return initSounds();
};

window.setup = function() {
  var arr, h, i, j, k, key, l, len, len1, ref, ref1;
  h = window.windowHeight - window.windowWidth;
  SIZE_PIXEL = round(976 / 8); // En schackrutas storlek i pixlar. round är nödvändigt!
  // if SIZE_PIXEL % 2 == 1 then SIZE_PIXEL -= 1
  createCanvas(window.windowWidth, 700, document.getElementById("canvas"));
  dump(`SIZE_PIXEL ${SIZE_PIXEL}`);
  FACTOR = SIZE_PIXEL / SIZE_METER;
  RADIUS_METER = 0.25 * SIZE_METER; // meter. Maxavstånd mellan spelaren och target
  RADIUS_PIXEL = 0.25 * SIZE_PIXEL;
  grid_meter.ss = [
    4 * SIZE_METER,
    4 * SIZE_METER // origo, samlingspunkt
  ];
  grid_pixel.ss = [
    4 * SIZE_PIXEL,
    4 * SIZE_PIXEL // origo, samlingspunkt
  ];
  frameRate(10);
  matrix.ss = START_POINT;
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 8; i = ++k) {
      results.push(destinationPoint(matrix.ss.lat, matrix.ss.lon, i * SIZE_METER, 90));
    }
    return results;
  })();
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      key = `${LETTERS[i]}${DIGITS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, j * SIZE_METER, 180);
      grid_pixel[key] = [(i + 0.5) * SIZE_PIXEL, (j + 0.5) * SIZE_PIXEL];
      grid_meter[key] = [(i + 0.5) * SIZE_METER, (j + 0.5) * SIZE_METER];
    }
  }
  targets = [];
  target = "ss";
  dump(`V:${VERSION} S:${SIZE_METER}m R:${RADIUS_METER}m ${START_POINT.lat} ${START_POINT.lon}`);
  dump(`${width} x ${height} ${SIZE_PIXEL}`);
  return dump('Klicka här för att starta!');
};

// assert 224, round distanceBetween matrix.c1, matrix.d3
// assert  27, round bearingBetween matrix.c1, matrix.d3
// assert  90, round bearingBetween matrix.c3, matrix.d3
// assert 108, round bearingBetween matrix.a4, matrix.d3
// assert 214, round bearingBetween matrix.c4, matrix.a1
// assert 297, round bearingBetween matrix.d2, matrix.b3
testPattern = function() {
  var i, j, k, len, ref, results, x, y;
  ref = range(9);
  // clearOverlay()
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(9);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        x = i * SIZE_PIXEL;
        y = j * SIZE_PIXEL;
        drawSvgLine(x, y - 8, x, y + 8, 'black', 1);
        results1.push(drawSvgLine(x - 8, y, x + 8, y, 'black', 1));
      }
      return results1;
    })());
  }
  return results;
};

window.draw = function() {
  var i, k, len, ref;
  background('black');
  push();
  textSize(0.4 * SIZE_PIXEL);
  textAlign(CENTER, TOP);
  fill('white');
  ref = range(messages.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    text(messages[i], 0.5 * width, (i + 2.5) * 0.4 * SIZE_PIXEL);
  }
  pop();
  if (target === "" || !matrix.p || !matrix[target]) {
    return;
  }
  fill(255);
  push();
  textSize(0.8 * SIZE_PIXEL);
  fill('yellow');
  textAlign(LEFT, CENTER);
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 0.01 * width, 0.55 * SIZE_PIXEL);
  textAlign(CENTER);
  text(target, 0.5 * width, 0.55 * SIZE_PIXEL);
  textAlign(RIGHT);
  text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 0.99 * width, 0.55 * SIZE_PIXEL);
  pop();
  return showTarget(target, "p");
};

updateStatus = function() {
  var moveColor, status;
  status = '';
  moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }
  if (game.in_checkmate()) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  } else if (game.in_draw()) {
    status = 'Game over, drawn position';
  } else {
    status = moveColor + ' to move';
    if (game.in_check()) {
      status += ', ' + moveColor + ' is in check';
    }
  }
  $status.html(status);
  $fen.html(game.fen());
  return $pgn.html(game.pgn());
};

showTarget = function(p, q) {
  var d, x, x1, x2, y, y1, y2;
  [x1, y1] = grid_pixel[target];
  [x2, y2] = grid_pixel.p;
  // dump "#{target} #{round x1} #{round y1} #{round x2} #{round y2}"
  clearOverlay();
  drawSvgLine(x1, y1, x2, y2, 'black', 2);
  drawSvgCircle(x1, y1, RADIUS_PIXEL, 'yellow');
  drawSvgCircle(x2, y2, RADIUS_PIXEL, 'red');
  x = x1;
  y = y1;
  d = RADIUS_PIXEL;
  drawSvgLine(x, y - d, x, y + d, 'black', 1);
  return drawSvgLine(x - d, y, x + d, y, 'black', 1);
};

clearOverlay = function() {
  var results, svg;
  svg = document.getElementById('overlay');
  results = [];
  while (svg.firstChild) {
    results.push(svg.removeChild(svg.firstChild));
  }
  return results;
};

// Rita en cirkel i SVG på absolut koordinat (x, y)
drawSvgCircle = function(x, y, radius = 10, color = 'red') {
  var circle, svg;
  svg = document.getElementById('overlay');
  circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
  circle.setAttribute('cx', x);
  circle.setAttribute('cy', y);
  circle.setAttribute('r', radius);
  circle.setAttribute('fill', color);
  return svg.appendChild(circle);
};

// Rita en linje från (x1, y1) till (x2, y2)
drawSvgLine = function(x1, y1, x2, y2, color = 'blue', width = 4) {
  var line, svg;
  svg = document.getElementById('overlay');
  line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
  line.setAttribute('x1', x1);
  line.setAttribute('y1', y1);
  line.setAttribute('x2', x2);
  line.setAttribute('y2', y2);
  line.setAttribute('stroke', color);
  line.setAttribute('stroke-width', width);
  line.setAttribute('stroke-linecap', 'round');
  return svg.appendChild(line);
};

// onDragStart = (source, piece, position, orientation) ->
// 	# if game.game_over() then return false
// 	# if game.turn() == 'w' and piece.search(/^b/) != -1 then false
// 	# if game.turn() == 'b' and piece.search(/^w/) != -1 then false
// 	# true
onDrop = function(source, target) {
  var move;
  move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });
  
  // illegal move
  if (move === null) {
    return 'snapback';
  }
  return updateStatus();
};

// update the board position after the piece snap
// for castling, en passant, pawn promotion
// onSnapEnd = -> board.position game.fen()
onSnapEnd = function() {
  var fen, lastMove, moves;
  clearHighlights();
  fen = game.fen();
  board.position(fen);
  // Hämta senaste drag från Chess-historik
  moves = game.history({
    verbose: true
  });
  if (moves.length > 0) {
    lastMove = moves[moves.length - 1];
    highlightSquare(lastMove.from, FROM);
    highlightSquare(lastMove.to, TO);
  }
  dump(`${lastMove.from}-${lastMove.to}`);
  targets = [lastMove.from, lastMove.to, "ss"];
  target = targets.shift();
  return echo(target, targets);
};

clearHighlights = function() {
  var k, len, results, square, squares;
  squares = boardDiv.querySelectorAll('[data-square]');
  results = [];
  for (k = 0, len = squares.length; k < len; k++) {
    square = squares[k];
    results.push(square.style.background = '');
  }
  return results;
};

highlightSquare = function(square, color = '#a9a9a9') {
  var el;
  el = boardDiv.querySelector(`[data-square='${square}']`);
  if (el) {
    return el.style.background = color;
  }
};

config = {
  draggable: false,
  position: 'start'
};

// onDragStart: onDragStart
// onDrop: onDrop
// onSnapEnd: onSnapEnd
board = Chessboard('board', config);

getOverlaySize = function(element) {
  var elem;
  elem = document.getElementById(element);
  return elem.getBoundingClientRect();
};

//$('#startBtn').on 'click', board.start
//$('#clearBtn').on 'click', () ->
//	clearOverlay()
//	target = targets.shift()
selectedSquare = null;

// boardDiv = document.getElementById('board')

// boardDiv.addEventListener('click', (event) => {
//   const el = event.target.closest('.square-55d63');
//   if (!el) return;
//   const square = el.getAttribute('data-square');
//   if (square) handleInput(square);
// });
boardDiv.addEventListener('click', function(event) {
  var clickSquare, clickTarget, move;
  clickTarget = event.target.closest('.square-55d63');
  //   clickTarget = event.target
  echo('clickTarget', clickTarget);
  if (!clickTarget.classList.contains('square-55d63')) {
    return;
  }
  clickSquare = clickTarget.getAttribute('data-square');
  echo('clickSquare', clickSquare);
  if (selectedSquare) {
    // Försök göra draget
    move = game.move({
      from: selectedSquare,
      to: clickSquare,
      promotion: 'q'
    });
    if (move) {
      board.position(game.fen());
      clearHighlights();
      clearOverlay();
      highlightSquare(move.from, '#baca44');
      highlightSquare(move.to, '#baca44');
      targets = [move.from, move.to, "ss"];
      target = targets.shift();
      echo(target, targets);
    } else {
      // Ogiltigt drag, ignorera
      console.log("Ogiltigt drag");
    }
    selectedSquare = null;
  } else {
    selectedSquare = clickSquare;
    clearHighlights();
    clearOverlay();
    highlightSquare(clickSquare, '#baca44');
  }
  return echo('selectedSquare', selectedSquare);
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee