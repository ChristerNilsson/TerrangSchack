// Generated by CoffeeScript 2.7.0
var FILES, R, RANKS, SIZE, VERSION, assert, bearingBetween, deltaXYBetweenPoints, destinationPoint, distanceBetween, dump, echo, grid, makePoint, matrix, messages, range, target, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

VERSION = 4;

SIZE = 100; // meter

FILES = 'abcd';

RANKS = '1234';

R = 6371e3; // Jordens radie i meter

targets = [];

target = "";

range = _.range;

messages = [];

echo = console.log;

dump = function(msg) {
  if (messages.length > 20) {
    return;
  }
  return messages.push(msg);
};

assert = function(a, b) {
  if (a !== b) {
    return echo('assert', a, b);
  }
};

window.touchStarted = function() {
  var watchID;
  dump('touchStarted');
  return watchID = navigator.geolocation.watchPosition(function(p) {
    var accuracy;
    matrix.p.lat = p.coords.latitude;
    matrix.p.lon = p.coords.longitude;
    dump(`gps ${p.coords.latitude} ${p.coords.longitude} ${distanceBetween(matrix.p, matrix[target])}`);
    grid.p = makePoint(matrix.p, matrix.s);
    // om man är högst 5 meter från målet, byt mål
    if (target === '') {
      return;
    }
    if (5 < distanceBetween(matrix.p, matrix[target])) {
      return;
    }
    if (targets.length === 0) {
      target = '';
      return;
    }
    target = targets.pop();
    dump(`target ${target}`);
    accuracy = pos.coords.accuracy;
    return dump(`Position: ${lat}, ${lon} (±${accuracy} m)`, function(err) {
      return console.error("Fel vid positionshämtning:", err.message);
    }, {
      enableHighAccuracy: true,
      maximumAge: 1000,
      timeout: 5000
    });
  });
};

distanceBetween = function(p, q) {
  var a, c, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  a = Math.sin(Δφ / 2) ** 2 + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // avstånd i meter
};

bearingBetween = function(p, q) {
  var lat1, lat2, lon1, lon2, x, y, Δλ, θ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  y = Math.sin(Δλ) * Math.cos(φ2);
  x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
  θ = Math.atan2(y, x);
  return modulo(180 - θ * 180 / Math.PI, 360); // bäring i grader
};

deltaXYBetweenPoints = function(p, q) {
  var dx, dy, lat1, lat2, lon1, lon2, Δλ, Δφ, φ1, φ2;
  lat1 = p.lat;
  lon1 = p.lon;
  lat2 = q.lat;
  lon2 = q.lon;
  φ1 = lat1 * Math.PI / 180;
  φ2 = lat2 * Math.PI / 180;
  Δφ = (lat2 - lat1) * Math.PI / 180;
  Δλ = (lon2 - lon1) * Math.PI / 180;
  dx = R * Δλ * Math.cos((φ1 + φ2) / 2); // östlig skillnad
  dy = R * Δφ; // nordlig skillnad
  return [
    dx,
    dy // i meter
  ];
};

makePoint = function(p, q) {
  return deltaXYBetweenPoints(p, q);
};

matrix = {}; // WGS84

grid = {}; // meter

grid.s = [
  0,
  0 // origo, samlingspunkt
];

destinationPoint = function(lat, lon, distance, bearing) {
  var δ, θ, λ1, λ2, φ1, φ2;
  φ1 = lat * Math.PI / 180;
  λ1 = lon * Math.PI / 180;
  θ = bearing * Math.PI / 180;
  δ = distance / R;
  φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));
  λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));
  return {
    lat: φ2 * 180 / Math.PI,
    lon: λ2 * 180 / Math.PI
  };
};

window.setup = function() {
  var arr, i, j, k, key, l, lat, lon;
  createCanvas(windowWidth - 10, windowHeight - 10, document.getElementById("canvas"));
  textAlign(CENTER, CENTER);
  textSize(40);
  noStroke();
  dump('setup');
  dump('bertil');
  matrix.s = {
    lat: 59.273361,
    lon: 18.16675
  };
  arr = (function() {
    var k, results;
    results = [];
    for (i = k = 0; k < 4; i = ++k) {
      results.push(destinationPoint(matrix.s.lat, matrix.s.lon, (i + 0.5) * SIZE, 90));
    }
    return results;
  })();
// echo arr
  for (i = k = 0; k < 4; i = ++k) {
    for (j = l = 0; l < 4; j = ++l) {
      key = `${FILES[i]}${RANKS[j]}`;
      matrix[key] = destinationPoint(arr[i].lat, arr[i].lon, (j + 0.5) * SIZE, 180);
      grid[key] = [100 * i - 350, 100 * j - 350];
    }
  }
  targets = _.keys(matrix);
  targets = _.shuffle(targets);
  // echo targets
  target = 's';
  // kvadrantens mittpunkt
  lat = (matrix.b3.lat + matrix.c2.lat) / 2;
  lon = (matrix.b3.lon + matrix.c2.lon) / 2;
  matrix.p = {lat, lon};
  //echo 'matrix',matrix
  //echo 'grid',grid
  assert(224, round(distanceBetween(matrix.c1, matrix.d3)));
  assert(27, round(bearingBetween(matrix.c1, matrix.d3)));
  assert(90, round(bearingBetween(matrix.c3, matrix.d3)));
  assert(108, round(bearingBetween(matrix.a4, matrix.d3)));
  assert(214, round(bearingBetween(matrix.c4, matrix.a1)));
  assert(297, round(bearingBetween(matrix.d2, matrix.b3)));
  return grid.p = [-200, -200];
};

window.draw = function() {
  var i, k, key, l, len, ref, x, y;
  background(0);
  fill(255);
  //scale 1.8
  stroke(255);
  line(450 + grid.p[0], 50 - grid.p[1], 450 + grid[target][0], 50 - grid[target][1]);
  noStroke();
  for (key in grid) {
    [x, y] = grid[key];
    fill('white');
    if (key === target) {
      fill('red');
    }
    if (key === 'p') {
      fill('yellow');
    }
    circle(450 + x, 50 - y, 10);
  }
  fill('green');
  for (i = k = 0; k < 4; i = ++k) {
    text(FILES[i], 100 + i * 100, 450);
    text(RANKS[i], 50, 450 - (50 + i * 100));
  }
  text('Ver: ' + VERSION, 250, 50);
  text(round(bearingBetween(matrix.p, matrix[target])) + '°', 100, 500);
  text(target, 250, 500);
  text(round(distanceBetween(matrix.p, matrix[target])) + 'm', 400, 500);
  push();
  textAlign("left");
  textSize(20);
  ref = range(messages.length);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    text(messages[i], 500, 15 + i * 20);
  }
  return pop();
};


// class Player
// 	constructor : (@name, @tx=4*SIZE, @ty=4*SIZE) ->
// 		@speed = SPEED
// 		@pos = createVector 4*SIZE,4*SIZE
// 		@target = new Square createVector @tx, @ty
// 		@home = @target
// 		@squares = [] # lista med Square som ej påbörjats
// 		@trail = []
// 		@n = 0
// 		@distance = 0
// 		@assists = 0

// 	closest : ->
// 		if @squares.length == 0 then return null
// 		bestDist = 99999
// 		bestSq = @squares[0]
// 		for square in @squares
// 			d = p5.Vector.dist square.pos, @pos
// 			if d < bestDist
// 				bestDist = d
// 				bestSq = square
// 		bestSq

// 	add : (sq) ->
// 		@squares.push sq
// 		@target = @closest()

// 	drawTail : ->
// 		if @n % (10/SPEED) == 0 then @trail.push createVector @pos.x, @pos.y
// 		@n += 1
// 		if @trail.length > MAXTRAIL then @trail.shift()
// 		stroke 'black'
// 		for i in [0...@trail.length]
// 			size = map i, 0, @trail.length - 1, 5,15
// 			noFill()
// 			ellipse @trail[i].x, @trail[i].y, size, size

// 	draw : () ->
// 		target = @target.pos
// 		dx = target.x - @pos.x
// 		dy = target.y - @pos.y
// 		d = sqrt dx*dx+dy*dy

// 		stroke 'black'

// 		# if @name in 'ABCD'
// 		line target.x, target.y, @pos.x, @pos.y

// 		step = p5.Vector.sub(target, @pos).setMag min @speed, d
// 		if d < @speed # target nådd
// 			if not @target.done
// 				@target.done = true
// 				@target.carrier = @name

// 				# Skicka draget om både start.done och slut.done
// 				for key of games
// 					g = games[key]
// 					if g.move and g.move.start.done and g.move.stopp.done						
// 						duration = (15/SPEED * (performance.now() - g.move.start.time)/1000)

// 						if g.index % 2 == 0 then g.duration += duration
// 						if g.move.start.carrier == g.move.stopp.carrier
// 							carriers = g.move.start.carrier
// 						else 
// 							carriers = g.move.start.carrier + g.move.stopp.carrier

// 						if g.move.start.carrier in 'ABCD'
// 							# echo 'assists: ',g.move.start.carrier,g.move.stopp.carrier
// 							players[g.move.start.carrier].assists += 1
// 							players[g.move.stopp.carrier].assists += 1
// 							# echo g.name, g.move.uci, @name, g.move.start.carrier + g.move.stopp.carrier

// 						g.chess.move { from: g.move.uci.slice(0, 2), to: g.move.uci.slice(2, 4) }

// 						td = document.getElementById("SEL#{g.name}")
// 						td.innerHTML += "#{g.san_moves[g.chess.history().length-1]} by #{carriers} (#{duration.toFixed()} s)<br>"

// 						document.getElementById("board#{g.name}").innerHTML = shrink g.chess.ascii()
// 						updateInfo g.name, @

// 						g.queue.push g.move
// 						g.move = null
// 						if g.initMove() == false
// 							stoppTime = Date.now()
// 							# echo 'done', (stoppTime-startTime)/1000

// 			@squares = _.filter @squares, (sq) -> sq.done == false

// 			# hämta närmaste uppdrag om sådant finns
// 			if @squares.length > 0
// 				@target = @closest()
// 				d = p5.Vector.dist @pos,@target.pos
// 				@distance += d

// 		@pos.add step

// 		for square in @squares
// 			if @name in 'ABCD'
// 				fill 'red'
// 			else
// 				fill 'black'
// 			circle square.pos.x, square.pos.y, 10

// 		# if @name in 'ABCD'
// 		@drawTail()
// 		if @name in 'ABCD' then fill 'yellow' else fill 'black'
// 		strokeWeight 1
// 		circle @pos.x,@pos.y,0.4*SIZE
// 		if @name in 'ABCD' then fill 'black' else fill 'yellow'
// 		noStroke()
// 		# fill 'black'
// 		text @name, @pos.x, @pos.y

// uci2pos = (uci) -> # t ex e2e4 => [[225,75],[225,175]]
// 	startx = uci[0]
// 	starty = uci[1]
// 	stoppx = uci[2]
// 	stoppy = uci[3]
// 	result = []
// 	x = FILES.indexOf startx
// 	y = 7 - RANKS.indexOf starty
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	x = FILES.indexOf stoppx
// 	y = 7 - RANKS.indexOf stoppy
// 	result.push createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// 	result

// class Game
// 	constructor : (@name, pgn, @link) ->
// 		@chess = new Chess()
// 		@chess.load_pgn pgn
// 		@san_moves = @chess.history() # [Nf3, ...]
// 		@uci_moves = (move.from + move.to for move in @chess.history({ verbose: true })) # [g1f3, ...]
// 		@move = null
// 		@queue = []
// 		@duration = 0
// 		@chess.reset()
// 		@index = -1
// 		document.getElementById("link#{@name}").innerHTML = "<a href=\"#{@link}\" target=\"_blank\">Link</a>"

// 	initMove : ->
// 		if @index >= @uci_moves.length - 1 then return false
// 		@index += 1
// 		if @move != null 
// 			#echo 'too quick!'
// 			return false
// 		@move = new Move @uci_moves[@index], @name

// 		start = @move.uci.slice 0,2
// 		stopp = @move.uci.slice 2,4

// 		antal = 'ABCD'.indexOf @name
// 		for i in [0...antal] 
// 			start = rotate start
// 			stopp = rotate stopp

// 		if @index % 2 == 0
// 			a = "1234"
// 			b = "5678"
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.A.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.B.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.C.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.D.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.A.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.B.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.C.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.D.add @move.stopp

// 		else
// 			a = "1234"
// 			b = "5678"
// 			# Hantera motståndaren
// 			# Dela ut start och stopp till rätt spelare beroende på kvadrant
// 			if start[0] in "abcd" and start[1] in a then players.G.add @move.start
// 			if start[0] in "abcd" and start[1] in b then players.E.add @move.start
// 			if start[0] in "efgh" and start[1] in a then players.H.add @move.start
// 			if start[0] in "efgh" and start[1] in b then players.F.add @move.start

// 			if stopp[0] in "abcd" and stopp[1] in a then players.G.add @move.stopp
// 			if stopp[0] in "abcd" and stopp[1] in b then players.E.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in a then players.H.add @move.stopp
// 			if stopp[0] in "efgh" and stopp[1] in b then players.F.add @move.stopp
// 		true

// class Square 
// 	constructor : (@pos, @uci="", @carrier="") -> # Vector
// 		@done = false
// 		@time = performance.now()

// # rotate = (sq) -> FILES[8-sq[1]] + String 1 + FILES.indexOf sq[0]
// # echo "g3" == rotate "c2"
// # echo "h1" == rotate "a1"
// # echo "h8" == rotate rotate "a1"
// # echo "a8" == rotate rotate rotate "a1"
// # echo "a1" == rotate rotate rotate rotate "a1"

// # coordinates = (sq) ->
// # 	x = FILES.indexOf sq[0]
// # 	y = RANKS.indexOf sq[1]
// # 	[x, 7-y]
// # echo _.isEqual [4,4], coordinates "e4"
// # echo _.isEqual [0,7], coordinates "a1"

// # toVector = ([x,y]) ->
// # 	createVector SIZE/2 + SIZE*x, SIZE/2 + SIZE*y
// # echo toVector [3,4]

// class Move
// 	constructor : (@uci, @name) -> # e2e4, B
// 		antal = "ABCD".indexOf @name
// 		start = @uci.slice 0,2
// 		stopp = @uci.slice 2,4
// 		for i in [0...antal]
// 			start = rotate start
// 			stopp = rotate stopp
// 		start = toVector coordinates start
// 		stopp = toVector coordinates stopp
// 		@pos = [start, stopp]
// 		@start = new Square start, @uci
// 		@stopp = new Square stopp, @uci

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxjQUFBLEVBQUEsb0JBQUEsRUFBQSxnQkFBQSxFQUFBLGVBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUE7RUFBQTs7QUFBQSxPQUFBLEdBQVU7O0FBQ1YsSUFBQSxHQUFPLElBRFA7O0FBR0EsS0FBQSxHQUFROztBQUNSLEtBQUEsR0FBUTs7QUFFUixDQUFBLEdBQUksT0FOSjs7QUFRQSxPQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTOztBQUVULEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBRVYsUUFBQSxHQUFXOztBQUVYLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBRWYsSUFBQSxHQUFPLFFBQUEsQ0FBQyxHQUFELENBQUE7RUFDTixJQUFHLFFBQVEsQ0FBQyxNQUFULEdBQWtCLEVBQXJCO0FBQTZCLFdBQTdCOztTQUNBLFFBQVEsQ0FBQyxJQUFULENBQWMsR0FBZDtBQUZNOztBQUlQLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtFQUFTLElBQUcsQ0FBQSxLQUFLLENBQVI7V0FBZSxJQUFBLENBQUssUUFBTCxFQUFjLENBQWQsRUFBZ0IsQ0FBaEIsRUFBZjs7QUFBVDs7QUFFVCxNQUFNLENBQUMsWUFBUCxHQUFzQixRQUFBLENBQUEsQ0FBQTtBQUN0QixNQUFBO0VBQUMsSUFBQSxDQUFLLGNBQUw7U0FDQSxPQUFBLEdBQVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUF0QixDQUFvQyxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQy9DLFFBQUE7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LE1BQU0sQ0FBQyxNQUFELENBQS9CLENBQU4sQ0FBQSxHQUFnRCxHQUFyRCxFQUF5RCxHQUF6RCxFQUE2RCxHQUE3RDtFQUNBLElBQUEsQ0FBSyxNQUFMLEVBQWEsR0FBYixFQUFpQixHQUFqQjtFQUNBLElBQUEsQ0FBSyxLQUFBLENBQU0sZUFBQSxDQUFnQixNQUFNLENBQUMsQ0FBdkIsRUFBMEIsTUFBTSxDQUFDLE1BQUQsQ0FBaEMsQ0FBTixDQUFBLEdBQWlELEdBQXRELEVBQTBELEdBQTFELEVBQThELEdBQTlEO0VBRUEsSUFBQSxDQUFBO0VBQ0EsU0FBQSxDQUFVLE1BQVY7RUFDQSxRQUFBLENBQVMsRUFBVDtBQUNBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFBLENBQUssUUFBUSxDQUFDLENBQUQsQ0FBYixFQUFpQixHQUFqQixFQUFxQixFQUFBLEdBQUcsQ0FBQSxHQUFFLEVBQTFCO0VBREQ7U0FFQSxHQUFBLENBQUE7QUEvQmE7O0FBdkpkIiwic291cmNlc0NvbnRlbnQiOlsiVkVSU0lPTiA9IDRcclxuU0laRSA9IDEwMCAjIG1ldGVyXHJcblxyXG5GSUxFUyA9ICdhYmNkJ1xyXG5SQU5LUyA9ICcxMjM0J1xyXG5cclxuUiA9IDYzNzFlMyAgIyBKb3JkZW5zIHJhZGllIGkgbWV0ZXJcclxuXHJcbnRhcmdldHMgPSBbXVxyXG50YXJnZXQgPSBcIlwiXHJcblxyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbm1lc3NhZ2VzID0gW11cclxuXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5cclxuZHVtcCA9IChtc2cpIC0+XHJcblx0aWYgbWVzc2FnZXMubGVuZ3RoID4gMjAgdGhlbiByZXR1cm5cclxuXHRtZXNzYWdlcy5wdXNoIG1zZ1xyXG5cclxuYXNzZXJ0ID0gKGEsYikgLT4gaWYgYSAhPSBiIHRoZW4gZWNobyAnYXNzZXJ0JyxhLGJcclxuXHJcbndpbmRvdy50b3VjaFN0YXJ0ZWQgPSAoKSAtPlxyXG5cdGR1bXAgJ3RvdWNoU3RhcnRlZCdcclxuXHR3YXRjaElEID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gKHApIC0+XHJcblx0XHRtYXRyaXgucC5sYXQgPSBwLmNvb3Jkcy5sYXRpdHVkZVxyXG5cdFx0bWF0cml4LnAubG9uID0gcC5jb29yZHMubG9uZ2l0dWRlXHJcblxyXG5cdFx0ZHVtcCBcImdwcyAje3AuY29vcmRzLmxhdGl0dWRlfSAje3AuY29vcmRzLmxvbmdpdHVkZX0gI3tkaXN0YW5jZUJldHdlZW4gbWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdfVwiXHJcblx0XHRncmlkLnAgPSBtYWtlUG9pbnQgbWF0cml4LnAsIG1hdHJpeC5zXHJcblxyXG5cdFx0IyBvbSBtYW4gw6RyIGjDtmdzdCA1IG1ldGVyIGZyw6VuIG3DpWxldCwgYnl0IG3DpWxcclxuXHRcdGlmIHRhcmdldCA9PSAnJyB0aGVuIHJldHVyblxyXG5cdFx0aWYgNSA8IGRpc3RhbmNlQmV0d2VlbiBtYXRyaXgucCwgbWF0cml4W3RhcmdldF0gdGhlbiByZXR1cm5cclxuXHRcdGlmIHRhcmdldHMubGVuZ3RoID09IDBcclxuXHRcdFx0dGFyZ2V0ID0gJydcclxuXHRcdFx0cmV0dXJuXHJcblx0XHR0YXJnZXQgPSB0YXJnZXRzLnBvcCgpXHJcblx0XHRkdW1wIFwidGFyZ2V0ICN7dGFyZ2V0fVwiXHJcblxyXG5cdFx0YWNjdXJhY3kgPSBwb3MuY29vcmRzLmFjY3VyYWN5XHJcblx0XHRkdW1wIFwiUG9zaXRpb246ICN7bGF0fSwgI3tsb259ICjCsSN7YWNjdXJhY3l9IG0pXCJcclxuXHRcdCxcclxuXHRcdChlcnIpIC0+XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IgXCJGZWwgdmlkIHBvc2l0aW9uc2jDpG10bmluZzpcIiwgZXJyLm1lc3NhZ2VcclxuXHRcdCxcclxuXHRcdGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxyXG5cdFx0bWF4aW11bUFnZTogMTAwMFxyXG5cdFx0dGltZW91dDogNTAwMFxyXG5cclxuXHJcbmRpc3RhbmNlQmV0d2VlbiA9IChwLHEpIC0+XHJcblx0bGF0MSA9IHAubGF0XHJcblx0bG9uMSA9IHAubG9uXHJcblx0bGF0MiA9IHEubGF0XHJcblx0bG9uMiA9IHEubG9uXHJcblx0z4YxID0gbGF0MSAqIE1hdGguUEkgLyAxODBcclxuXHTPhjIgPSBsYXQyICogTWF0aC5QSSAvIDE4MFxyXG5cdM6Uz4YgPSAobGF0MiAtIGxhdDEpICogTWF0aC5QSSAvIDE4MFxyXG5cdM6UzrsgPSAobG9uMiAtIGxvbjEpICogTWF0aC5QSSAvIDE4MFxyXG5cdGEgPSBNYXRoLnNpbijOlM+GIC8gMikgKiogMiArIE1hdGguY29zKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5zaW4ozpTOuyAvIDIpICoqIDJcclxuXHRjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKVxyXG5cdFIgKiBjICAjIGF2c3TDpW5kIGkgbWV0ZXJcclxuXHJcbmJlYXJpbmdCZXR3ZWVuID0gKHAscSkgLT5cclxuXHRsYXQxID0gcC5sYXRcclxuXHRsb24xID0gcC5sb25cclxuXHRsYXQyID0gcS5sYXRcclxuXHRsb24yID0gcS5sb25cclxuXHTPhjEgPSBsYXQxICogTWF0aC5QSSAvIDE4MFxyXG5cdM+GMiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwXHJcblx0zpTOuyA9IChsb24yIC0gbG9uMSkgKiBNYXRoLlBJIC8gMTgwXHJcblx0eSA9IE1hdGguc2luKM6UzrspICogTWF0aC5jb3Moz4YyKVxyXG5cdHggPSBNYXRoLmNvcyjPhjEpICogTWF0aC5zaW4oz4YyKSAtIE1hdGguc2luKM+GMSkgKiBNYXRoLmNvcyjPhjIpICogTWF0aC5jb3MozpTOuylcclxuXHTOuCA9IE1hdGguYXRhbjIoeSwgeClcclxuXHQoMTgwIC0gzrggKiAxODAgLyBNYXRoLlBJKSAlJSAzNjAgICMgYsOkcmluZyBpIGdyYWRlclxyXG5cclxuZGVsdGFYWUJldHdlZW5Qb2ludHMgPSAocCxxKSAtPlxyXG5cdGxhdDEgPSBwLmxhdFxyXG5cdGxvbjEgPSBwLmxvblxyXG5cdGxhdDIgPSBxLmxhdFxyXG5cdGxvbjIgPSBxLmxvblxyXG5cdM+GMSA9IGxhdDEgKiBNYXRoLlBJIC8gMTgwXHJcblx0z4YyID0gbGF0MiAqIE1hdGguUEkgLyAxODBcclxuXHTOlM+GID0gKGxhdDIgLSBsYXQxKSAqIE1hdGguUEkgLyAxODBcclxuXHTOlM67ID0gKGxvbjIgLSBsb24xKSAqIE1hdGguUEkgLyAxODBcclxuXHRkeCA9IFIgKiDOlM67ICogTWF0aC5jb3MoKM+GMSArIM+GMikgLyAyKSAgIyDDtnN0bGlnIHNraWxsbmFkXHJcblx0ZHkgPSBSICogzpTPhiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIG5vcmRsaWcgc2tpbGxuYWRcclxuXHRbZHgsZHldICMgaSBtZXRlclxyXG5cclxubWFrZVBvaW50ID0gKHAscSkgLT4gZGVsdGFYWUJldHdlZW5Qb2ludHMgcCwgcVxyXG5cclxubWF0cml4ID0ge30gIyBXR1M4NFxyXG5ncmlkID0ge30gIyBtZXRlclxyXG5ncmlkLnMgPSBbMCwwXSAjIG9yaWdvLCBzYW1saW5nc3B1bmt0XHJcblxyXG5kZXN0aW5hdGlvblBvaW50ID0gKGxhdCwgbG9uLCBkaXN0YW5jZSwgYmVhcmluZykgLT4gXHJcblx0z4YxID0gbGF0ICogTWF0aC5QSSAvIDE4MFxyXG5cdM67MSA9IGxvbiAqIE1hdGguUEkgLyAxODBcclxuXHTOuCA9IGJlYXJpbmcgKiBNYXRoLlBJIC8gMTgwXHJcblx0zrQgPSBkaXN0YW5jZSAvIFJcclxuXHJcblx0z4YyID0gTWF0aC5hc2luKE1hdGguc2luKM+GMSkgKiBNYXRoLmNvcyjOtCkgKyBNYXRoLmNvcyjPhjEpICogTWF0aC5zaW4ozrQpICogTWF0aC5jb3MozrgpKVxyXG5cdM67MiA9IM67MSArIE1hdGguYXRhbjIoTWF0aC5zaW4ozrgpICogTWF0aC5zaW4ozrQpICogTWF0aC5jb3Moz4YxKSwgTWF0aC5jb3MozrQpIC0gTWF0aC5zaW4oz4YxKSAqIE1hdGguc2luKM+GMikpXHJcblxyXG5cdGxhdDogz4YyICogMTgwIC8gTWF0aC5QSVxyXG5cdGxvbjogzrsyICogMTgwIC8gTWF0aC5QSVxyXG5cclxud2luZG93LnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgtMTAsIHdpbmRvd0hlaWdodC0xMCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJjYW52YXNcIlxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dGV4dFNpemUgNDBcclxuXHRub1N0cm9rZSgpXHJcblxyXG5cdGR1bXAgJ3NldHVwJ1xyXG5cdGR1bXAgJ2JlcnRpbCdcclxuXHJcblx0bWF0cml4LnMgPSBsYXQ6IDU5LjI3MzM2MSwgbG9uOiAxOC4xNjY3NVxyXG5cdGFyciA9IChkZXN0aW5hdGlvblBvaW50IG1hdHJpeC5zLmxhdCwgbWF0cml4LnMubG9uLCAoaSswLjUpKlNJWkUsIDkwIGZvciBpIGluIFswLi4uNF0pXHJcblx0IyBlY2hvIGFyclxyXG5cclxuXHRmb3IgaSBpbiBbMC4uLjRdXHJcblx0XHRmb3IgaiBpbiBbMC4uLjRdXHJcblx0XHRcdGtleSA9IFwiI3tGSUxFU1tpXX0je1JBTktTW2pdfVwiXHJcblx0XHRcdG1hdHJpeFtrZXldID0gZGVzdGluYXRpb25Qb2ludCBhcnJbaV0ubGF0LCBhcnJbaV0ubG9uLCAoaiswLjUpKlNJWkUsIDE4MFxyXG5cdFx0XHRncmlkW2tleV0gPSBbMTAwKmktMzUwLCAxMDAqai0zNTBdXHJcblxyXG5cdHRhcmdldHMgPSBfLmtleXMgbWF0cml4XHJcblx0dGFyZ2V0cyA9IF8uc2h1ZmZsZSB0YXJnZXRzXHJcblx0IyBlY2hvIHRhcmdldHNcclxuXHR0YXJnZXQgPSAncydcclxuXHJcblx0IyBrdmFkcmFudGVucyBtaXR0cHVua3RcclxuXHRsYXQgPSAobWF0cml4LmIzLmxhdCArIG1hdHJpeC5jMi5sYXQpIC8gMlxyXG5cdGxvbiA9IChtYXRyaXguYjMubG9uICsgbWF0cml4LmMyLmxvbikgLyAyXHJcblx0bWF0cml4LnAgPSB7bGF0LCBsb259XHJcblxyXG5cdCNlY2hvICdtYXRyaXgnLG1hdHJpeFxyXG5cdCNlY2hvICdncmlkJyxncmlkXHJcblxyXG5cdGFzc2VydCAyMjQsIHJvdW5kIGRpc3RhbmNlQmV0d2VlbiBtYXRyaXguYzEsIG1hdHJpeC5kM1xyXG5cdGFzc2VydCAyNywgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmMxLCBtYXRyaXguZDNcclxuXHRhc3NlcnQgOTAsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5jMywgbWF0cml4LmQzXHJcblx0YXNzZXJ0IDEwOCwgcm91bmQgYmVhcmluZ0JldHdlZW4gbWF0cml4LmE0LCBtYXRyaXguZDNcclxuXHRhc3NlcnQgMjE0LCByb3VuZCBiZWFyaW5nQmV0d2VlbiBtYXRyaXguYzQsIG1hdHJpeC5hMVxyXG5cdGFzc2VydCAyOTcsIHJvdW5kIGJlYXJpbmdCZXR3ZWVuIG1hdHJpeC5kMiwgbWF0cml4LmIzXHJcblx0XHJcblx0Z3JpZC5wID0gWy0yMDAsLTIwMF1cclxuXHJcblxyXG53aW5kb3cuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAwXHJcblx0ZmlsbCAyNTVcclxuXHQjc2NhbGUgMS44XHJcblxyXG5cdHN0cm9rZSAyNTVcclxuXHRsaW5lIDQ1MCtncmlkLnBbMF0sIDUwLWdyaWQucFsxXSwgNDUwK2dyaWRbdGFyZ2V0XVswXSwgNTAtZ3JpZFt0YXJnZXRdWzFdXHJcblx0bm9TdHJva2UoKVxyXG5cclxuXHRmb3Iga2V5IG9mIGdyaWRcclxuXHRcdFt4LHldID0gZ3JpZFtrZXldXHJcblx0XHRmaWxsICd3aGl0ZSdcclxuXHRcdGlmIGtleSA9PSB0YXJnZXQgdGhlbiBmaWxsICdyZWQnXHJcblx0XHRpZiBrZXkgPT0gJ3AnIHRoZW4gZmlsbCAneWVsbG93J1xyXG5cdFx0Y2lyY2xlIDQ1MCt4LCA1MC15LCAxMFxyXG5cclxuXHRmaWxsICdncmVlbidcclxuXHRmb3IgaSBpbiBbMC4uLjRdXHJcblx0XHR0ZXh0IEZJTEVTW2ldLCAxMDAraSoxMDAsNDUwXHJcblx0XHR0ZXh0IFJBTktTW2ldLCA1MCwgNDUwIC0gKDUwK2kqMTAwKVxyXG5cclxuXHR0ZXh0ICdWZXI6ICcgKyBWRVJTSU9OLDI1MCw1MFxyXG5cdHRleHQgcm91bmQoYmVhcmluZ0JldHdlZW4obWF0cml4LnAsIG1hdHJpeFt0YXJnZXRdKSkrJ8KwJywxMDAsNTAwXHJcblx0dGV4dCB0YXJnZXQsIDI1MCw1MDBcclxuXHR0ZXh0IHJvdW5kKGRpc3RhbmNlQmV0d2VlbihtYXRyaXgucCwgbWF0cml4W3RhcmdldF0pKSsnbScsNDAwLDUwMFxyXG5cclxuXHRwdXNoKClcclxuXHR0ZXh0QWxpZ24gXCJsZWZ0XCJcclxuXHR0ZXh0U2l6ZSAyMFxyXG5cdGZvciBpIGluIHJhbmdlIG1lc3NhZ2VzLmxlbmd0aFxyXG5cdFx0dGV4dCBtZXNzYWdlc1tpXSw1MDAsMTUraSoyMFxyXG5cdHBvcCgpXHJcblxyXG5cdFxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIyBjbGFzcyBQbGF5ZXJcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lLCBAdHg9NCpTSVpFLCBAdHk9NCpTSVpFKSAtPlxyXG4jIFx0XHRAc3BlZWQgPSBTUEVFRFxyXG4jIFx0XHRAcG9zID0gY3JlYXRlVmVjdG9yIDQqU0laRSw0KlNJWkVcclxuIyBcdFx0QHRhcmdldCA9IG5ldyBTcXVhcmUgY3JlYXRlVmVjdG9yIEB0eCwgQHR5XHJcbiMgXHRcdEBob21lID0gQHRhcmdldFxyXG4jIFx0XHRAc3F1YXJlcyA9IFtdICMgbGlzdGEgbWVkIFNxdWFyZSBzb20gZWogcMOlYsO2cmphdHNcclxuIyBcdFx0QHRyYWlsID0gW11cclxuIyBcdFx0QG4gPSAwXHJcbiMgXHRcdEBkaXN0YW5jZSA9IDBcclxuIyBcdFx0QGFzc2lzdHMgPSAwXHJcblxyXG4jIFx0Y2xvc2VzdCA6IC0+XHJcbiMgXHRcdGlmIEBzcXVhcmVzLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuIG51bGxcclxuIyBcdFx0YmVzdERpc3QgPSA5OTk5OVxyXG4jIFx0XHRiZXN0U3EgPSBAc3F1YXJlc1swXVxyXG4jIFx0XHRmb3Igc3F1YXJlIGluIEBzcXVhcmVzXHJcbiMgXHRcdFx0ZCA9IHA1LlZlY3Rvci5kaXN0IHNxdWFyZS5wb3MsIEBwb3NcclxuIyBcdFx0XHRpZiBkIDwgYmVzdERpc3RcclxuIyBcdFx0XHRcdGJlc3REaXN0ID0gZFxyXG4jIFx0XHRcdFx0YmVzdFNxID0gc3F1YXJlXHJcbiMgXHRcdGJlc3RTcVxyXG5cclxuIyBcdGFkZCA6IChzcSkgLT5cclxuIyBcdFx0QHNxdWFyZXMucHVzaCBzcVxyXG4jIFx0XHRAdGFyZ2V0ID0gQGNsb3Nlc3QoKVxyXG5cclxuIyBcdGRyYXdUYWlsIDogLT5cclxuIyBcdFx0aWYgQG4gJSAoMTAvU1BFRUQpID09IDAgdGhlbiBAdHJhaWwucHVzaCBjcmVhdGVWZWN0b3IgQHBvcy54LCBAcG9zLnlcclxuIyBcdFx0QG4gKz0gMVxyXG4jIFx0XHRpZiBAdHJhaWwubGVuZ3RoID4gTUFYVFJBSUwgdGhlbiBAdHJhaWwuc2hpZnQoKVxyXG4jIFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLkB0cmFpbC5sZW5ndGhdXHJcbiMgXHRcdFx0c2l6ZSA9IG1hcCBpLCAwLCBAdHJhaWwubGVuZ3RoIC0gMSwgNSwxNVxyXG4jIFx0XHRcdG5vRmlsbCgpXHJcbiMgXHRcdFx0ZWxsaXBzZSBAdHJhaWxbaV0ueCwgQHRyYWlsW2ldLnksIHNpemUsIHNpemVcclxuXHJcbiMgXHRkcmF3IDogKCkgLT5cclxuIyBcdFx0dGFyZ2V0ID0gQHRhcmdldC5wb3NcclxuIyBcdFx0ZHggPSB0YXJnZXQueCAtIEBwb3MueFxyXG4jIFx0XHRkeSA9IHRhcmdldC55IC0gQHBvcy55XHJcbiMgXHRcdGQgPSBzcXJ0IGR4KmR4K2R5KmR5XHJcblxyXG4jIFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cclxuIyBcdFx0IyBpZiBAbmFtZSBpbiAnQUJDRCdcclxuIyBcdFx0bGluZSB0YXJnZXQueCwgdGFyZ2V0LnksIEBwb3MueCwgQHBvcy55XHJcblxyXG4jIFx0XHRzdGVwID0gcDUuVmVjdG9yLnN1Yih0YXJnZXQsIEBwb3MpLnNldE1hZyBtaW4gQHNwZWVkLCBkXHJcbiMgXHRcdGlmIGQgPCBAc3BlZWQgIyB0YXJnZXQgbsOlZGRcclxuIyBcdFx0XHRpZiBub3QgQHRhcmdldC5kb25lXHJcbiMgXHRcdFx0XHRAdGFyZ2V0LmRvbmUgPSB0cnVlXHJcbiMgXHRcdFx0XHRAdGFyZ2V0LmNhcnJpZXIgPSBAbmFtZVxyXG5cclxuIyBcdFx0XHRcdCMgU2tpY2thIGRyYWdldCBvbSBiw6VkZSBzdGFydC5kb25lIG9jaCBzbHV0LmRvbmVcclxuIyBcdFx0XHRcdGZvciBrZXkgb2YgZ2FtZXNcclxuIyBcdFx0XHRcdFx0ZyA9IGdhbWVzW2tleV1cclxuIyBcdFx0XHRcdFx0aWYgZy5tb3ZlIGFuZCBnLm1vdmUuc3RhcnQuZG9uZSBhbmQgZy5tb3ZlLnN0b3BwLmRvbmVcdFx0XHRcdFx0XHRcclxuIyBcdFx0XHRcdFx0XHRkdXJhdGlvbiA9ICgxNS9TUEVFRCAqIChwZXJmb3JtYW5jZS5ub3coKSAtIGcubW92ZS5zdGFydC50aW1lKS8xMDAwKVxyXG5cclxuIyBcdFx0XHRcdFx0XHRpZiBnLmluZGV4ICUgMiA9PSAwIHRoZW4gZy5kdXJhdGlvbiArPSBkdXJhdGlvblxyXG4jIFx0XHRcdFx0XHRcdGlmIGcubW92ZS5zdGFydC5jYXJyaWVyID09IGcubW92ZS5zdG9wcC5jYXJyaWVyXHJcbiMgXHRcdFx0XHRcdFx0XHRjYXJyaWVycyA9IGcubW92ZS5zdGFydC5jYXJyaWVyXHJcbiMgXHRcdFx0XHRcdFx0ZWxzZSBcclxuIyBcdFx0XHRcdFx0XHRcdGNhcnJpZXJzID0gZy5tb3ZlLnN0YXJ0LmNhcnJpZXIgKyBnLm1vdmUuc3RvcHAuY2FycmllclxyXG5cclxuIyBcdFx0XHRcdFx0XHRpZiBnLm1vdmUuc3RhcnQuY2FycmllciBpbiAnQUJDRCdcclxuIyBcdFx0XHRcdFx0XHRcdCMgZWNobyAnYXNzaXN0czogJyxnLm1vdmUuc3RhcnQuY2FycmllcixnLm1vdmUuc3RvcHAuY2FycmllclxyXG4jIFx0XHRcdFx0XHRcdFx0cGxheWVyc1tnLm1vdmUuc3RhcnQuY2Fycmllcl0uYXNzaXN0cyArPSAxXHJcbiMgXHRcdFx0XHRcdFx0XHRwbGF5ZXJzW2cubW92ZS5zdG9wcC5jYXJyaWVyXS5hc3Npc3RzICs9IDFcclxuIyBcdFx0XHRcdFx0XHRcdCMgZWNobyBnLm5hbWUsIGcubW92ZS51Y2ksIEBuYW1lLCBnLm1vdmUuc3RhcnQuY2FycmllciArIGcubW92ZS5zdG9wcC5jYXJyaWVyXHJcblxyXG4jIFx0XHRcdFx0XHRcdGcuY2hlc3MubW92ZSB7IGZyb206IGcubW92ZS51Y2kuc2xpY2UoMCwgMiksIHRvOiBnLm1vdmUudWNpLnNsaWNlKDIsIDQpIH1cclxuXHJcbiMgXHRcdFx0XHRcdFx0dGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlNFTCN7Zy5uYW1lfVwiKVxyXG4jIFx0XHRcdFx0XHRcdHRkLmlubmVySFRNTCArPSBcIiN7Zy5zYW5fbW92ZXNbZy5jaGVzcy5oaXN0b3J5KCkubGVuZ3RoLTFdfSBieSAje2NhcnJpZXJzfSAoI3tkdXJhdGlvbi50b0ZpeGVkKCl9IHMpPGJyPlwiXHJcblxyXG4jIFx0XHRcdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9hcmQje2cubmFtZX1cIikuaW5uZXJIVE1MID0gc2hyaW5rIGcuY2hlc3MuYXNjaWkoKVxyXG4jIFx0XHRcdFx0XHRcdHVwZGF0ZUluZm8gZy5uYW1lLCBAXHJcblxyXG4jIFx0XHRcdFx0XHRcdGcucXVldWUucHVzaCBnLm1vdmVcclxuIyBcdFx0XHRcdFx0XHRnLm1vdmUgPSBudWxsXHJcbiMgXHRcdFx0XHRcdFx0aWYgZy5pbml0TW92ZSgpID09IGZhbHNlXHJcbiMgXHRcdFx0XHRcdFx0XHRzdG9wcFRpbWUgPSBEYXRlLm5vdygpXHJcbiMgXHRcdFx0XHRcdFx0XHQjIGVjaG8gJ2RvbmUnLCAoc3RvcHBUaW1lLXN0YXJ0VGltZSkvMTAwMFxyXG5cclxuIyBcdFx0XHRAc3F1YXJlcyA9IF8uZmlsdGVyIEBzcXVhcmVzLCAoc3EpIC0+IHNxLmRvbmUgPT0gZmFsc2VcclxuXHJcbiMgXHRcdFx0IyBow6RtdGEgbsOkcm1hc3RlIHVwcGRyYWcgb20gc8OlZGFudCBmaW5uc1xyXG4jIFx0XHRcdGlmIEBzcXVhcmVzLmxlbmd0aCA+IDBcclxuIyBcdFx0XHRcdEB0YXJnZXQgPSBAY2xvc2VzdCgpXHJcbiMgXHRcdFx0XHRkID0gcDUuVmVjdG9yLmRpc3QgQHBvcyxAdGFyZ2V0LnBvc1xyXG4jIFx0XHRcdFx0QGRpc3RhbmNlICs9IGRcclxuXHJcbiMgXHRcdEBwb3MuYWRkIHN0ZXBcclxuXHJcbiMgXHRcdGZvciBzcXVhcmUgaW4gQHNxdWFyZXNcclxuIyBcdFx0XHRpZiBAbmFtZSBpbiAnQUJDRCdcclxuIyBcdFx0XHRcdGZpbGwgJ3JlZCdcclxuIyBcdFx0XHRlbHNlXHJcbiMgXHRcdFx0XHRmaWxsICdibGFjaydcclxuIyBcdFx0XHRjaXJjbGUgc3F1YXJlLnBvcy54LCBzcXVhcmUucG9zLnksIDEwXHJcblxyXG4jIFx0XHQjIGlmIEBuYW1lIGluICdBQkNEJ1xyXG4jIFx0XHRAZHJhd1RhaWwoKVxyXG4jIFx0XHRpZiBAbmFtZSBpbiAnQUJDRCcgdGhlbiBmaWxsICd5ZWxsb3cnIGVsc2UgZmlsbCAnYmxhY2snXHJcbiMgXHRcdHN0cm9rZVdlaWdodCAxXHJcbiMgXHRcdGNpcmNsZSBAcG9zLngsQHBvcy55LDAuNCpTSVpFXHJcbiMgXHRcdGlmIEBuYW1lIGluICdBQkNEJyB0aGVuIGZpbGwgJ2JsYWNrJyBlbHNlIGZpbGwgJ3llbGxvdydcclxuIyBcdFx0bm9TdHJva2UoKVxyXG4jIFx0XHQjIGZpbGwgJ2JsYWNrJ1xyXG4jIFx0XHR0ZXh0IEBuYW1lLCBAcG9zLngsIEBwb3MueVxyXG5cclxuIyB1Y2kycG9zID0gKHVjaSkgLT4gIyB0IGV4IGUyZTQgPT4gW1syMjUsNzVdLFsyMjUsMTc1XV1cclxuIyBcdHN0YXJ0eCA9IHVjaVswXVxyXG4jIFx0c3RhcnR5ID0gdWNpWzFdXHJcbiMgXHRzdG9wcHggPSB1Y2lbMl1cclxuIyBcdHN0b3BweSA9IHVjaVszXVxyXG4jIFx0cmVzdWx0ID0gW11cclxuIyBcdHggPSBGSUxFUy5pbmRleE9mIHN0YXJ0eFxyXG4jIFx0eSA9IDcgLSBSQU5LUy5pbmRleE9mIHN0YXJ0eVxyXG4jIFx0cmVzdWx0LnB1c2ggY3JlYXRlVmVjdG9yIFNJWkUvMiArIFNJWkUqeCwgU0laRS8yICsgU0laRSp5XHJcbiMgXHR4ID0gRklMRVMuaW5kZXhPZiBzdG9wcHhcclxuIyBcdHkgPSA3IC0gUkFOS1MuaW5kZXhPZiBzdG9wcHlcclxuIyBcdHJlc3VsdC5wdXNoIGNyZWF0ZVZlY3RvciBTSVpFLzIgKyBTSVpFKngsIFNJWkUvMiArIFNJWkUqeVxyXG4jIFx0cmVzdWx0XHJcblxyXG4jIGNsYXNzIEdhbWVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lLCBwZ24sIEBsaW5rKSAtPlxyXG4jIFx0XHRAY2hlc3MgPSBuZXcgQ2hlc3MoKVxyXG4jIFx0XHRAY2hlc3MubG9hZF9wZ24gcGduXHJcbiMgXHRcdEBzYW5fbW92ZXMgPSBAY2hlc3MuaGlzdG9yeSgpICMgW05mMywgLi4uXVxyXG4jIFx0XHRAdWNpX21vdmVzID0gKG1vdmUuZnJvbSArIG1vdmUudG8gZm9yIG1vdmUgaW4gQGNoZXNzLmhpc3RvcnkoeyB2ZXJib3NlOiB0cnVlIH0pKSAjIFtnMWYzLCAuLi5dXHJcbiMgXHRcdEBtb3ZlID0gbnVsbFxyXG4jIFx0XHRAcXVldWUgPSBbXVxyXG4jIFx0XHRAZHVyYXRpb24gPSAwXHJcbiMgXHRcdEBjaGVzcy5yZXNldCgpXHJcbiMgXHRcdEBpbmRleCA9IC0xXHJcbiMgXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluayN7QG5hbWV9XCIpLmlubmVySFRNTCA9IFwiPGEgaHJlZj1cXFwiI3tAbGlua31cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5MaW5rPC9hPlwiXHJcblxyXG4jIFx0aW5pdE1vdmUgOiAtPlxyXG4jIFx0XHRpZiBAaW5kZXggPj0gQHVjaV9tb3Zlcy5sZW5ndGggLSAxIHRoZW4gcmV0dXJuIGZhbHNlXHJcbiMgXHRcdEBpbmRleCArPSAxXHJcbiMgXHRcdGlmIEBtb3ZlICE9IG51bGwgXHJcbiMgXHRcdFx0I2VjaG8gJ3RvbyBxdWljayEnXHJcbiMgXHRcdFx0cmV0dXJuIGZhbHNlXHJcbiMgXHRcdEBtb3ZlID0gbmV3IE1vdmUgQHVjaV9tb3Zlc1tAaW5kZXhdLCBAbmFtZVxyXG5cclxuIyBcdFx0c3RhcnQgPSBAbW92ZS51Y2kuc2xpY2UgMCwyXHJcbiMgXHRcdHN0b3BwID0gQG1vdmUudWNpLnNsaWNlIDIsNFxyXG5cclxuIyBcdFx0YW50YWwgPSAnQUJDRCcuaW5kZXhPZiBAbmFtZVxyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLmFudGFsXSBcclxuIyBcdFx0XHRzdGFydCA9IHJvdGF0ZSBzdGFydFxyXG4jIFx0XHRcdHN0b3BwID0gcm90YXRlIHN0b3BwXHJcblxyXG4jIFx0XHRpZiBAaW5kZXggJSAyID09IDBcclxuIyBcdFx0XHRhID0gXCIxMjM0XCJcclxuIyBcdFx0XHRiID0gXCI1Njc4XCJcclxuIyBcdFx0XHQjIERlbGEgdXQgc3RhcnQgb2NoIHN0b3BwIHRpbGwgcsOkdHQgc3BlbGFyZSBiZXJvZW5kZSBww6Uga3ZhZHJhbnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuQS5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuQi5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuQy5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRC5hZGQgQG1vdmUuc3RhcnRcclxuXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkEuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkIuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkMuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkQuYWRkIEBtb3ZlLnN0b3BwXHJcblxyXG4jIFx0XHRlbHNlXHJcbiMgXHRcdFx0YSA9IFwiMTIzNFwiXHJcbiMgXHRcdFx0YiA9IFwiNTY3OFwiXHJcbiMgXHRcdFx0IyBIYW50ZXJhIG1vdHN0w6VuZGFyZW5cclxuIyBcdFx0XHQjIERlbGEgdXQgc3RhcnQgb2NoIHN0b3BwIHRpbGwgcsOkdHQgc3BlbGFyZSBiZXJvZW5kZSBww6Uga3ZhZHJhbnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuRy5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImFiY2RcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRS5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYSB0aGVuIHBsYXllcnMuSC5hZGQgQG1vdmUuc3RhcnRcclxuIyBcdFx0XHRpZiBzdGFydFswXSBpbiBcImVmZ2hcIiBhbmQgc3RhcnRbMV0gaW4gYiB0aGVuIHBsYXllcnMuRi5hZGQgQG1vdmUuc3RhcnRcclxuXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkcuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJhYmNkXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkUuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGEgdGhlbiBwbGF5ZXJzLkguYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdFx0aWYgc3RvcHBbMF0gaW4gXCJlZmdoXCIgYW5kIHN0b3BwWzFdIGluIGIgdGhlbiBwbGF5ZXJzLkYuYWRkIEBtb3ZlLnN0b3BwXHJcbiMgXHRcdHRydWVcclxuXHJcbiMgY2xhc3MgU3F1YXJlIFxyXG4jIFx0Y29uc3RydWN0b3IgOiAoQHBvcywgQHVjaT1cIlwiLCBAY2Fycmllcj1cIlwiKSAtPiAjIFZlY3RvclxyXG4jIFx0XHRAZG9uZSA9IGZhbHNlXHJcbiMgXHRcdEB0aW1lID0gcGVyZm9ybWFuY2Uubm93KClcclxuXHRcclxuIyAjIHJvdGF0ZSA9IChzcSkgLT4gRklMRVNbOC1zcVsxXV0gKyBTdHJpbmcgMSArIEZJTEVTLmluZGV4T2Ygc3FbMF1cclxuIyAjIGVjaG8gXCJnM1wiID09IHJvdGF0ZSBcImMyXCJcclxuIyAjIGVjaG8gXCJoMVwiID09IHJvdGF0ZSBcImExXCJcclxuIyAjIGVjaG8gXCJoOFwiID09IHJvdGF0ZSByb3RhdGUgXCJhMVwiXHJcbiMgIyBlY2hvIFwiYThcIiA9PSByb3RhdGUgcm90YXRlIHJvdGF0ZSBcImExXCJcclxuIyAjIGVjaG8gXCJhMVwiID09IHJvdGF0ZSByb3RhdGUgcm90YXRlIHJvdGF0ZSBcImExXCJcclxuXHJcbiMgIyBjb29yZGluYXRlcyA9IChzcSkgLT5cclxuIyAjIFx0eCA9IEZJTEVTLmluZGV4T2Ygc3FbMF1cclxuIyAjIFx0eSA9IFJBTktTLmluZGV4T2Ygc3FbMV1cclxuIyAjIFx0W3gsIDcteV1cclxuIyAjIGVjaG8gXy5pc0VxdWFsIFs0LDRdLCBjb29yZGluYXRlcyBcImU0XCJcclxuIyAjIGVjaG8gXy5pc0VxdWFsIFswLDddLCBjb29yZGluYXRlcyBcImExXCJcclxuXHJcbiMgIyB0b1ZlY3RvciA9IChbeCx5XSkgLT5cclxuIyAjIFx0Y3JlYXRlVmVjdG9yIFNJWkUvMiArIFNJWkUqeCwgU0laRS8yICsgU0laRSp5XHJcbiMgIyBlY2hvIHRvVmVjdG9yIFszLDRdXHJcblxyXG4jIGNsYXNzIE1vdmVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEB1Y2ksIEBuYW1lKSAtPiAjIGUyZTQsIEJcclxuIyBcdFx0YW50YWwgPSBcIkFCQ0RcIi5pbmRleE9mIEBuYW1lXHJcbiMgXHRcdHN0YXJ0ID0gQHVjaS5zbGljZSAwLDJcclxuIyBcdFx0c3RvcHAgPSBAdWNpLnNsaWNlIDIsNFxyXG4jIFx0XHRmb3IgaSBpbiBbMC4uLmFudGFsXVxyXG4jIFx0XHRcdHN0YXJ0ID0gcm90YXRlIHN0YXJ0XHJcbiMgXHRcdFx0c3RvcHAgPSByb3RhdGUgc3RvcHBcclxuIyBcdFx0c3RhcnQgPSB0b1ZlY3RvciBjb29yZGluYXRlcyBzdGFydFxyXG4jIFx0XHRzdG9wcCA9IHRvVmVjdG9yIGNvb3JkaW5hdGVzIHN0b3BwXHJcbiMgXHRcdEBwb3MgPSBbc3RhcnQsIHN0b3BwXVxyXG4jIFx0XHRAc3RhcnQgPSBuZXcgU3F1YXJlIHN0YXJ0LCBAdWNpXHJcbiMgXHRcdEBzdG9wcCA9IG5ldyBTcXVhcmUgc3RvcHAsIEB1Y2lcclxuIl19
//# sourceURL=c:\github\TerrangSchack\coffee\sketch.coffee